1
00:00:00,000 --> 00:00:08,242
[MUSIC].

2
00:00:08,242 --> 00:00:12,630
Welcome to the first part of the module on
Android Concurrency Frameworks.

3
00:00:12,630 --> 00:00:15,090
In this part, we focus on the
pattern-oriented

4
00:00:15,090 --> 00:00:18,948
structure and functionality of several
Android concurrency frameworks.

5
00:00:18,948 --> 00:00:21,270
Which contain an integrated set of
classes.

6
00:00:21,270 --> 00:00:24,930
That collaborate to provide a reasonable
architecture for families of

7
00:00:24,930 --> 00:00:30,030
related concurrent applications and
services, as covered in earlier videos.

8
00:00:30,030 --> 00:00:33,680
There are two primary motivations for
Android's Concurrency Frameworks.

9
00:00:33,680 --> 00:00:38,430
The first motivation stems from accidental
complexities of the Android platform.

10
00:00:38,430 --> 00:00:42,100
Which has several design constraints that
restrict how concurrent applications

11
00:00:42,100 --> 00:00:46,160
and services can be developed, as
described at this link.

12
00:00:46,160 --> 00:00:49,750
For example, if an application's user
interface thread doesn't respond

13
00:00:49,750 --> 00:00:53,560
to input within a short time, typically
three to five seconds.

14
00:00:53,560 --> 00:00:56,865
Android generates an Application Not
Responding dialogue.

15
00:00:56,865 --> 00:00:59,595
Which gives users an opportunity to
manually shut

16
00:00:59,595 --> 00:01:03,300
down a non-responsive application, as
discussed at this link.

17
00:01:04,560 --> 00:01:08,410
One consequence of this design constraint
is that the user interface thread can't

18
00:01:08,410 --> 00:01:12,590
block on any operations that may run for
an extended period of time.

19
00:01:12,590 --> 00:01:15,194
Likewise, non user interface threads
should not

20
00:01:15,194 --> 00:01:18,838
directly access components in Android's
user interface toolkit.

21
00:01:18,838 --> 00:01:21,298
Such as structured layout objects,
controls,

22
00:01:21,298 --> 00:01:24,320
dialogues and menus, since they aren't
thread-safe.

23
00:01:24,320 --> 00:01:26,390
And should be accessed only from the

24
00:01:26,390 --> 00:01:28,900
user interface thread as described at this
link.

25
00:01:30,140 --> 00:01:33,388
Although the Java concurrency mechanisms
covered in the previous

26
00:01:33,388 --> 00:01:34,896
module are used for starting,

27
00:01:34,896 --> 00:01:37,824
synchronizing, scheduling, and terminating
threads.

28
00:01:37,824 --> 00:01:40,332
They're intended for general purpose
concurrency

29
00:01:40,332 --> 00:01:43,010
environments, hence the need for
frameworks.

30
00:01:43,010 --> 00:01:46,300
The chill developers of multi threaded
software from these

31
00:01:46,300 --> 00:01:49,330
tedious and error prone aspects of its
design constraints.

32
00:01:50,890 --> 00:01:53,928
The second motivation for Android's
Concurrency Frameworks stems from

33
00:01:53,928 --> 00:01:57,340
the benefits of concurrency described in
this earlier video.

34
00:01:57,340 --> 00:01:59,980
Such as simplifying program structure to
avoid

35
00:01:59,980 --> 00:02:03,930
overly complex and tangled event-driven
software architectures.

36
00:02:03,930 --> 00:02:07,980
Increasing performance by overlapping
communication and computation

37
00:02:07,980 --> 00:02:11,130
to run in parallel on multi-core
platforms.

38
00:02:11,130 --> 00:02:14,151
And improving responsiveness by processing
short-duration

39
00:02:14,151 --> 00:02:16,626
user-facing operations in a different
thread.

40
00:02:16,626 --> 00:02:19,080
Then other long duration background
operation.

41
00:02:20,410 --> 00:02:23,164
As we'll see throughout this module,
Android's Concurrency

42
00:02:23,164 --> 00:02:26,040
Framework supply many POSA and gang of
four patterns.

43
00:02:26,040 --> 00:02:29,010
Including command processor, active
object, half

44
00:02:29,010 --> 00:02:31,440
sync half a sync, and strategy.

45
00:02:31,440 --> 00:02:33,070
As summarized in this earlier video.

46
00:02:33,070 --> 00:02:37,372
In later sections of this MOOC, we'll
cover these patterns in detail.

47
00:02:37,372 --> 00:02:41,063
And show how they're applied in Androids
concurrency and communication middleware.

48
00:02:41,063 --> 00:02:46,323
As well as in applications and services.

49
00:02:46,323 --> 00:02:50,976
[MUSIC].

50
00:02:50,976 --> 00:02:54,430
The Shield developers applications and
services.

51
00:02:54,430 --> 00:02:58,212
Accidental and inherent complexities of
Android design constraints as

52
00:02:58,212 --> 00:03:02,056
well as to enhance the software quality
attributes summarized earlier.

53
00:03:02,056 --> 00:03:04,386
Android provides several concurrency
frameworks.

54
00:03:04,386 --> 00:03:08,526
These frameworks allow certain
computations typically long duration

55
00:03:08,526 --> 00:03:12,170
and blocking operations to run in
background threads.

56
00:03:12,170 --> 00:03:15,360
And other computations, typically short
duration user facing

57
00:03:15,360 --> 00:03:18,220
operations, to run in the user interface
thread.

58
00:03:18,220 --> 00:03:21,052
For example, the image download
application discussed

59
00:03:21,052 --> 00:03:23,812
in this video uses an Android concurrency
framework.

60
00:03:23,812 --> 00:03:27,663
To spawn background threads to process
long duration blocking operations.

61
00:03:27,663 --> 00:03:31,290
Such as downloading large images from
remote servers.

62
00:03:31,290 --> 00:03:34,596
It then uses a synchronized message cube
provided by the framework.

63
00:03:34,596 --> 00:03:38,543
To communicate results from the background
threads to the user interface thread.

64
00:03:38,543 --> 00:03:41,900
Which then displays the image to the user
screen.

65
00:03:41,900 --> 00:03:46,160
The user interface thread can also use
this framework to pass messages to itself.

66
00:03:46,160 --> 00:03:48,540
For example, it can defer certain
processing

67
00:03:48,540 --> 00:03:50,480
until a designated period of time elapses.

68
00:03:51,510 --> 00:03:54,090
Android has two primary concurrency
frameworks.

69
00:03:54,090 --> 00:03:56,610
One framework consists of handlers,
messages, and

70
00:03:56,610 --> 00:03:58,947
runables, which we call the Hammer
Framework.

71
00:03:58,947 --> 00:04:01,956
Which provides a loosely connected set of
classes that allow

72
00:04:01,956 --> 00:04:05,409
long duration operations to run in one or
more background threads.

73
00:04:05,409 --> 00:04:08,289
And then, publish the results of these
operations to

74
00:04:08,289 --> 00:04:11,175
the user interface thread as described at
this link.

75
00:04:11,175 --> 00:04:14,690
And shown by our image downloading
application outlined earlier.

76
00:04:15,880 --> 00:04:18,438
Another concurrency framework is called
AsyncTask.

77
00:04:18,438 --> 00:04:21,388
Which provides a more tightly connected
set of classes that

78
00:04:21,388 --> 00:04:24,936
execute long duration operations in one or
more background threads.

79
00:04:24,936 --> 00:04:27,576
And publishes the results to the user
interface

80
00:04:27,576 --> 00:04:29,820
thread without manipulating threads,

81
00:04:29,820 --> 00:04:32,754
handlers, messages, or runnables
explicitly.

82
00:04:32,754 --> 00:04:34,330
As described at this link.

83
00:04:35,560 --> 00:04:37,362
Each framework has pros and cons and both

84
00:04:37,362 --> 00:04:40,815
are used extensively in Android's
middleware and packaged applications.

85
00:04:40,815 --> 00:04:45,119
As we'll discuss throughout this module.

86
00:04:45,119 --> 00:04:46,050
[MUSIC].

87
00:04:50,260 --> 00:04:53,276
The Android Concurrency Frameworks
discussed in this module

88
00:04:53,276 --> 00:04:56,190
are built using a number of reusable
classes.

89
00:04:56,190 --> 00:04:58,520
Some of which are directly visible to
users,

90
00:04:58,520 --> 00:05:00,750
while others are largely hidden below the
surface.

91
00:05:01,780 --> 00:05:05,600
The design, implementation and integration
of these classes are

92
00:05:05,600 --> 00:05:08,109
guided by many POSA and Gang of Four
patterns.

93
00:05:09,310 --> 00:05:12,670
Go briefly outline the most important
classes and patterns

94
00:05:12,670 --> 00:05:14,780
used in the frameworks we cover in this
module.

95
00:05:16,130 --> 00:05:21,120
Some classes we cover are used by both the
Hammer and in AsyncTask frameworks.

96
00:05:21,120 --> 00:05:24,540
For example a looper runs a thread
specific event loop that

97
00:05:24,540 --> 00:05:28,609
waits for and dispatches messages to
handlers as described at this link.

98
00:05:29,640 --> 00:05:32,160
The thread specific storage pattern
covered here is

99
00:05:32,160 --> 00:05:34,330
used to ensure there's only one looper per
thread.

100
00:05:35,470 --> 00:05:37,210
A message queue holds a list of messages
to

101
00:05:37,210 --> 00:05:39,900
be dispatched by a looper as described at
this link.

102
00:05:41,140 --> 00:05:45,206
Android's message queue class applies the
monitor object pattern presented here.

103
00:05:45,206 --> 00:05:48,510
To enable thread's to in queue and dequeue
messages concurrently.

104
00:05:49,970 --> 00:05:52,680
A message contains descriptions of a
message's type.

105
00:05:52,680 --> 00:05:56,450
Or other information and an arbitrary dead
object, they could be sent

106
00:05:56,450 --> 00:06:00,150
to a handler via its loopers message queue
as described at this link.

107
00:06:01,360 --> 00:06:04,079
Messages are created via a factory method
pattern covered here.

108
00:06:05,320 --> 00:06:09,173
Messages aren't added directly to a
MessageQueue, but through a handler.

109
00:06:09,173 --> 00:06:11,979
Which allows the sending and processing of
message and

110
00:06:11,979 --> 00:06:15,960
runnable objects in the MessageQueue
associated with a thread's looper.

111
00:06:15,960 --> 00:06:17,360
As described at this link.

112
00:06:18,860 --> 00:06:21,100
Handlers provide methods that support both
the

113
00:06:21,100 --> 00:06:24,550
active object and command processor
patterns covered here.

114
00:06:24,550 --> 00:06:27,450
To allow sender and receiver threads to
run concurrently.

115
00:06:28,690 --> 00:06:31,790
Implementations of the Java runnable
interface represent

116
00:06:31,790 --> 00:06:34,104
commands that can be executed by handlers.

117
00:06:34,104 --> 00:06:37,550
In conjunction with the looper class as
described at this link.

118
00:06:38,930 --> 00:06:41,554
The AsyncTask framework also uses several
other

119
00:06:41,554 --> 00:06:44,940
classes from the Java util concurrent
package.

120
00:06:44,940 --> 00:06:50,460
For example, future tasks can be used to
start and cancel an Async computation.

121
00:06:50,460 --> 00:06:53,540
Query to see if the computation is
complete and retrieve

122
00:06:53,540 --> 00:06:56,650
the result of the computation as described
at this link.

123
00:06:58,030 --> 00:07:02,188
Finally implementations to the executor
interface execute submitted rumble

124
00:07:02,188 --> 00:07:04,926
tasks either sequentially or in a pool of
threads.

125
00:07:04,926 --> 00:07:06,360
As described at this link.

126
00:07:07,560 --> 00:07:10,090
The AsyncTask framework uses these two
classes.

127
00:07:10,090 --> 00:07:13,805
To implement the Half-Sync, Half-Async
pattern, explained here.

128
00:07:13,805 --> 00:07:16,829
To decouple asynchronous and synchronous
processing,

129
00:07:16,829 --> 00:07:19,820
to simplify programming, and enhance
performance.

130
00:07:19,820 --> 00:07:24,619
[MUSIC].

131
00:07:28,440 --> 00:07:32,977
The classes and interfaces in Android's
concurrency frameworks we just summarized.

132
00:07:32,977 --> 00:07:34,899
Work together to embody the three key

133
00:07:34,899 --> 00:07:39,230
defining characteristics discussed earlier
during the course introductions.

134
00:07:40,410 --> 00:07:43,510
In particular, they provide inversion of
control, where

135
00:07:43,510 --> 00:07:47,090
the framework is responsible for detecting
events that occur.

136
00:07:47,090 --> 00:07:49,976
Multiplexing these events to the
corresponding handlers.

137
00:07:49,976 --> 00:07:51,890
And then, dispatching hook methods on

138
00:07:51,890 --> 00:07:54,510
these handlers to perform the intended
processing.

139
00:07:56,010 --> 00:07:59,670
They also provide integrated structure and
functionality targeted

140
00:07:59,670 --> 00:08:01,696
at the domain of concurrent programming in
Android.

141
00:08:01,696 --> 00:08:06,229
Finally, they provide semi-complete
portions of concurrent applications.

142
00:08:06,229 --> 00:08:08,572
That can be customized and completed by

143
00:08:08,572 --> 00:08:12,860
inheriting from abstract framework classes
and interfaces.

144
00:08:12,860 --> 00:08:16,810
And overriding hook methods to implement
application specific functionality.

145
00:08:18,350 --> 00:08:21,249
We analyze all of these classes throughout
this module.

146
00:08:21,249 --> 00:08:23,289
To show how they work, how they interact

147
00:08:23,289 --> 00:08:26,150
with each other, and how they're applied
in Android.

148
00:08:27,550 --> 00:08:31,358
We cover both the interface classes that
are visible to application developers.

149
00:08:31,358 --> 00:08:35,310
As well as implementation classes that are
less visible to application developers.

150
00:08:36,520 --> 00:08:38,730
This analysis shows by example.

151
00:08:38,730 --> 00:08:42,201
How softer patterns are applied to guide
the design, implementation.

152
00:08:42,201 --> 00:08:44,855
And integration of Android's concurrency
frameworks.

153
00:08:44,855 --> 00:08:47,050
And applications that use these
frameworks.

154
00:08:48,150 --> 00:08:50,110
Detailed coverage of these patterns and
their

155
00:08:50,110 --> 00:08:52,990
application in Android appears later in
this module.

156
00:08:52,990 --> 00:08:57,089
[MUSIC].

157
00:09:00,600 --> 00:09:03,960
In summary, Android has several design
constraints

158
00:09:03,960 --> 00:09:06,300
that restrict how concurrent programs can
be developed.

159
00:09:07,330 --> 00:09:09,960
For example, it only allows one thread

160
00:09:09,960 --> 00:09:13,430
to perform user interface operations per
application.

161
00:09:13,430 --> 00:09:15,920
All components in the same application
process use the same

162
00:09:15,920 --> 00:09:19,990
user interface thread to receive system
generated notifications in broadcast.

163
00:09:19,990 --> 00:09:23,250
Interact with users and perform activity
life cycle methods.

164
00:09:24,470 --> 00:09:27,180
Since components in Android's user
interface tool kit aren't threat

165
00:09:27,180 --> 00:09:30,290
safe, they should only be accessed from
the user interface thread.

166
00:09:31,300 --> 00:09:34,489
Likewise long duration operations should
run in background threads.

167
00:09:34,489 --> 00:09:37,349
To avoid generating application not
responding dialogues if

168
00:09:37,349 --> 00:09:40,170
they block for more than a few seconds.

169
00:09:40,170 --> 00:09:41,802
To make it easier for applications and

170
00:09:41,802 --> 00:09:44,048
services to conform to these design
constraints.

171
00:09:44,048 --> 00:09:46,351
Android provides several concurrency
frameworks that

172
00:09:46,351 --> 00:09:48,880
allow long duration concurrency operations
to run.

173
00:09:48,880 --> 00:09:51,820
And block in background threads and
communicate with user

174
00:09:51,820 --> 00:09:54,800
facing operations that run in the user
interface thread.

175
00:09:54,800 --> 00:09:57,500
Once concurrency framework consists of
handlers, messages

176
00:09:57,500 --> 00:10:00,610
and runnables which we call the Hammer
Framework.

177
00:10:00,610 --> 00:10:03,040
This framework allows operations to run in
one or more

178
00:10:03,040 --> 00:10:06,880
background threads that publish their
results to the user's interface thread.

179
00:10:06,880 --> 00:10:09,710
The classes and the Hammer Framework are
loosely connected.

180
00:10:09,710 --> 00:10:11,010
So, it's essential to understand the

181
00:10:11,010 --> 00:10:13,410
patterns that guide their structure and
interactions.

182
00:10:14,510 --> 00:10:16,440
The other framework is called AsyncTask.

183
00:10:16,440 --> 00:10:18,736
Which also allows operations to run in one
or more

184
00:10:18,736 --> 00:10:22,230
background threads and publish the results
to these interface thread.

185
00:10:23,460 --> 00:10:26,905
Unlike the Hammer framework, however, the
AsyncTask framer

186
00:10:26,905 --> 00:10:31,429
doesn't require applications to manipulate
threads, handlers, messages.

187
00:10:31,429 --> 00:10:33,720
Or runnables explicitly.

188
00:10:33,720 --> 00:10:37,541
Moreover, the classes in the AsyncTask
framework are strongly connected.

189
00:10:37,541 --> 00:10:39,959
Which helps simplify the use of this
framework

190
00:10:39,959 --> 00:10:42,370
since its design has a smaller surface
area.

191
00:10:43,730 --> 00:10:47,290
Most frameworks apply patterns from the
Gang of Four and POSA books.

192
00:10:47,290 --> 00:10:50,940
In turn, these pattern anointed frameworks
provide idioms that are

193
00:10:50,940 --> 00:10:54,290
specific to the Android platform and its
concurrency design constraints.

194
00:10:55,340 --> 00:10:58,530
An idiom is a pattern that focuses on a
particular context.

195
00:10:58,530 --> 00:11:01,460
Such as development platform, programming
language, or

196
00:11:01,460 --> 00:11:03,740
design method, as described at this link.

197
00:11:05,230 --> 00:11:08,210
In addition to these common frameworks,
other frameworks

198
00:11:08,210 --> 00:11:12,090
also exist for running computations
concurrently on Android.

199
00:11:12,090 --> 00:11:14,600
For example, RenderScript is a framework
for

200
00:11:14,600 --> 00:11:18,350
running computationally intensive tasks
efficiently on Android.

201
00:11:18,350 --> 00:11:22,650
It can be used to parallelize work across
all processors available on a device.

202
00:11:22,650 --> 00:11:25,910
Such as multicore CPUs, GPUs, or DSPs.

203
00:11:27,040 --> 00:11:30,464
Render script is primarily intended for
data parallel computations.

204
00:11:30,464 --> 00:11:33,828
Such as applications that perform image
processing, capitation of

205
00:11:33,828 --> 00:11:36,750
photography or computer vision as
described at this link.

206
00:11:37,810 --> 00:11:42,050
RxJava implements the .NET reactive
extensions for the JavaVirtual Machine.

207
00:11:42,050 --> 00:11:43,690
Who combines data or prevent streams

208
00:11:43,690 --> 00:11:45,770
the reactive objects and functional
computation.

209
00:11:46,770 --> 00:11:48,820
RXJava events or model is a streams

210
00:11:48,820 --> 00:11:51,790
of Asynchronous flows too which observers
ascribe.

211
00:11:51,790 --> 00:11:56,773
The observable streams can be filtered,
transformed, and composed in various ways.

212
00:11:56,773 --> 00:12:01,149
Before the results are emitted to an
observer as described at this link.

213
00:12:02,540 --> 00:12:05,310
While these other concurrency frameworks
are interesting,

214
00:12:05,310 --> 00:12:07,480
their beyond the scope of this MOOC.

215
00:12:07,480 --> 00:12:11,460
So we just focus on the, the Hammer, and
AsyncTask Frameworks in this module.

216
00:12:11,460 --> 00:12:21,460
[MUSIC]

