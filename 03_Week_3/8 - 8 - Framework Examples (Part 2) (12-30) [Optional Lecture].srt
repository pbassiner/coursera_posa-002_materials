1
00:00:03,220 --> 00:00:06,900
Welcome to part two of the module on
framework examples.

2
00:00:08,090 --> 00:00:09,370
In the previous part in this

3
00:00:09,370 --> 00:00:12,970
module, we presented scope commonality and
variability

4
00:00:12,970 --> 00:00:16,380
analysis as a method for developing

5
00:00:16,380 --> 00:00:19,870
and applying software product lines and
frameworks.

6
00:00:19,870 --> 00:00:22,150
And we also presented a couple of examples
of

7
00:00:22,150 --> 00:00:27,490
applying scope commonality and variability
analysis to Android and ACE.

8
00:00:27,490 --> 00:00:29,317
We're now going to dig a little bit

9
00:00:29,317 --> 00:00:32,990
deeper and discuss some examples of
Android framework components.

10
00:00:32,990 --> 00:00:37,070
And naturally, we'll be emphasizing the
commonality and variability of these

11
00:00:37,070 --> 00:00:40,600
components and frameworks as we go through
this part of the module.

12
00:00:41,940 --> 00:00:46,776
The two framework components we're
going to focus on here are activities,

13
00:00:46,776 --> 00:00:52,236
which provide a visual interface for user
interaction in Android, and services,

14
00:00:52,236 --> 00:00:56,136
which are classes and objects and
components that run in the

15
00:00:56,136 --> 00:00:59,334
background and perform long running
operations

16
00:00:59,334 --> 00:01:01,960
or allow access to remote resources.

17
00:01:03,290 --> 00:01:05,380
So here's a quick recap of the Android
activity.

18
00:01:05,380 --> 00:01:08,170
We've talked about this before, but here's
a little summary.

19
00:01:08,170 --> 00:01:12,710
As we mentioned, an activity provides a
visual interface to user interaction.

20
00:01:13,950 --> 00:01:17,710
An activity typically supports one thing a
user can do.

21
00:01:17,710 --> 00:01:22,160
So it might allow you to view an email
message or send an email message.

22
00:01:22,160 --> 00:01:24,200
It might show a login screen.

23
00:01:24,200 --> 00:01:28,380
It might allow you to download files from
some remote server.

24
00:01:29,920 --> 00:01:32,713
Applications can include one or more
activities and there

25
00:01:32,713 --> 00:01:35,107
are various ways to figure out what
activities are

26
00:01:35,107 --> 00:01:37,444
available by looking at various tools you
have in

27
00:01:37,444 --> 00:01:41,009
the, the Android development environment
for Eclipse, for example.

28
00:01:42,030 --> 00:01:43,290
If you take a look at this URL, you

29
00:01:43,290 --> 00:01:45,980
can find out lots more information about,
about activities.

30
00:01:47,690 --> 00:01:50,590
Implementing an activity is fairly
straightforward.

31
00:01:50,590 --> 00:01:53,326
You inherit from the Activity class and
you

32
00:01:53,326 --> 00:01:57,640
override a number of so-called lifecycle
hook methods.

33
00:01:57,640 --> 00:02:02,120
And then we are going to include that
Activity with the appropriate metadata

34
00:02:02,120 --> 00:02:05,340
in something called the Android
manifest.xml file,

35
00:02:05,340 --> 00:02:07,720
which is basically a file that describes

36
00:02:07,720 --> 00:02:11,430
properties and metadata, inner information
resources about

37
00:02:11,430 --> 00:02:13,950
how your activity and other activities and

38
00:02:13,950 --> 00:02:16,330
other parts of Android like services and

39
00:02:16,330 --> 00:02:19,050
so on get packaged together and
downloaded.

40
00:02:20,800 --> 00:02:26,155
Android communicates the changes that are
taking place to the Activity via

41
00:02:26,155 --> 00:02:31,560
its hook methods and its lifecycle hook
methods as, as the states change.

42
00:02:32,910 --> 00:02:34,710
We'll take a lot about this in a second
and I'll

43
00:02:34,710 --> 00:02:37,185
walk you through the various states, but
before we do that, just

44
00:02:37,185 --> 00:02:39,210
a quick note as we go through this
discussion to keep in

45
00:02:39,210 --> 00:02:42,720
the mind the commonality and variability
of what we are talking about.

46
00:02:42,720 --> 00:02:46,880
The activity class provides a common
interface for interacting with users,

47
00:02:46,880 --> 00:02:51,930
including operations that are performed as
you move between lifecycle states.

48
00:02:51,930 --> 00:02:55,722
And of course the variabilities are
provided by enabling

49
00:02:55,722 --> 00:03:00,304
sub classes to override various methods,
especially the lifecycle

50
00:03:00,304 --> 00:03:03,464
methods to do the necessary things to
remedy and

51
00:03:03,464 --> 00:03:07,260
address what happens as the states change
in the system.

52
00:03:08,470 --> 00:03:11,400
Let's first talk a little bit about the
Activity lifestyle states.

53
00:03:11,400 --> 00:03:13,838
This discussion isn't really specific to
concurrent

54
00:03:13,838 --> 00:03:16,064
and network software, but it's very
relevant to

55
00:03:16,064 --> 00:03:18,396
frameworks cause it gives an illustration
of things

56
00:03:18,396 --> 00:03:21,279
like inversion of control and commonality
and variability.

57
00:03:22,420 --> 00:03:24,900
When Activity starts up, when it's
initially

58
00:03:24,900 --> 00:03:27,814
launched, there's a set of initialization
steps that

59
00:03:27,814 --> 00:03:29,736
take place as call backs to these hook

60
00:03:29,736 --> 00:03:34,470
methods, onCreate, onStart, onResume,
which we'll talk about.

61
00:03:34,470 --> 00:03:36,890
Once the activity is initialized and up

62
00:03:36,890 --> 00:03:39,858
and running, then various things can
happen.

63
00:03:39,858 --> 00:03:42,538
It can be visible and have the focus, so
the user

64
00:03:42,538 --> 00:03:47,840
can interact with it, touch buttons, enter
in information into text fields.

65
00:03:47,840 --> 00:03:49,360
You can also do various things that will

66
00:03:49,360 --> 00:03:53,140
cause the activity to be paused or
stopped.

67
00:03:53,140 --> 00:03:57,230
Things could be paused when the activity
doesn't have focus but still visible.

68
00:03:57,230 --> 00:04:00,580
For example, if a dialog or a toast pops
up.

69
00:04:00,580 --> 00:04:05,400
And when an activity is replaced by
another activity, it becomes stopped.

70
00:04:05,400 --> 00:04:08,173
And at some point along the way, an
activity will either

71
00:04:08,173 --> 00:04:12,126
decide to terminate itself voluntarily or
the Android runtime system they shut

72
00:04:12,126 --> 00:04:15,843
it down involuntarily because it's perhaps
running low on memory or it's

73
00:04:15,843 --> 00:04:19,970
decided the activity hasn't responded in a
while or may be hung.

74
00:04:19,970 --> 00:04:22,439
So in that case there's some other things
that take place.

75
00:04:23,590 --> 00:04:25,450
Take a look at this URL for more
information

76
00:04:25,450 --> 00:04:28,930
about how these different lifecycle states
occur in Android.

77
00:04:30,440 --> 00:04:34,656
So getting back to the concept of
frameworks, Android defines a whole set

78
00:04:34,656 --> 00:04:39,160
of lifecycle hook methods that you can
fill in in your activity subclasses.

79
00:04:39,160 --> 00:04:42,496
And we're just going to talk about them
very briefly here.

80
00:04:42,496 --> 00:04:44,089
The onCreate method is called to

81
00:04:44,089 --> 00:04:46,670
initialize an activity when it's first
created.

82
00:04:47,680 --> 00:04:51,790
The onStart method is called when an
activity is becoming visible to a user.

83
00:04:52,810 --> 00:04:56,635
The onResume method is called back when
the user returns to an

84
00:04:56,635 --> 00:05:01,230
activity from another activity that was
blocking it on the task stack.

85
00:05:02,580 --> 00:05:04,320
OnPause is called when a user leaves

86
00:05:04,320 --> 00:05:07,970
an activity that's still visible in the
background.

87
00:05:07,970 --> 00:05:12,150
OnStop is called when a user leaves an
activity for another, such

88
00:05:12,150 --> 00:05:17,449
as launching a picker to choose a
particular contact from your address book.

89
00:05:18,680 --> 00:05:20,715
And onDestroy is finally called when
things

90
00:05:20,715 --> 00:05:22,475
are going away and, and the system has

91
00:05:22,475 --> 00:05:27,030
decided to shut you down or the, the
activity has decided to shut itself down.

92
00:05:27,030 --> 00:05:30,750
There's more discussion about these
various callback hooks here.

93
00:05:30,750 --> 00:05:33,028
Here's a very simple, quick example to

94
00:05:33,028 --> 00:05:35,641
illustrate a useful helper class to keep
track

95
00:05:35,641 --> 00:05:38,053
of when and how these various callback
hook

96
00:05:38,053 --> 00:05:41,940
methods are invoked by the Android runtime
environment.

97
00:05:41,940 --> 00:05:43,565
What you do here is you define a

98
00:05:43,565 --> 00:05:48,730
class called LifecycleLoggingActivity,
that inherits from the Activity class.

99
00:05:48,730 --> 00:05:53,122
And then you can override the various
lifecycle hook methods to print out

100
00:05:53,122 --> 00:05:57,330
to the logger that they are being called
at different points in time.

101
00:05:57,330 --> 00:06:00,190
And if you built an Android application
using this by

102
00:06:00,190 --> 00:06:03,245
inheriting from LifecycleLoggingActivity
instead of

103
00:06:03,245 --> 00:06:05,065
the normal Activity, you can see

104
00:06:05,065 --> 00:06:09,160
very easily by looking in your developed
environments log capability

105
00:06:09,160 --> 00:06:11,110
when the different transitions are

106
00:06:11,110 --> 00:06:14,179
occurring between the different lifecycle
states.

107
00:06:15,530 --> 00:06:20,730
Note also the use of inversion of control
in the Activity framework.

108
00:06:20,730 --> 00:06:22,868
You're not calling these methods directly.

109
00:06:22,868 --> 00:06:27,090
They're being dispatched on your behalf by
the android run sys, runtime system.

110
00:06:27,090 --> 00:06:29,793
In particular, this is using something
called the Activity

111
00:06:29,793 --> 00:06:32,100
Manager Service behind the scenes to do
this work.

112
00:06:33,870 --> 00:06:36,780
Let's now talk a bit about the, the
Android Service.

113
00:06:36,780 --> 00:06:42,620
This is a bit more relevant to the context
of network and concurrent apps.

114
00:06:42,620 --> 00:06:45,896
A Service is an app component that runs in
the background and it

115
00:06:45,896 --> 00:06:48,731
performs long-running operations, and it
does not

116
00:06:48,731 --> 00:06:51,960
provide direct access to the user
interface.

117
00:06:51,960 --> 00:06:55,200
So you would typically use a Service for
certain long-running things.

118
00:06:55,200 --> 00:06:58,040
You might handle network transactions in a
Service.

119
00:06:58,040 --> 00:06:59,780
You might play music.

120
00:06:59,780 --> 00:07:02,530
You might interact with a content provider
that

121
00:07:02,530 --> 00:07:06,280
stores data persistently in a SQL Lite
database.

122
00:07:06,280 --> 00:07:09,059
You might run various periodic tasks and
so on in a Service.

123
00:07:10,650 --> 00:07:14,490
As you've seen there's a running example
we've used throughout the class

124
00:07:14,490 --> 00:07:17,970
of an application I've developed for some
of my courses where we, we

125
00:07:17,970 --> 00:07:21,510
download application, we download images
and use a service to help to

126
00:07:21,510 --> 00:07:23,850
decouple that downloading from that
activity

127
00:07:23,850 --> 00:07:26,740
where the user interface interactions take
place.

128
00:07:27,910 --> 00:07:30,780
An application component can start a
service.

129
00:07:30,780 --> 00:07:33,820
For example, an activity can start a
service, and that service will continue

130
00:07:33,820 --> 00:07:38,210
to run even if the user switches to
another application or another activity.

131
00:07:39,570 --> 00:07:43,280
Components can also bind to services and
interact with them

132
00:07:43,280 --> 00:07:47,890
to perform various kinds of local or
remote interprocess communications.

133
00:07:47,890 --> 00:07:51,020
And you can see this URL for lots more
information about services.

134
00:07:51,020 --> 00:07:53,710
So how do you implement a Service?

135
00:07:53,710 --> 00:07:58,230
Well, implementing a Service in Android is
very similar to implementing an Activity.

136
00:07:58,230 --> 00:08:02,620
You inherit from Service and you override
a number of hook methods.

137
00:08:02,620 --> 00:08:03,700
Depending on the kind of service

138
00:08:03,700 --> 00:08:06,440
that you're defining, you'll override
different methods.

139
00:08:06,440 --> 00:08:10,393
And then you would go ahead and add this
Service implementation to your

140
00:08:10,393 --> 00:08:14,720
Android manifest file so it's known to the
system and to Package Manager.

141
00:08:16,210 --> 00:08:20,498
Android communicates state changes to a
Service by invoking the lifecycle hook

142
00:08:20,498 --> 00:08:24,690
methods as call back, so we'll talk more
about that in a second.

143
00:08:24,690 --> 00:08:28,950
Before we do that, a quick recap of
commonality and variability.

144
00:08:28,950 --> 00:08:33,702
The Service class component provides a
common interface for performing these

145
00:08:33,702 --> 00:08:39,520
long-running operations that don't need to
directly interact with the user.

146
00:08:39,520 --> 00:08:42,370
Subclasses can then inherit from the
Service

147
00:08:42,370 --> 00:08:44,695
class and fill in what needs to happen

148
00:08:44,695 --> 00:08:48,295
for different kinds of services to
initialize different

149
00:08:48,295 --> 00:08:52,200
services, started services, bound
services, and so on.

150
00:08:52,200 --> 00:08:54,640
And we'll take a quick look at that on the
next couple slides.

151
00:08:55,880 --> 00:08:59,990
Here's a quick overview of the Service
lifecycle hook methods.

152
00:08:59,990 --> 00:09:04,412
There's a method called onCreate, much
like there is with an activity, which

153
00:09:04,412 --> 00:09:08,800
is called when a Service process is
created by whatever means it's created.

154
00:09:08,800 --> 00:09:12,070
There's a couple of different ways you can
create a service.

155
00:09:12,070 --> 00:09:17,162
One is using the command processor pattern
by invoking the startService method

156
00:09:17,162 --> 00:09:22,690
which calls, causes the onStart hook
method to get called back in the service.

157
00:09:22,690 --> 00:09:25,954
This is typically used when you launch
services and want to be able to have them

158
00:09:25,954 --> 00:09:29,390
do something on your behalf, but not keep
them around for a long period of time.

159
00:09:30,500 --> 00:09:33,786
There's also another approach for
so-called bound Services, and this

160
00:09:33,786 --> 00:09:38,000
implements more of the broker-like pattern
that we've talked about before.

161
00:09:38,000 --> 00:09:42,225
In this particular way of doing things,
you call bindService, which starts

162
00:09:42,225 --> 00:09:46,200
the service up, and then you can go ahead
and interact with it.

163
00:09:46,200 --> 00:09:49,920
When you do this, the onBind call is
automatically invoked, which can

164
00:09:49,920 --> 00:09:53,510
be used to pass back a binder object, back
to the client.

165
00:09:53,510 --> 00:09:55,070
And when things get shut down at some

166
00:09:55,070 --> 00:09:58,710
point unbound will be automatically by the
Android runtime.

167
00:09:58,710 --> 00:10:02,610
And then as with Activity there's
onDestroy hook method that's also called

168
00:10:02,610 --> 00:10:06,510
back when a Service is going to away
either voluntarily or involuntarily.

169
00:10:07,890 --> 00:10:13,540
Note that services don't automatically run
in separate processes or threads.

170
00:10:13,540 --> 00:10:15,052
If you want it to run in a separate

171
00:10:15,052 --> 00:10:17,236
process, you can do some steps in the
manifest

172
00:10:17,236 --> 00:10:18,972
file that we'll look at in a second to

173
00:10:18,972 --> 00:10:22,020
designate that a Service runs in a
separate process.

174
00:10:22,020 --> 00:10:24,477
If you want it to run in a separate
thread, then

175
00:10:24,477 --> 00:10:28,509
you'll have to use some of the concurrency
mechanisms available in Android

176
00:10:28,509 --> 00:10:32,037
or use something called the intense
service, which uses a command

177
00:10:32,037 --> 00:10:36,350
processor-like model to run the requests
that come in in separate threads.

178
00:10:37,620 --> 00:10:42,340
Here's a very quick example illustrating a
ThreadedDownloadService example.

179
00:10:42,340 --> 00:10:43,870
We could have a situation where we

180
00:10:43,870 --> 00:10:47,890
inherit from Service and create a
ThreadedDownloadService.

181
00:10:47,890 --> 00:10:51,294
And then its onStart command method could
take a look at

182
00:10:51,294 --> 00:10:55,290
the parameters that are passed along with
the intent as extras,

183
00:10:55,290 --> 00:10:58,916
and then use them to download the
designated content from a

184
00:10:58,916 --> 00:11:04,029
remote server, using whatever is the
indicated or desired concurrency model.

185
00:11:05,270 --> 00:11:09,995
This illustration here at the very bottom
of the slide shows how you can make

186
00:11:09,995 --> 00:11:12,095
a service run in its own process by

187
00:11:12,095 --> 00:11:15,740
changing the declaration in the Android
manifest file.

188
00:11:17,300 --> 00:11:20,270
Note again, the inversion of control
that's taking place here.

189
00:11:20,270 --> 00:11:22,850
You don't call onStartCommand.

190
00:11:22,850 --> 00:11:26,450
You don't call onBind or onUnbind and so
on.

191
00:11:26,450 --> 00:11:31,371
Those calls are made on your behalf by the
Android runtime.

192
00:11:31,371 --> 00:11:32,843
So to wrap up this part of the

193
00:11:32,843 --> 00:11:36,299
module, the Android framework components
like activities and

194
00:11:36,299 --> 00:11:39,563
services, supporting version of controls,
that's one of

195
00:11:39,563 --> 00:11:43,600
the key characteristics, key defining
characteristics of a framework.

196
00:11:43,600 --> 00:11:47,647
And they also embodied many commonalities
and variabilities of mobile application

197
00:11:47,647 --> 00:11:51,110
development, which is one of the things
that makes them so powerful.

198
00:11:52,460 --> 00:11:56,010
There are many, many patterns used in
Android.

199
00:11:56,010 --> 00:11:58,600
In earlier parts of this section we've
discussed a

200
00:11:58,600 --> 00:12:02,370
number of patterns that occur in the
Android infrastructure.

201
00:12:02,370 --> 00:12:05,420
Things like the broker pattern, or the
proxy pattern, or

202
00:12:05,420 --> 00:12:09,430
the command processor pattern, or the
observer pattern, and so on.

203
00:12:09,430 --> 00:12:12,190
There are lots of other patterns that are
being used there as well.

204
00:12:12,190 --> 00:12:13,640
It's also interesting to note that there
are many

205
00:12:13,640 --> 00:12:17,680
patterns for interacting with users at the
application level.

206
00:12:17,680 --> 00:12:20,310
There's a book on android design patterns

207
00:12:20,310 --> 00:12:22,990
for user interfaces, there's websites, and
so on.

208
00:12:22,990 --> 00:12:24,724
So if you're interested in patterns for

209
00:12:24,724 --> 00:12:26,713
Android, there are many different places
you

210
00:12:26,713 --> 00:12:27,937
can go to learn more about how

211
00:12:27,937 --> 00:12:30,440
to apply these techniques to your systems
effectively.

