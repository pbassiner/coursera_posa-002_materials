1
00:00:00,000 --> 00:00:09,092
[MUSIC].

2
00:00:09,092 --> 00:00:11,572
Welcome to the next part of the module on
Android

3
00:00:11,572 --> 00:00:15,810
Concurrency Frameworks, which wraps up our
discussion of the handler class.

4
00:00:17,330 --> 00:00:20,750
This part explains how the handler class
enables the sending and handling

5
00:00:20,750 --> 00:00:24,730
of message objects via the message queue
associated with the thread's looper.

6
00:00:25,780 --> 00:00:27,650
It also shows how Handlers are applied

7
00:00:27,650 --> 00:00:31,010
in Android applications and its Hammer
concurrency framework.

8
00:00:32,600 --> 00:00:36,370
The Handler class defines methods that
enable programs to send a message to,

9
00:00:36,370 --> 00:00:40,970
or remove a sent message from, the message
queue associated with the Handler.

10
00:00:40,970 --> 00:00:41,850
As shown at this link.

11
00:00:43,140 --> 00:00:45,570
Unlike posting Runnables, which are
self-contained

12
00:00:45,570 --> 00:00:48,370
commands, each message contains a bundle
of

13
00:00:48,370 --> 00:00:51,609
data that can be sent to a Handler, as
described at this link.

14
00:00:53,380 --> 00:00:55,756
This data contains a user defined code
that

15
00:00:55,756 --> 00:00:58,396
recipients can use to identify what the
message

16
00:00:58,396 --> 00:01:00,838
is about, as well as several integer
fields

17
00:01:00,838 --> 00:01:03,450
and an arbitrary object sent to the
Handler.

18
00:01:05,140 --> 00:01:09,166
This data with subsequently be processed
by the Handlers Handle message

19
00:01:09,166 --> 00:01:13,700
hook method, which developers must
override by extending the Handler class.

20
00:01:15,690 --> 00:01:19,158
The Handler and its thread specific looper
collaborate to DQ

21
00:01:19,158 --> 00:01:22,830
each set message and dispatch its Handler
message hook method in

22
00:01:22,830 --> 00:01:26,094
the context of the thread associated with
the handle, in

23
00:01:26,094 --> 00:01:30,632
accordance with the message passing
variant of the Active Object pattern.

24
00:01:30,632 --> 00:01:33,377
Which defines service requests and
components as the

25
00:01:33,377 --> 00:01:36,122
units of concurrency and around service
requests on a

26
00:01:36,122 --> 00:01:38,928
component in a different thread from the
client thread

27
00:01:38,928 --> 00:01:41,815
that requests the service, as described at
this link.

28
00:01:41,815 --> 00:01:46,521
[MUSIC].

29
00:01:46,521 --> 00:01:48,537
There are three main categories of Handler

30
00:01:48,537 --> 00:01:51,990
methods relating to sending and handling
messages.

31
00:01:51,990 --> 00:01:54,920
For example, there are several variants of
the send message

32
00:01:54,920 --> 00:01:58,130
method itself, some of which are
highlighted on this slide.

33
00:01:59,170 --> 00:02:02,761
As with post, some send message methods
add a message to the front or rear of

34
00:02:02,761 --> 00:02:06,840
the message queue, where they're processed
as soon as the queue is ready to do so.

35
00:02:08,260 --> 00:02:12,612
Alternatively, a delay can be specified
using relative time, which indicates

36
00:02:12,612 --> 00:02:15,990
how much time must elapse before the
message can be handled.

37
00:02:17,190 --> 00:02:21,130
Finally, a delay can be specified using
absolute time.

38
00:02:21,130 --> 00:02:23,430
Which indicates when the message should be
handled.

39
00:02:24,670 --> 00:02:26,500
The latter two methods allow programs to

40
00:02:26,500 --> 00:02:29,750
implement time-outs, ticks, and other
timing related behavior.

41
00:02:31,440 --> 00:02:35,430
There are also several methods that insert
so-called empty messages, which only

42
00:02:35,430 --> 00:02:39,540
contain the what value into the message
queue for immediate or deferred handling.

43
00:02:41,550 --> 00:02:44,539
Several variants of the remove method use
the what value to

44
00:02:44,539 --> 00:02:48,850
leave any messages that still reside on
the Handler's underlying message queue.

45
00:02:51,450 --> 00:02:53,633
A second category of Handler methods
create

46
00:02:53,633 --> 00:02:55,759
methods that are passed to send message.

47
00:02:57,340 --> 00:02:59,910
These obtained message methods are
factories

48
00:02:59,910 --> 00:03:01,630
that allocate a message from the global

49
00:03:01,630 --> 00:03:07,170
message pool setting various fields of the
message as designated by their parameters.

50
00:03:07,170 --> 00:03:10,490
In accordance with creational patterns
described at this link.

51
00:03:12,190 --> 00:03:14,590
There are many obtain message methods.

52
00:03:14,590 --> 00:03:16,149
Some of which are highlighted on this
slide.

53
00:03:17,830 --> 00:03:20,510
The third and final category of Handler
methods

54
00:03:20,510 --> 00:03:23,190
are used to dispatch and handle messages
via the

55
00:03:23,190 --> 00:03:25,937
handle hook message which must be
overwritten to

56
00:03:25,937 --> 00:03:29,430
receive and process messages, and queued
via send message.

57
00:03:30,820 --> 00:03:32,465
Handler message runs in the context of the

58
00:03:32,465 --> 00:03:35,710
thread specific looper associated with the
Handler instance.

59
00:03:35,710 --> 00:03:37,940
In accordance with the message passing
variant of

60
00:03:37,940 --> 00:03:41,360
the active object pattern, as discussed in
upcoming videos.

61
00:03:41,360 --> 00:03:42,903
[BLANK_AUDIO]

62
00:03:42,903 --> 00:03:47,712
[MUSIC].

63
00:03:47,712 --> 00:03:51,070
Posting a runnable to a Handler is
straightforward.

64
00:03:51,070 --> 00:03:54,750
Since the runnable defines a self
contained command,

65
00:03:54,750 --> 00:03:58,093
whose logic is localized in its run hook
method.

66
00:03:58,093 --> 00:04:02,120
Sending a message to a Handler is a better
more complicated, however.

67
00:04:02,120 --> 00:04:04,744
Since the Handler must be extended and its
handle

68
00:04:04,744 --> 00:04:08,530
message hook method overridden, to process
messages it receives.

69
00:04:10,400 --> 00:04:12,450
This examples shows how to use a Handler

70
00:04:12,450 --> 00:04:15,700
to send and process messages in several
threads.

71
00:04:15,700 --> 00:04:17,644
For example, it shows how to send a
message

72
00:04:17,644 --> 00:04:21,030
from a background thread to the user
interface thread.

73
00:04:21,030 --> 00:04:23,449
Likewise, it shows how to send message at
period

74
00:04:23,449 --> 00:04:27,190
time intervals from the user interface
thread to itself.

75
00:04:27,190 --> 00:04:29,918
It also outlines how the Android handler,
looper,

76
00:04:29,918 --> 00:04:33,018
and message queue classes collaborate to
use and implement

77
00:04:33,018 --> 00:04:36,118
a different path through the hammer
framework than covered

78
00:04:36,118 --> 00:04:38,970
by the previous post example in the
earlier video.

79
00:04:40,240 --> 00:04:43,470
This example is based on the Android
countdown timer class

80
00:04:43,470 --> 00:04:47,090
which schedules a countdown until a
specified time in the future.

81
00:04:47,090 --> 00:04:48,440
As described at this link.

82
00:04:49,910 --> 00:04:54,135
A CountDown Timer is onTick hook method is
dispatched at regular intervals by

83
00:04:54,135 --> 00:04:56,475
internal calls to the send message delayed

84
00:04:56,475 --> 00:04:59,260
method until its CountDown time period
elapses.

85
00:05:00,600 --> 00:05:03,192
For example, a code in this slide creates
a 30,000

86
00:05:03,192 --> 00:05:07,500
millisecond or 30 second CountDown Timer
in the user interface thread.

87
00:05:07,500 --> 00:05:11,028
It's onTick hook method is dispatched via
an internal callback to

88
00:05:11,028 --> 00:05:15,900
the handle message hook method every 1,000
milliseconds or one second.

89
00:05:15,900 --> 00:05:19,480
At which point, the number of seconds
remaining is written into a text field.

90
00:05:20,770 --> 00:05:24,361
When the 30 second time period elapses,
the onFinish hook method

91
00:05:24,361 --> 00:05:29,080
is dispatched via an internal callback to
the handle message hook method.

92
00:05:29,080 --> 00:05:31,560
At which point done is written into the
text field.

93
00:05:33,360 --> 00:05:36,350
In this example a background thread called
start on the countdown

94
00:05:36,350 --> 00:05:40,250
timer, which sends the message which
triggers the processing described above.

95
00:05:40,250 --> 00:05:46,750
[MUSIC].

96
00:05:46,750 --> 00:05:50,512
CountDownTimer is an abstract class whose
onTick and onFinish hook

97
00:05:50,512 --> 00:05:53,740
methods must be overridden, as shown at
this path name.

98
00:05:55,350 --> 00:05:58,550
This analysis is also fairly detailed, so
you might want to

99
00:05:58,550 --> 00:06:03,080
download the Android source code available
at this link and follow along.

100
00:06:04,290 --> 00:06:06,828
CountDownTimer's constructor stores the
future time

101
00:06:06,828 --> 00:06:08,990
and countdown intervals in its data
members.

102
00:06:10,000 --> 00:06:12,021
CountDownTimer also contains an internal
handler

103
00:06:12,021 --> 00:06:13,980
that's associated with the thread's
looper.

104
00:06:15,930 --> 00:06:18,424
This handler must override the handle
message hook

105
00:06:18,424 --> 00:06:21,169
method to process messages, passed to send
message.

106
00:06:22,470 --> 00:06:27,085
When a count down timer receives a message
via handle message, it invokes a call back

107
00:06:27,085 --> 00:06:29,360
to the over ridden onTick or onFinish hook

108
00:06:29,360 --> 00:06:31,780
methods in the thread where it was
created.

109
00:06:34,110 --> 00:06:36,062
Its start method obtains and sends the

110
00:06:36,062 --> 00:06:39,800
message to it's internal handler, via send
message.

111
00:06:39,800 --> 00:06:42,446
SendMessage inserts the message into the
message

112
00:06:42,446 --> 00:06:44,840
queue of the handler's looper, where it's

113
00:06:44,840 --> 00:06:48,520
processed as soon as the queue is ready,
as shown at this path name.

114
00:06:50,280 --> 00:06:52,840
The path through the handler, message
queue,

115
00:06:52,840 --> 00:06:54,952
and looper code is essentially the same

116
00:06:54,952 --> 00:06:59,560
as the path for posting and processing
runnables, as shown in the previous video.

117
00:07:00,870 --> 00:07:02,456
The main difference is that the

118
00:07:02,456 --> 00:07:05,628
handler's dispatch message method invokes
the overwritten

119
00:07:05,628 --> 00:07:07,885
handle message hook method, instead of the

120
00:07:07,885 --> 00:07:10,470
run hook method of the encapsulated
runnable.

121
00:07:12,580 --> 00:07:15,829
Handler message runs in the context of the
thread associated with the handler.

122
00:07:17,020 --> 00:07:19,945
When the countdown timer's handleMessage
method is

123
00:07:19,945 --> 00:07:21,765
dispatched it checks to see if the

124
00:07:21,765 --> 00:07:26,410
entire time period has elapsed, in which
case it invokes the onFinish hook method.

125
00:07:27,510 --> 00:07:30,876
If the call back occurred too soon, the
send message delayed

126
00:07:30,876 --> 00:07:34,520
method is invoked to schedule another call
back at a later time.

127
00:07:36,120 --> 00:07:39,720
If the time interval has elapsed, the
onTick hook method is

128
00:07:39,720 --> 00:07:44,260
invoked and the next time interval is
scheduled by a sendMessageDelayed.

129
00:07:46,260 --> 00:07:50,530
CountDownTimer's hook methods all run
inside a synchronized statement to ensure

130
00:07:50,530 --> 00:07:54,460
that calls to onTick never occur before
the previous callback is complete.

131
00:07:56,020 --> 00:08:01,179
CountDownTimer is used in Android's
middleware and applications for various

132
00:08:01,179 --> 00:08:05,377
purposes, such as lock screens, as shown
at these path names.

133
00:08:05,377 --> 00:08:10,681
[MUSIC].

134
00:08:10,681 --> 00:08:14,330
In summary, the sendMessage methods and
the Handler class.

135
00:08:14,330 --> 00:08:17,100
Key portion of the Android HaMmeR
framework.

136
00:08:18,140 --> 00:08:22,763
In particular, they provide the means to
end queue and later handle messages sent

137
00:08:22,763 --> 00:08:27,000
from within a single thread to itself or
passed from one thread to another.

138
00:08:28,610 --> 00:08:30,670
They're often used to send messages from
one

139
00:08:30,670 --> 00:08:33,110
or more background threads to the user
interface thread.

140
00:08:34,390 --> 00:08:37,022
The collaboration between the handler's
send message

141
00:08:37,022 --> 00:08:39,486
methods and the handler's message queue
and looper

142
00:08:39,486 --> 00:08:42,006
classes implement the message passing
variant of the

143
00:08:42,006 --> 00:08:44,920
active object pattern, as described in
upcoming videos.

144
00:08:46,120 --> 00:08:48,892
Unlike the handler's use of runnable
commands,

145
00:08:48,892 --> 00:08:51,796
which centralizes the processing logic at
the point

146
00:08:51,796 --> 00:08:54,172
where the post method is invoked, the send

147
00:08:54,172 --> 00:08:57,890
message methods decouple client senders
from handle receivers.

148
00:08:59,470 --> 00:09:02,550
Developers must therefore extend the
handle message hook method

149
00:09:02,550 --> 00:09:05,490
and write explicit logic to handle the
messages it receives.

150
00:09:06,930 --> 00:09:09,390
While there's an extra step involved in
writing

151
00:09:09,390 --> 00:09:12,510
these handle message hook methods, this
decoupled approach

152
00:09:12,510 --> 00:09:15,030
can be more flexible and parameterizable
than the

153
00:09:15,030 --> 00:09:18,519
centralized model provided by Post's use
of runnable commands.

154
00:09:20,670 --> 00:09:25,829
To showcase the message passing features
of handler, we analyzed an example of

155
00:09:25,829 --> 00:09:31,142
the Android CountDownTimer class, which
internally sends messages to a handler

156
00:09:31,142 --> 00:09:36,147
that collaborates with the looper and
message queue to schedule and dispatch

157
00:09:36,147 --> 00:09:41,407
callbacks to the onTick and onFinish hook
methods in the user interface thread.

158
00:09:41,407 --> 00:09:49,289
[MUSIC]

