1
00:00:00,000 --> 00:00:08,019
[MUSIC]

2
00:00:08,019 --> 00:00:12,470
Welcome to the next part of the module on
Android services and security.

3
00:00:12,470 --> 00:00:16,070
Which begins our analysis of how to
program a started service.

4
00:00:16,070 --> 00:00:18,426
In this part, we'll analyze key elements
of

5
00:00:18,426 --> 00:00:20,782
the design of a Download Application and
show

6
00:00:20,782 --> 00:00:23,386
by example how a Started Service can
concurrently

7
00:00:23,386 --> 00:00:26,120
retrieve and display an image from a
remote server.

8
00:00:27,360 --> 00:00:30,090
Before delving into the details of the
solution however.

9
00:00:30,090 --> 00:00:32,190
We'll first outline the overall structure

10
00:00:32,190 --> 00:00:34,160
and functionality of the download
application.

11
00:00:35,490 --> 00:00:38,350
This application contains a download
activity.

12
00:00:38,350 --> 00:00:40,140
When a user presses the Download Image

13
00:00:40,140 --> 00:00:43,120
button, this activity launches a download
service

14
00:00:43,120 --> 00:00:48,049
on demand by creating an intent command
and passing to the start service method.

15
00:00:49,300 --> 00:00:51,970
After the download service is launched by
Android.

16
00:00:51,970 --> 00:00:55,387
It uses a URL passed with the intent, to
concurrently retrieve

17
00:00:55,387 --> 00:00:57,840
the image and store it in a file on the
device.

18
00:00:58,840 --> 00:01:00,769
If all goes well, the download service

19
00:01:00,769 --> 00:01:02,932
returns the path name of the file
containing

20
00:01:02,932 --> 00:01:07,210
the image, back to the download activity,
which then displays the image to the user.

21
00:01:08,260 --> 00:01:10,960
We'll just cover steps one and two in this
video.

22
00:01:10,960 --> 00:01:13,603
Later videos, show how to return the path
name from the

23
00:01:13,603 --> 00:01:15,097
service back to the activity,

24
00:01:15,097 --> 00:01:18,320
using various Android interprocess
communication mechanisms.

25
00:01:19,510 --> 00:01:23,050
The source code for the download
application is available at this link.

26
00:01:23,050 --> 00:01:25,756
So download it, and watch this video and
the next

27
00:01:25,756 --> 00:01:29,389
one carefully, perhaps multiple times, to
learn how it works.

28
00:01:30,470 --> 00:01:33,024
This is the most complicated example
covered thus

29
00:01:33,024 --> 00:01:34,967
far in this MOOC, since there are four

30
00:01:34,967 --> 00:01:37,581
main components involved in the solution,
as well

31
00:01:37,581 --> 00:01:42,180
as various Android service, concurrency,
and communication mechanisms.

32
00:01:42,180 --> 00:01:43,650
So we'll progressively analyze the

33
00:01:43,650 --> 00:01:46,410
design and implementation from various
perspectives.

34
00:01:46,410 --> 00:01:50,625
To show how all the pieces fit together.

35
00:01:50,625 --> 00:01:55,602
[MUSIC]

36
00:01:55,602 --> 00:02:00,020
We'll now summarize the steps involved in
Programming Started Services.

37
00:02:00,020 --> 00:02:04,920
Using our download application, as a
running example to re-efy each step.

38
00:02:04,920 --> 00:02:08,960
In general, a client, typically an
activity launches a started

39
00:02:08,960 --> 00:02:12,950
service by calling the start service
method as discussed here.

40
00:02:12,950 --> 00:02:16,790
For example, the download activity uses a
factory method, to create an intent

41
00:02:16,790 --> 00:02:19,257
command that identifies the service start,
which

42
00:02:19,257 --> 00:02:21,590
in this case is the download service.

43
00:02:21,590 --> 00:02:24,692
And supplies the URL parameter via intent
data, that tells

44
00:02:24,692 --> 00:02:27,680
the service what image to retrieve from a
remote server.

45
00:02:28,740 --> 00:02:32,746
The start service method, requests Android
activity manager service to start

46
00:02:32,746 --> 00:02:34,898
the service asynchronously, so this call

47
00:02:34,898 --> 00:02:37,930
doesn't block the clients service
synchronously.

48
00:02:37,930 --> 00:02:39,340
While the DownloadService runs.

49
00:02:40,410 --> 00:02:44,798
In response to the startService call,
Android's activity service will launch the

50
00:02:44,798 --> 00:02:49,200
service if it's not already running, using
the activity pattern described here.

51
00:02:50,710 --> 00:02:53,150
The activity manager service then invokes
a service's

52
00:02:53,150 --> 00:02:57,630
onCreate and onStartCommand hook methods
to initialize the service.

53
00:02:57,630 --> 00:03:00,380
In inherits these methods from the Service
superclass.

54
00:03:01,480 --> 00:03:03,940
The DownloadServices onCreate hook method.

55
00:03:03,940 --> 00:03:07,200
Starts a handler thread, which is used in
conjunction

56
00:03:07,200 --> 00:03:10,120
with a service handler object to download
the requested

57
00:03:10,120 --> 00:03:13,060
image in the background, store it in a
file,

58
00:03:13,060 --> 00:03:14,990
and return the path name of the file to
the

59
00:03:18,300 --> 00:03:18,800
client.

60
00:03:22,860 --> 00:03:26,589
The onStartCommand hook method is called
each time a started service

61
00:03:26,589 --> 00:03:29,750
is sent an intent, via a call to the
startService method.

62
00:03:30,850 --> 00:03:34,410
The DownloadService implements
onStartCommand to send the intent

63
00:03:34,410 --> 00:03:36,840
to the background handler thread for
concurrent processing.

64
00:03:37,900 --> 00:03:41,580
OnStartCommand returns a value to the
android service framework.

65
00:03:41,580 --> 00:03:43,453
But this value is not propagated back to

66
00:03:43,453 --> 00:03:47,510
the client, that invoked the start service
method originally.

67
00:03:47,510 --> 00:03:50,867
Instead, this return value tells Android
what it should do with

68
00:03:50,867 --> 00:03:54,610
the service, if it's process is killed
while the service is running.

69
00:03:55,940 --> 00:03:59,180
The valid return values are START_STICKY,
which

70
00:03:59,180 --> 00:04:01,900
tells Android not to re-deliver the
intent.

71
00:04:01,900 --> 00:04:04,315
To onStartCommand, when the service is
restarted.

72
00:04:04,315 --> 00:04:09,361
Likewise, the Start_Not_Sticky return
value, tells android the service

73
00:04:09,361 --> 00:04:14,490
should remain stopped, unless it's
explicitly started by some client code.

74
00:04:15,700 --> 00:04:21,850
And finally, the start re-deliver intent
value tells Android to restart the service

75
00:04:21,850 --> 00:04:26,740
via on start command supplying the same
intent as was delivered to it this time.

76
00:04:28,180 --> 00:04:30,900
More information on these return values is
documented here.

77
00:04:32,300 --> 00:04:35,655
A started service typically performs a
single operation, and doesn't

78
00:04:35,655 --> 00:04:38,140
need to return or reply to the client that
started it.

79
00:04:39,640 --> 00:04:43,307
And our download application example, the
download service defines a

80
00:04:43,307 --> 00:04:47,230
download image reply method, that runs in
the background handler thread.

81
00:04:48,390 --> 00:04:51,280
This method extracts the URL from the
intent.

82
00:04:51,280 --> 00:04:53,851
Uses it to retrieve the image from a
remote

83
00:04:53,851 --> 00:04:56,936
server, stores the image in a file on the
device,

84
00:04:56,936 --> 00:04:59,506
and then returns the path name to the
image

85
00:04:59,506 --> 00:05:04,220
to the download activity client, which
subsequently displays the image.

86
00:05:05,660 --> 00:05:09,370
When a operation is done, the service can
be stopped.

87
00:05:09,370 --> 00:05:12,734
For example, the download service called
Stop Self to shut

88
00:05:12,734 --> 00:05:16,310
itself down when its done retrieving and
processing an image.

89
00:05:17,780 --> 00:05:21,110
A service that stops itself, must be
careful that there aren't

90
00:05:21,110 --> 00:05:24,030
current operations processing other
intents, as

91
00:05:24,030 --> 00:05:25,420
we'll discuss later in this video.

92
00:05:26,990 --> 00:05:30,280
A service can also be shut down by another
component.

93
00:05:30,280 --> 00:05:33,723
For example, the Download Activity could
call the

94
00:05:33,723 --> 00:05:38,695
stop service method, to unilaterally
terminate the Download Service.

95
00:05:38,695 --> 00:05:43,753
[MUSIC]

96
00:05:43,753 --> 00:05:46,418
Now that we've summarized the steps
involved in

97
00:05:46,418 --> 00:05:49,733
programming started services in general,
and the Download

98
00:05:49,733 --> 00:05:52,658
Service in particular, we'll examine the
design of

99
00:05:52,658 --> 00:05:56,810
the Download Application, which contains a
Download Activity.

100
00:05:56,810 --> 00:05:57,930
And the download service.

101
00:05:59,100 --> 00:06:02,655
As outlined earlier, when the user presses
download image

102
00:06:02,655 --> 00:06:06,282
button on the screen, the download
activity sends an Intent

103
00:06:06,282 --> 00:06:09,552
to the URL to retrieve via call to
startService, which

104
00:06:09,552 --> 00:06:13,840
launches the download service on demand
using the activator pattern.

105
00:06:15,320 --> 00:06:18,480
The download service performs four main
actions.

106
00:06:18,480 --> 00:06:20,480
First, it's on crate hook method.

107
00:06:20,480 --> 00:06:24,980
Crate's the service handler, which extends
the android handler class.

108
00:06:24,980 --> 00:06:27,969
The service handler is associated with a
single handler thread,

109
00:06:27,969 --> 00:06:31,080
that runs in the background with it's own
threat specific looper.

110
00:06:31,080 --> 00:06:34,910
And it can be used to send and handle
messages,

111
00:06:34,910 --> 00:06:37,910
as discussed in the earlier video on the
hammer framework.

112
00:06:39,170 --> 00:06:40,120
Second.

113
00:06:40,120 --> 00:06:43,041
The download service itself, receives an
intent from the

114
00:06:43,041 --> 00:06:46,797
download activity, via onStartCommand and
calls the service handler's

115
00:06:46,797 --> 00:06:49,479
send it service message method, to insert
the intent

116
00:06:49,479 --> 00:06:53,070
into the handler's thread message queue
for subsequent processing.

117
00:06:54,330 --> 00:06:56,650
Third, the looper in the background
handler

118
00:06:56,650 --> 00:07:00,580
thread dispatches the handler's handle
message hook method.

119
00:07:00,580 --> 00:07:03,450
Which downloads the image designated by
the URL

120
00:07:03,450 --> 00:07:05,750
in the intent and stores it in a file.

121
00:07:07,100 --> 00:07:10,408
An upcoming video, will show how the
android messenger inner process

122
00:07:10,408 --> 00:07:13,880
communication mechanism is used to pass
the path name of the file.

123
00:07:13,880 --> 00:07:16,560
Back from the download service, to the
download activity.

124
00:07:17,900 --> 00:07:21,960
Finally, the download service stops itself
when there are no more intents to handle.

125
00:07:23,280 --> 00:07:26,261
This design is guided by the Command
Processor pattern,

126
00:07:26,261 --> 00:07:30,049
which packages a piece of application
functionality and parameterises

127
00:07:30,049 --> 00:07:31,973
it in an object so it could be executed

128
00:07:31,973 --> 00:07:34,719
in a different thread or process as
described here.

129
00:07:36,010 --> 00:07:38,955
The download service supplies this
pattern, to offload tasks

130
00:07:38,955 --> 00:07:42,640
from applications main thread to a single
background thread.

131
00:07:42,640 --> 00:07:48,319
Which works well if the service needn't
handle multiple requests concurrently.

132
00:07:48,319 --> 00:07:53,295
[MUSIC]

133
00:07:53,295 --> 00:07:56,080
In summary, this part of the module
progressively

134
00:07:56,080 --> 00:08:00,430
analyzed the structure and functionality
of a download application.

135
00:08:00,430 --> 00:08:03,640
To show by example, how to program a
started service.

136
00:08:03,640 --> 00:08:07,000
It concurrently retrieves and displays an
image, from a remote server.

137
00:08:08,360 --> 00:08:13,330
A started service is launched on demand by
another Android component, typically

138
00:08:13,330 --> 00:08:16,480
an activity and it's lifecycle's
independent

139
00:08:16,480 --> 00:08:17,810
of the component that launched it.

140
00:08:18,930 --> 00:08:22,320
A start up service can therefore run in
the background indefinitely.

141
00:08:22,320 --> 00:08:24,800
Even if the component that launched it, is
destroyed.

142
00:08:26,100 --> 00:08:28,087
Started services are driven by a version

143
00:08:28,087 --> 00:08:31,320
of control, from androids activity manager
service.

144
00:08:31,320 --> 00:08:33,850
Which dispatches service like cycle hook
methods.

145
00:08:33,850 --> 00:08:37,840
Such as uncreate, unstart command and
undestroy.

146
00:08:37,840 --> 00:08:39,951
In response to various events, generated

147
00:08:39,951 --> 00:08:42,480
by applications and the Android
infrastructure.

148
00:08:43,800 --> 00:08:46,230
The next part of this video shows how
these

149
00:08:46,230 --> 00:08:49,425
hook methods, can be implemented by
applying a common

150
00:08:49,425 --> 00:08:53,314
Android idiom for concurrent service
processing, which is based

151
00:08:53,314 --> 00:08:57,077
on the command processor pattern discussed
later in this MOOC.

152
00:08:57,077 --> 00:09:05,209
[MUSIC]

