1
00:00:00,000 --> 00:00:08,380
[MUSIC]

2
00:00:08,380 --> 00:00:11,634
Welcome to the next part of the module on
Android Services &

3
00:00:11,634 --> 00:00:15,940
Security, which continues our analysis of
how to program a started service.

4
00:00:17,060 --> 00:00:18,724
Now that we have examined the design of

5
00:00:18,724 --> 00:00:22,059
the download application, we'll delve
deeper into its implementation.

6
00:00:23,150 --> 00:00:25,810
We'll start by analyzing the download
activity,

7
00:00:25,810 --> 00:00:28,190
which contains an instance of a download
handler

8
00:00:28,190 --> 00:00:29,710
that receives the path name of the

9
00:00:29,710 --> 00:00:32,730
file containing the image retrieved by
download service.

10
00:00:34,480 --> 00:00:38,630
The download activity extends activity and
displays a screen that prompts

11
00:00:38,630 --> 00:00:41,499
the user for the URL of the desired image
to download.

12
00:00:42,860 --> 00:00:45,844
After a user enters the URL into an edit
text window

13
00:00:45,844 --> 00:00:48,261
and presses the download image button,

14
00:00:48,261 --> 00:00:51,189
Android dispatches the download image
method.

15
00:00:51,189 --> 00:00:54,042
Which gets the URL string entered by the
user and

16
00:00:54,042 --> 00:00:58,119
calls the makeIntent factory method to
find the download service.

17
00:00:59,560 --> 00:01:02,398
This factory method creates the
appropriate intent,

18
00:01:02,398 --> 00:01:04,811
that contains the desired URL as intent
data.

19
00:01:04,811 --> 00:01:07,767
Along with other information, used to
communicate from

20
00:01:07,767 --> 00:01:10,550
the download service back to the download
activity.

21
00:01:11,700 --> 00:01:13,500
The start service method is then called to

22
00:01:13,500 --> 00:01:15,779
launch the download service, to handle
this intent.

23
00:01:17,210 --> 00:01:20,157
After the service has successfully
downloaded the

24
00:01:20,157 --> 00:01:21,869
image and stored it in a file on

25
00:01:21,869 --> 00:01:24,197
the device, the path name is passed back

26
00:01:24,197 --> 00:01:27,231
to the download activity via its download
handler.

27
00:01:27,231 --> 00:01:30,905
Which is encapsulated by the Android
messenger inter-process

28
00:01:30,905 --> 00:01:34,790
communication mechanism, which we'll
discuss in a later video.

29
00:01:34,790 --> 00:01:40,043
[MUSIC]

30
00:01:40,043 --> 00:01:41,903
We'll now analyze the download service

31
00:01:41,903 --> 00:01:44,913
implementation, which contains an instance
of ServiceHandler

32
00:01:44,913 --> 00:01:49,100
that runs in a background thread and
retrieves an image from a remote server.

33
00:01:49,100 --> 00:01:51,690
Stores it in a file on the device and
returns

34
00:01:51,690 --> 00:01:54,260
the path name of the file of the download
activity client.

35
00:01:55,540 --> 00:01:58,240
DownloadService extends the Service
superclass and

36
00:01:58,240 --> 00:02:01,260
overrides several of its hook methods.

37
00:02:01,260 --> 00:02:03,090
It also defines a factory method called

38
00:02:03,090 --> 00:02:05,960
makeIntent, that's called by the download
activity,

39
00:02:05,960 --> 00:02:09,450
to make the right type of intent to pass
to the start service method.

40
00:02:10,770 --> 00:02:12,753
This factory method creates an intent,

41
00:02:12,753 --> 00:02:15,448
that's associated with the download
service class.

42
00:02:15,448 --> 00:02:17,523
Adds the image URL as data for the intent,

43
00:02:17,523 --> 00:02:22,450
and creates an instance of the messenger
inter-process communication mechanism.

44
00:02:22,450 --> 00:02:26,490
Which encapsulates the download handler
and is added as an extra to the intent.

45
00:02:27,820 --> 00:02:31,680
The download service later uses this
messenger to pass the path name back to

46
00:02:31,680 --> 00:02:34,400
the download activity after it
successfully retrieves

47
00:02:34,400 --> 00:02:37,320
the image, as discussed in an upcoming
video.

48
00:02:39,090 --> 00:02:42,270
The download service class also defines
several data members.

49
00:02:42,270 --> 00:02:44,880
The store looper and an instance of the
service handler.

50
00:02:46,400 --> 00:02:48,930
These data members are defined as
volatile.

51
00:02:48,930 --> 00:02:52,680
To ensure they're properly visible to the
background handler thread.

52
00:02:52,680 --> 00:02:53,550
As discussed here.

53
00:02:55,730 --> 00:02:58,598
The onCreate hook method is called when
the download

54
00:02:58,598 --> 00:03:02,389
service is first launched by Android's
activity manager service.

55
00:03:03,530 --> 00:03:05,570
It creates and then starts a handler

56
00:03:05,570 --> 00:03:08,040
thread, which was covered in an earlier
video.

57
00:03:09,410 --> 00:03:12,590
By default, a service runs in the user
interface thread,

58
00:03:12,590 --> 00:03:16,110
which we don't want to block during the
image download process.

59
00:03:16,110 --> 00:03:18,880
So the download service uses the handler
thread

60
00:03:18,880 --> 00:03:21,080
to retrieve the image concurrently in the
background.

61
00:03:22,520 --> 00:03:25,497
The onCreate hook method next gets the
HandlerThread's

62
00:03:25,497 --> 00:03:29,160
looper and passes it to the constructor of
ServiceHandler.

63
00:03:29,160 --> 00:03:30,893
So its handle message method will be

64
00:03:30,893 --> 00:03:33,330
dispatched in the context of the handler
thread.

65
00:03:34,480 --> 00:03:37,663
Which is a common idiom applied in various
Android

66
00:03:37,663 --> 00:03:41,539
packaged applications as we'll show in an
upcoming video.

67
00:03:41,539 --> 00:03:46,683
[BLANK_AUDIO]

68
00:03:46,683 --> 00:03:48,445
[MUSIC]

69
00:03:48,445 --> 00:03:51,792
The onStartCommand hook method is called
each time a started

70
00:03:51,792 --> 00:03:54,820
service is sent an intent by the start
service method.

71
00:03:55,940 --> 00:03:57,825
In the download service implementation,

72
00:03:57,825 --> 00:04:00,865
onStartCommand invokes the
makeDownloadMessage factory method,

73
00:04:00,865 --> 00:04:04,150
which creates a message that will be sent
to the service handler.

74
00:04:04,150 --> 00:04:06,020
And used to retrieve an image based on

75
00:04:06,020 --> 00:04:09,120
the contents of the intent encapsulated in
the message.

76
00:04:10,340 --> 00:04:14,890
This factory method adds the intent to the
message to indicate which URL to retrieve.

77
00:04:14,890 --> 00:04:17,660
It also adds the start ID to the message.

78
00:04:17,660 --> 00:04:20,570
This parameter is passed by the Android
service framework to

79
00:04:20,570 --> 00:04:24,820
onStartCommand and is used to indicate
which request is being stopped.

80
00:04:24,820 --> 00:04:27,700
When the download completes, as discussed
shortly.

81
00:04:28,920 --> 00:04:32,541
OnStartCommand then calls the service
handle'rs send message method.

82
00:04:32,541 --> 00:04:36,894
Which uses the HaMeR framework to pass the
message to the service handler's handle

83
00:04:36,894 --> 00:04:38,510
message hook method so it can be

84
00:04:38,510 --> 00:04:41,699
processed concurrently in the background
handler thread.

85
00:04:43,340 --> 00:04:45,734
The value return from onStartCommand
informs

86
00:04:45,734 --> 00:04:47,637
the Android service framework not to

87
00:04:47,637 --> 00:04:50,215
restart the download service
automatically, if

88
00:04:50,215 --> 00:04:52,500
its process is killed while it's running.

89
00:04:53,860 --> 00:04:57,549
The ServiceHandler class extends Handler,
and does the bulk of the work for

90
00:04:57,549 --> 00:05:00,547
the download service, by concurrently
processing messages

91
00:05:00,547 --> 00:05:02,519
passed to it, via the HaMeR framework.

92
00:05:03,700 --> 00:05:08,134
The constructor of ServiceHandler gets the
handler thread's looper and assigns it to

93
00:05:08,134 --> 00:05:09,408
be its looper, so it will

94
00:05:09,408 --> 00:05:12,950
receive messages forwarded from
onStartCommand via sendMessage.

95
00:05:14,220 --> 00:05:18,450
The handleMessage hook method runs in the
context of the handler thread.

96
00:05:18,450 --> 00:05:21,980
It calls the downloadImageAndReply method
to retrieve an

97
00:05:21,980 --> 00:05:24,830
image from a remove server, store it on a

98
00:05:24,830 --> 00:05:27,330
file on the device, and send the path

99
00:05:27,330 --> 00:05:30,380
name for the file back to the
DownloadActivity client.

100
00:05:30,380 --> 00:05:34,686
Via the Android messenger inter-process
communication

101
00:05:34,686 --> 00:05:37,770
mechanism as shown in an upcoming video.

102
00:05:37,770 --> 00:05:43,048
[MUSIC]

103
00:05:43,048 --> 00:05:45,599
Since the lifecycle of a service is
independent of

104
00:05:45,599 --> 00:05:48,636
the component that launched it, the
Download Service must

105
00:05:48,636 --> 00:05:50,822
be programmed to shut itself down or it
will

106
00:05:50,822 --> 00:05:52,524
continue running the background

107
00:05:52,524 --> 00:05:55,040
indefinitely and consuming system
resources.

108
00:05:56,140 --> 00:05:59,090
After retrieving an image from a remote
server therefore.

109
00:05:59,090 --> 00:06:01,619
The download service explicitly shuts
itself

110
00:06:01,619 --> 00:06:04,640
down by calling the StopSelf method.

111
00:06:04,640 --> 00:06:08,491
However, to ensure the download service
doesn't shut itself down until

112
00:06:08,491 --> 00:06:12,880
all its current processing is complete, it
applies a common Android idiom.

113
00:06:12,880 --> 00:06:14,850
For stopping service, that's covered here.

114
00:06:16,000 --> 00:06:17,440
This idiom is used by services

115
00:06:17,440 --> 00:06:20,850
that handle multiple start service
requests concurrently.

116
00:06:20,850 --> 00:06:23,540
For example, in the download service, a
second

117
00:06:23,540 --> 00:06:26,020
request may have arrived concurrently from
a client.

118
00:06:26,020 --> 00:06:29,868
Via onStartCommand while the download
service was processing a first request

119
00:06:29,868 --> 00:06:33,610
in the handle message method dispatched by
the service handler's thread.

120
00:06:35,130 --> 00:06:38,700
The download service therefore can't shut
itself down when it's done

121
00:06:38,700 --> 00:06:40,880
processing the first request since that

122
00:06:40,880 --> 00:06:43,050
would terminate the second request
prematurely.

123
00:06:44,290 --> 00:06:47,000
To avoid this problem, stopSelf has passed
the start id

124
00:06:47,000 --> 00:06:51,110
of the request that was originally
delivered to the onStartCommand method.

125
00:06:51,110 --> 00:06:52,592
And stored in the arg1 field of

126
00:06:52,592 --> 00:06:55,730
the message created by the
makeDownloadMessage factor method.

127
00:06:56,880 --> 00:07:00,923
In accordance with this idiom, if
DownloadService receives a new request via

128
00:07:00,923 --> 00:07:03,620
onStartCommand before calling the stopSelf
method

129
00:07:03,620 --> 00:07:06,574
and the ServiceHandler's handleMessage
hook method.

130
00:07:06,574 --> 00:07:09,599
The startId will not match the last start
request and the

131
00:07:09,599 --> 00:07:13,600
Android service framework will not stop
download service at that point.

132
00:07:14,660 --> 00:07:16,589
Eventually the start ID will match the
last

133
00:07:16,589 --> 00:07:19,840
start request and the download service
will be stopped.

134
00:07:19,840 --> 00:07:25,179
At which point, the Android service
framework will invoke its onDestroy

135
00:07:25,179 --> 00:07:30,443
hook method, which quits the looper and
shuts down the handler thread.

136
00:07:30,443 --> 00:07:35,623
[MUSIC]

137
00:07:35,623 --> 00:07:36,930
In summary.

138
00:07:36,930 --> 00:07:38,480
This part of the module analyzed the

139
00:07:38,480 --> 00:07:41,970
implementation of the download activity
and download service.

140
00:07:41,970 --> 00:07:45,220
Which are used to retrieve images from
remote servers, store them

141
00:07:45,220 --> 00:07:49,310
in files on the device, and display the
images to the user.

142
00:07:49,310 --> 00:07:52,424
By default, a service uses the user
interface thread, and can

143
00:07:52,424 --> 00:07:56,550
thus incur application not responding
errors if it blocks too long.

144
00:07:56,550 --> 00:07:59,867
In particular, a service is not a thread,
and does not create a

145
00:07:59,867 --> 00:08:04,550
run in a separate thread or process,
unless explicitly programmed to do so.

146
00:08:04,550 --> 00:08:05,650
As discussed here.

147
00:08:05,650 --> 00:08:08,895
Computer I/O intensive services therefore,
often

148
00:08:08,895 --> 00:08:11,283
run in one or more background threads.

149
00:08:11,283 --> 00:08:14,517
So, service implementations often focus on
defining classes

150
00:08:14,517 --> 00:08:19,039
that leverage various Android service,
concurrency and communication mechanisms.

151
00:08:20,060 --> 00:08:24,020
For example, the download service used
various classes from the android HaMeR

152
00:08:24,020 --> 00:08:29,280
framework to process intents in a handler
thread and retrieve images concurrently.

153
00:08:29,280 --> 00:08:33,080
Since writing these classes for each
service is tedious and error prone.

154
00:08:33,080 --> 00:08:35,099
Android provides the intent service.

155
00:08:35,099 --> 00:08:37,699
Which codifies concurrent internet
processing in a

156
00:08:37,699 --> 00:08:41,133
reasonable framework that applies the
command processor pattern.

157
00:08:41,133 --> 00:08:45,697
To handle asynchronous commands expressed
as intents in a

158
00:08:45,697 --> 00:08:50,084
single background thread, as shown in the
next video.

159
00:08:50,084 --> 00:08:57,839
[MUSIC]

