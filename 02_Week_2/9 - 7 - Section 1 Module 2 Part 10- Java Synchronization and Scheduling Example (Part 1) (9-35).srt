1
00:00:00,000 --> 00:00:08,500
[MUSIC].

2
00:00:08,500 --> 00:00:11,130
Welcome to the next part of the module,

3
00:00:11,130 --> 00:00:13,150
which presents an example that shows how
the Java

4
00:00:13,150 --> 00:00:16,140
concurrency mechanisms covered earlier,
can be used to

5
00:00:16,140 --> 00:00:19,360
synchronize and schedule the behavior, of
a multithreaded program.

6
00:00:20,810 --> 00:00:23,410
Although previous part of this module,
have shown how Java

7
00:00:23,410 --> 00:00:27,360
synchronization and scheduling classes are
used in production Android software.

8
00:00:28,460 --> 00:00:30,760
These examples have just shown, snippets
of code.

9
00:00:31,770 --> 00:00:36,020
Therefore, this part analyses the design
of,a pattern oriented framework.

10
00:00:36,020 --> 00:00:39,450
That's then customized and implemented in
the next part, to create two

11
00:00:39,450 --> 00:00:41,730
Java threads that alternate between
printing

12
00:00:41,730 --> 00:00:43,405
Ping, and Pong on the computer Console.

13
00:00:43,405 --> 00:00:45,100
[BLANK_AUDIO].

14
00:00:45,100 --> 00:00:49,636
The Ping-Pong program presented earlier,
lacked proper concurrency control, so

15
00:00:49,636 --> 00:00:53,290
it's [UNKNOWN] was incorrect, in contrast,
the example we analysed

16
00:00:53,290 --> 00:00:56,944
now works correctly, since it coordinates
thread interactions by a

17
00:00:56,944 --> 00:01:02,350
Java synchronise, such as Semaphores,
condition objects and countdown latches.

18
00:01:02,350 --> 00:01:03,460
In addition to outlining the
object-oriented

19
00:01:03,460 --> 00:01:06,510
design of this synchronized Ping-Pong
program,

20
00:01:06,510 --> 00:01:09,650
this part shows how the application of
Gang of Four patterns, such

21
00:01:09,650 --> 00:01:11,660
as template method strategy, and factor

22
00:01:11,660 --> 00:01:15,270
method provide several benefits, in
particular,

23
00:01:15,270 --> 00:01:17,360
these patterns make the framework and

24
00:01:17,360 --> 00:01:20,040
the resulting Ping-Pong program, more
reusable.

25
00:01:20,040 --> 00:01:21,090
Flexible and portable.

26
00:01:22,390 --> 00:01:25,530
Although we focus on a Java Console
application again, this

27
00:01:25,530 --> 00:01:28,520
framework makes it easy to port our
solution in Android.

28
00:01:28,520 --> 00:01:31,780
After we discuss the User Interface
Threading model, later in this

29
00:01:34,740 --> 00:01:35,550
section.

30
00:01:35,550 --> 00:01:36,119
[MUSIC].

31
00:01:39,220 --> 00:01:43,030
The Ping-Pong Program, is structured using
an object-oriented design.

32
00:01:43,030 --> 00:01:46,180
Consisting of a number of classes
associated with each other, by

33
00:01:46,180 --> 00:01:50,380
inheritance and containment relationships,
as shown in this UML class diagram.

34
00:01:51,510 --> 00:01:53,940
This UML sequence diagram, depicts the
flow of

35
00:01:53,940 --> 00:01:56,090
control between the key classes in the
program.

36
00:01:57,230 --> 00:01:59,470
The main entry point method, creates and
starts

37
00:01:59,470 --> 00:02:02,290
a thread, that's passed an instance of the
Ping-Pong

38
00:02:02,290 --> 00:02:05,550
run and play implementation, the run hook
method of

39
00:02:05,550 --> 00:02:08,790
play Ping-Pong, creates and starts two
Ping-Pong thread objects.

40
00:02:09,970 --> 00:02:12,870
The run hook methods in these objects are
template methods,

41
00:02:12,870 --> 00:02:14,450
that implement the Ping-Pong algorithm

42
00:02:14,450 --> 00:02:17,230
concurrently, using a pair of
synchronizer.

43
00:02:17,230 --> 00:02:19,620
Which can either be Java semaphore or
condition objects.

44
00:02:20,830 --> 00:02:23,380
This synchronizer control the order which
the threads alternate

45
00:02:23,380 --> 00:02:27,270
printing Ping and Pong, via the configured
platform strategy.

46
00:02:27,270 --> 00:02:30,030
Which factors out all of the platform
dependent output.

47
00:02:30,030 --> 00:02:32,720
And synchronization operations, so that
the Play Ping-Pong

48
00:02:32,720 --> 00:02:36,320
code will execute without change, in
multiple runtime environments.

49
00:02:37,400 --> 00:02:39,600
It also contains a CountDownLatch, that's
used to

50
00:02:39,600 --> 00:02:42,360
wait for the two Ping-Pong threads to
exit.

51
00:02:42,360 --> 00:02:44,230
Extending this program is relatively
straight

52
00:02:44,230 --> 00:02:46,540
forward, since it's based on a framework,

53
00:02:46,540 --> 00:02:53,120
who's design is guided by several Gang of
Four patterns, as discussed next.

54
00:02:53,120 --> 00:02:56,930
[MUSIC].

55
00:02:56,930 --> 00:03:00,290
Before analyzing the implementation of the
object-oriented framework and

56
00:03:00,290 --> 00:03:04,230
application code, for the concurrent
Ping-Pong program in detail.

57
00:03:04,230 --> 00:03:07,160
We'll outline it's pattern oriented
software architecture.

58
00:03:07,160 --> 00:03:10,770
Which applies three Gang of Four patterns
to guide the design of it's classes.

59
00:03:10,770 --> 00:03:13,710
And enhance certain software quality
attributes.

60
00:03:13,710 --> 00:03:18,290
For example, we want our solution to
maximize systematic software reuse, which

61
00:03:18,290 --> 00:03:20,730
involves intentionally creating or
requiring reusable

62
00:03:20,730 --> 00:03:23,460
assets, and then consistently using and
evolving

63
00:03:23,460 --> 00:03:28,110
them, to obtain a high degree of reuse,
thereby optimizing the ability to

64
00:03:28,110 --> 00:03:30,650
produce quality software products, rapidly
and

65
00:03:30,650 --> 00:03:33,570
effectively, as discussed in an earlier
video.

66
00:03:34,980 --> 00:03:38,180
To achieve this attribute, we used the
Template Method pattern.

67
00:03:38,180 --> 00:03:40,990
Which provides a skeleton of an algorithm
in a method,

68
00:03:40,990 --> 00:03:44,510
deferring some steps to sub classes, as
described in this link.

69
00:03:46,042 --> 00:03:48,550
The Ping-Pong program applies this
pattern, to implement

70
00:03:48,550 --> 00:03:51,760
the Ping-Pong algorithm once in the run
template method.

71
00:03:51,760 --> 00:03:54,820
Defining the Ping-Pong thread base class,
shown on this slide.

72
00:03:56,372 --> 00:03:59,690
Sub classes that acquire the over lease
and hook methods, which

73
00:03:59,690 --> 00:04:02,290
play the role of primitive operations in
the Template Method pattern.

74
00:04:03,710 --> 00:04:06,670
These methods alternate the printing of,
Ping and Pong.

75
00:04:06,670 --> 00:04:09,530
Via different synchronization and
scheduling mechanisms.

76
00:04:09,530 --> 00:04:12,140
Such as the Ping-Pong thread sema sub
class, that

77
00:04:12,140 --> 00:04:15,420
uses Java Semaphores as discussed in the
next video.

78
00:04:17,300 --> 00:04:21,660
This pattern maximizes algorithm reuse, in
the Ping-Pong threads run method.

79
00:04:21,660 --> 00:04:24,700
While making it easy to change policies
and mechanisms.

80
00:04:24,700 --> 00:04:27,890
Such as replacing the use of semaphores
with condition objects, and

81
00:04:27,890 --> 00:04:30,960
supporting more sophisticated alternation
behavior, without

82
00:04:30,960 --> 00:04:34,300
changing the underlying, Ping-Pong
algorithm itself.

83
00:04:34,300 --> 00:04:35,540
Also shown in the next video.

84
00:04:35,540 --> 00:04:37,000
[MUSIC].

85
00:04:37,000 --> 00:04:37,790
Another

86
00:04:42,250 --> 00:04:44,450
software quality attribute, we want to
maximize

87
00:04:44,450 --> 00:04:48,750
in our object-oriented Ping-Pong Program
design, is portability.

88
00:04:48,750 --> 00:04:50,410
Which enables the same implementation to

89
00:04:50,410 --> 00:04:53,060
be applied, in different operating
environments.

90
00:04:53,060 --> 00:04:55,170
Thereby increasing the potential userbase,
and

91
00:04:55,170 --> 00:04:57,440
market size, as described at this link.

92
00:04:58,660 --> 00:05:00,330
To achieve this attribute, we use the

93
00:05:00,330 --> 00:05:02,800
strategy pattern, which defines a family
of

94
00:05:02,800 --> 00:05:05,850
algorithms, encapsulates each one, and
makes them

95
00:05:05,850 --> 00:05:09,510
interchangeable, to let clients and
algorithms vary independently.

96
00:05:09,510 --> 00:05:11,220
As described at this link.

97
00:05:12,640 --> 00:05:16,200
The Ping-Pong Program applies this
pattern, to define a platform strategy

98
00:05:16,200 --> 00:05:21,130
class hierarchy, that factors out
different ways of printing Ping and Pong.

99
00:05:21,130 --> 00:05:22,600
And coordinating the completion of

100
00:05:22,600 --> 00:05:25,850
printing operations, on different runtime
platforms.

101
00:05:25,850 --> 00:05:28,090
Such as a Java Console application.

102
00:05:28,090 --> 00:05:32,330
Versus an Android application, for
example, the platform

103
00:05:32,330 --> 00:05:34,870
strategy begin method initializes the
count down latch

104
00:05:34,870 --> 00:05:37,360
to account for two threats, this method
work

105
00:05:37,360 --> 00:05:40,520
the same on both Console, and Android
applications.

106
00:05:40,520 --> 00:05:45,055
Conversely, the console platform strategy
print() method calls the Java system

107
00:05:45,055 --> 00:05:49,980
println() method, which writes the output
string to the Console window.

108
00:05:49,980 --> 00:05:52,850
In contrast, the Android platform strategy
print

109
00:05:52,850 --> 00:05:56,470
method, creates a runable, who's run hook
method.

110
00:05:56,470 --> 00:05:59,360
Write the string, to a text view, and then
cues

111
00:05:59,360 --> 00:06:02,660
this run able, on the User Interface
Threads looper cue.

112
00:06:02,660 --> 00:06:06,220
Since Android, only allows the User
Interface Thread, to write to the display.

113
00:06:07,620 --> 00:06:10,940
Likewise, the platform strategy done
method, is implemented

114
00:06:10,940 --> 00:06:14,430
differently in an Android application
versus a Console application.

115
00:06:14,430 --> 00:06:17,910
Though the count down latch, count down
method is used on both platforms.

116
00:06:19,120 --> 00:06:21,160
The await done method implementation is
the

117
00:06:21,160 --> 00:06:23,400
same on both platforms, simply forwarding
to

118
00:06:23,400 --> 00:06:25,600
the countdown latch wait method, to
perform

119
00:06:25,600 --> 00:06:28,669
barrier synchronization as described in
this earlier video.

120
00:06:28,669 --> 00:06:29,169
[MUSIC].

121
00:06:36,210 --> 00:06:41,210
Yet another software quality attribute, we
want to maximize, is flexibility.

122
00:06:41,210 --> 00:06:44,850
Which enables designs, to adapt more
readily in response to internal

123
00:06:44,850 --> 00:06:48,970
or external changes in requirements or
environments, as described at this link.

124
00:06:50,060 --> 00:06:52,710
To achieve this quality attribute, we
apply the factory

125
00:06:52,710 --> 00:06:56,210
method pattern, which provides an
interface, for creating an object.

126
00:06:56,210 --> 00:06:58,470
But leaves the choice of the objects
concrete type

127
00:06:58,470 --> 00:07:00,810
to a sub class, as described in this link.

128
00:07:02,040 --> 00:07:05,750
The Ping-Pong program applies this pattern
in several ways.

129
00:07:05,750 --> 00:07:08,785
For example, a variant to this pattern is
used in the make

130
00:07:08,785 --> 00:07:11,330
Ping-Pong threads factory method, that
creates

131
00:07:11,330 --> 00:07:13,852
the appropriate sub class, of Ping-Pong
Thread.

132
00:07:15,270 --> 00:07:17,720
Depending on a runtime option, that can be
configured

133
00:07:17,720 --> 00:07:21,790
by the user, a simifour based Ping-Pong
Thread object.

134
00:07:21,790 --> 00:07:24,130
Or, a condition object based Ping-Pong
thread

135
00:07:24,130 --> 00:07:27,490
object is created, without affecting the
implementation, of

136
00:07:27,490 --> 00:07:30,270
the play Ping-Pong algorithm, that uses
the object

137
00:07:30,270 --> 00:07:32,910
return, by the make Ping-Pong Threads
factory method.

138
00:07:34,620 --> 00:07:37,180
The Ping-Pong program also applies this
pattern.

139
00:07:37,180 --> 00:07:39,730
To the platform strategy factory, that
creates the

140
00:07:39,730 --> 00:07:42,680
appropriate instance, of the platform
strategy sub class.

141
00:07:43,780 --> 00:07:47,750
In particular, depending on the settings,
of the Java specification

142
00:07:47,750 --> 00:07:52,880
vendor system property, the make platform
strategy factory method, in Console

143
00:07:52,880 --> 00:07:57,280
platform strategy, in Android platform
strategy, either create an instance

144
00:07:57,280 --> 00:08:02,140
of the Android platform strategy, or the
Console platform strategy, respectively.

145
00:08:04,060 --> 00:08:07,220
In addition to enhancing flexibility, the
Factory

146
00:08:07,220 --> 00:08:11,380
Method Pattern enhances systematic reuse,
and portability.

147
00:08:11,380 --> 00:08:14,540
By enabling the family of Ping-Pong
programs, to vary

148
00:08:14,540 --> 00:08:19,690
transparently, and run on different
platforms, without requiring any changes.

149
00:08:19,690 --> 00:08:21,970
To the rest of the framework, or
application code.

150
00:08:21,970 --> 00:08:26,354
[MUSIC].

151
00:08:26,354 --> 00:08:31,766
In summary, this video analysed the design
of a pattern oriented framework,

152
00:08:31,766 --> 00:08:37,670
that can support a family, of related
concurrent Ping-Pong programs.

153
00:08:37,670 --> 00:08:40,320
In the next video, we'll customize this
framework,

154
00:08:40,320 --> 00:08:42,850
with several different Java synchronizers,
and use it

155
00:08:42,850 --> 00:08:45,840
to implement two Java threads, that
correctly alternate

156
00:08:45,840 --> 00:08:48,430
printing Ping and Pong to the computer
Console.

157
00:08:49,790 --> 00:08:52,590
In addition to fixing the concurrency
control problems, with the

158
00:08:52,590 --> 00:08:55,070
buggy solution we examined earlier,

159
00:08:55,070 --> 00:08:58,170
our framework-based solution, is more
portable.

160
00:08:58,170 --> 00:09:00,450
Reusable, and extensible.

161
00:09:00,450 --> 00:09:04,190
Since it applies the Gang of Four template
method, strategy, and factory method

162
00:09:04,190 --> 00:09:06,950
patterns, to factor out various platform,
and

163
00:09:06,950 --> 00:09:10,810
concurrency control mechanisms, into
several inheritance hierarchies.

164
00:09:10,810 --> 00:09:13,020
Which can then be customized by
applications,

165
00:09:13,020 --> 00:09:15,660
to support different requirements, and
different environments.

166
00:09:17,120 --> 00:09:20,770
Although we present these patterns in the
context of the Ping-Pong program,

167
00:09:20,770 --> 00:09:22,320
they're actually broadly applicable to
many

168
00:09:22,320 --> 00:09:25,100
types of software, both concurrent, and
non-concurrent.

169
00:09:25,100 --> 00:09:28,800
As shown in an upcoming module, on Android
concurrency frameworks.

170
00:09:30,100 --> 00:09:32,390
We'll also reuse this pattern erected
framework,

171
00:09:32,390 --> 00:09:34,970
to port the Ping-Pong program to Android.

172
00:09:34,970 --> 00:09:36,600
Without changing the core Ping-Pong

173
00:09:36,600 --> 00:09:39,720
algorithm, or the framework software
itself.

174
00:09:39,720 --> 00:09:44,948
Which your program is part of an
assignment, later in this MOOC.

175
00:09:44,948 --> 00:09:45,060
[BLANK_AUDIO]

