1
00:00:00,000 --> 00:00:03,320
[MUSIC].

2
00:00:03,320 --> 00:00:06,070
Welcome to the next

3
00:00:08,490 --> 00:00:12,264
part of the module, which covers the Java
ConditionObject class.

4
00:00:13,360 --> 00:00:16,580
This part provides a conceptual overview
of condition variables.

5
00:00:16,580 --> 00:00:19,040
Explains how the Java conditionobject
class implements

6
00:00:19,040 --> 00:00:21,770
these concept, to enable user-defined Java
objects

7
00:00:21,770 --> 00:00:24,430
to have multiple weight sets per object,

8
00:00:24,430 --> 00:00:26,670
and shows how conditionobjects are applied
in Android.

9
00:00:27,850 --> 00:00:31,110
A condition variable is a synchronization
and scheduling mechanism,

10
00:00:31,110 --> 00:00:34,940
that's commonly used to implement the
guarded suspension pattern.

11
00:00:34,940 --> 00:00:39,010
Which requires both the acquisition of a
lock and the satisfaction of

12
00:00:39,010 --> 00:00:43,526
a condition before an operation can be
executed, as described at this link.

13
00:00:43,526 --> 00:00:46,670
A thread can suspend itself on a condition

14
00:00:46,670 --> 00:00:49,470
variable until another thread notifies it,
that a

15
00:00:49,470 --> 00:00:52,218
condition involving shared state it's
waiting on, may

16
00:00:52,218 --> 00:00:54,560
now be true, as described at this link.

17
00:00:55,820 --> 00:00:58,640
This condition can be arbitrarily complex.

18
00:00:58,640 --> 00:01:02,390
So a lock must therefore be associated
with a condition variable to protect

19
00:01:02,390 --> 00:01:04,460
the shared state and the condition from

20
00:01:04,460 --> 00:01:06,910
being corrupted by other concurrently
running threads.

21
00:01:08,540 --> 00:01:10,990
When a thread waits on a condition
variable,

22
00:01:10,990 --> 00:01:13,400
the lock associated with it is released,
and

23
00:01:13,400 --> 00:01:16,050
the thread is suspended atomically until
the condition

24
00:01:16,050 --> 00:01:19,180
is satisfied, in accordance with a guarded
suspension pattern.

25
00:01:20,780 --> 00:01:24,100
When another thread signals the condition
variable, and the thread

26
00:01:24,100 --> 00:01:28,130
scheduler wakes up the waiting thread, the
lock is reacquired

27
00:01:28,130 --> 00:01:32,010
implicitly, and the code running in the
reawakened thread checks

28
00:01:32,010 --> 00:01:35,880
to see if the shared state has satisfied
its designated condition.

29
00:01:37,550 --> 00:01:41,660
If the condition is satisfied, it's
processing can continue.

30
00:01:41,660 --> 00:01:44,310
If not, it suspends itself by waiting on

31
00:01:44,310 --> 00:01:47,530
the condition variable again and releases
the lock atomically.

32
00:01:49,420 --> 00:01:52,010
Conditions variables form the basis
scheduling

33
00:01:52,010 --> 00:01:55,070
synchronization methods in Java and
Android.

34
00:01:55,070 --> 00:01:57,760
For example, classes in the
Java.util.concurrent

35
00:01:57,760 --> 00:01:59,890
package use Java's implementation of
condition

36
00:01:59,890 --> 00:02:02,890
variables called conditionobjects, to
allow multiple

37
00:02:02,890 --> 00:02:04,650
threads to put and take messages from

38
00:02:04,650 --> 00:02:06,510
synchronized queues and deques correctly
and

39
00:02:06,510 --> 00:02:09,140
efficiently, as shown in this diagram of

40
00:02:09,140 --> 00:02:12,420
the ArrayBlockingQueue class, described at
this

41
00:02:12,420 --> 00:02:13,790
link and analyzed later in this video.

42
00:02:14,790 --> 00:02:17,580
Condition variables are also instrumental
in Java built-in monitor

43
00:02:17,580 --> 00:02:21,110
objects, described in an upcoming video in
this module.

44
00:02:21,110 --> 00:02:24,890
And the monitor object pattern, which is
described in a pair of upcoming videos.

45
00:02:26,000 --> 00:02:29,560
Condition variables are a powerful
synchronization and scheduling mechanism.

46
00:02:29,560 --> 00:02:31,520
But they have a lot of moving parts, which

47
00:02:31,520 --> 00:02:33,760
can make them hard to understand and apply
properly.

48
00:02:34,770 --> 00:02:37,870
So you may want to watch this video
multiple times and read the

49
00:02:37,870 --> 00:02:38,930
links shown at the bottom of the

50
00:02:38,930 --> 00:02:41,620
slides carefully to fully understand these
concepts.

51
00:02:41,620 --> 00:02:48,730
[MUSIC]

52
00:02:48,730 --> 00:02:52,850
A human known use of condition variables
is shown in the pictures on this slide.

53
00:02:54,010 --> 00:02:56,940
Imagine that you and several of your
friends take a second

54
00:02:56,940 --> 00:03:01,580
or third job to make some extra money by
delivering pizzas, which

55
00:03:01,580 --> 00:03:04,660
is a growth industry, since in many places
people eat pizza

56
00:03:04,660 --> 00:03:07,770
when times are good, and they eat pizzas
when times are bad.

57
00:03:09,120 --> 00:03:13,580
So you and your friends deliver pizzas
using a protocol that synchronizes and

58
00:03:13,580 --> 00:03:15,680
schedules the accessed, the limited number
of

59
00:03:15,680 --> 00:03:18,350
pizza delivery vehicles and pizzas to
deliver.

60
00:03:19,470 --> 00:03:22,270
To make a delivery, you need two
resources, the

61
00:03:22,270 --> 00:03:24,880
pizza and the keys to a pizza delivery
vehicle.

62
00:03:25,880 --> 00:03:29,610
However, if you only get the pizza or you
only get the keys, you

63
00:03:29,610 --> 00:03:31,980
can't make your deliveries, so you and

64
00:03:31,980 --> 00:03:34,340
your friends wait in the kitchen sleeping,
since

65
00:03:34,340 --> 00:03:39,200
this is your second or third job, until
both conditions become true; The cooks

66
00:03:39,200 --> 00:03:42,890
are done with the pizza and the keys to a
pizza delivery vehicle are available.

67
00:03:44,310 --> 00:03:47,570
When cooks finish a pizza, they ring a
bell.

68
00:03:47,570 --> 00:03:51,190
Likewise, when someone returns from
delivering a pizza, they

69
00:03:51,190 --> 00:03:53,070
put the keys on a hook and ring a bell.

70
00:03:54,210 --> 00:03:58,006
These bells notify all sleepers that
conditions have changed.

71
00:03:58,006 --> 00:04:01,070
They then wake up and try to get both the
pizza and

72
00:04:01,070 --> 00:04:04,939
the keys, which must be acquired in the
same order, to avoid deadlock.

73
00:04:06,710 --> 00:04:10,920
If someone only gets one resource, just
the pizza, or just the keys, they must

74
00:04:10,920 --> 00:04:13,006
release it and go back to sleep until

75
00:04:13,006 --> 00:04:16,039
they're reawakening, the next time a bell
rings.

76
00:04:16,039 --> 00:04:20,070
This whimsical example shows how condition
variables can be used to wait for

77
00:04:20,070 --> 00:04:22,440
various conditions to become true and

78
00:04:22,440 --> 00:04:25,730
coordinate the activities of multiple
interdependent entities

79
00:04:25,730 --> 00:04:32,700
[MUSIC].

80
00:04:32,700 --> 00:04:34,492
Java provides condition variables by

81
00:04:34,492 --> 00:04:36,900
its conditionobject class, which
implements the

82
00:04:36,900 --> 00:04:39,084
conditional phase within the abstract
queued

83
00:04:39,084 --> 00:04:41,460
synchronized class, described at this
link.

84
00:04:42,550 --> 00:04:44,660
Android also provides a non-standard
condition

85
00:04:44,660 --> 00:04:47,240
variable class, described at this link,

86
00:04:47,240 --> 00:04:49,950
which implements the condition variable
concept,

87
00:04:49,950 --> 00:04:52,460
though the semantics are somewhat
different.

88
00:04:52,460 --> 00:04:54,600
So we'll focus on conditionobjects in this
video.

89
00:04:55,945 --> 00:05:00,380
Conditionobject is mostly implemented in
Java, as shown at this path name.

90
00:05:00,380 --> 00:05:02,170
The key methods in a conditionobject are a

91
00:05:02,170 --> 00:05:05,600
wait, signal, and signal all, which are
named

92
00:05:05,600 --> 00:05:07,860
to align with the wait, notify, and notify

93
00:05:07,860 --> 00:05:11,382
all methods provided by Java's built-in
monitor objects.

94
00:05:11,382 --> 00:05:14,260
Through they're implementations differ, as
we'll cover later on in the module.

95
00:05:15,578 --> 00:05:18,780
Internally, a conditionobject uses various
cues that

96
00:05:18,780 --> 00:05:21,630
enable threads to coordinate their
interacts by

97
00:05:21,630 --> 00:05:24,170
waiting and signaling each other when
changes

98
00:05:24,170 --> 00:05:26,240
occur to states shared by the threads.

99
00:05:27,420 --> 00:05:28,910
To ensure that this shared state is

100
00:05:28,910 --> 00:05:31,740
protected from race conditions, a
conditionobject is

101
00:05:31,740 --> 00:05:33,590
always used with a lock, such as

102
00:05:33,590 --> 00:05:36,620
the Java reentrantrock discussed in an
earlier video.

103
00:05:36,620 --> 00:05:39,690
In fact, reentrantlocks have a new
condition method.

104
00:05:39,690 --> 00:05:41,920
That returns a conditionobject instance
that can be

105
00:05:41,920 --> 00:05:44,660
used with a reentrantlock as shown at this
link.

106
00:05:44,660 --> 00:05:49,490
User-defined Java objects can have
multiple conditionobjects per object.

107
00:05:49,490 --> 00:05:52,388
In contrast, Java's built-in monitor
objects

108
00:05:52,388 --> 00:05:54,596
only allow a single monitor condition

109
00:05:54,596 --> 00:05:58,529
per object, which is more restrictive and
can lead to problems like

110
00:05:58,529 --> 00:06:02,600
nested monitor lockout, as described in
this link and covered in this

111
00:06:02,600 --> 00:06:06,898
video on Java built-in monitor objects, in
a later part of this module.

112
00:06:06,898 --> 00:06:07,590
[MUSIC].

113
00:06:07,590 --> 00:06:12,588
To show how conditionobjects are used in
Android, we'll

114
00:06:12,588 --> 00:06:18,830
analyze an implementation of array
breaking blocking queue.

115
00:06:18,830 --> 00:06:21,500
Which is a block bandit cue that stores
its elements in

116
00:06:21,500 --> 00:06:25,840
first in, first out or FIFO order, as
described at this link.

117
00:06:25,840 --> 00:06:31,755
Arrayblockingqueue extend abstract queue
and implements blocking

118
00:06:31,755 --> 00:06:33,670
queue; as shown at this path name.

119
00:06:35,420 --> 00:06:38,260
We don't analyze every detail of this
code, just

120
00:06:38,260 --> 00:06:40,454
the parts we need to explain how
conditionobjects work.

121
00:06:42,110 --> 00:06:44,276
This discussion extends our earlier video,

122
00:06:44,276 --> 00:06:48,275
showing how arrayblockingqueue applies to
reentrantlocks.

123
00:06:48,275 --> 00:06:51,050
Arrayblockingqueue is implemented as a
dynamically sized array.

124
00:06:52,500 --> 00:06:54,360
Some relevant data members include the
array

125
00:06:54,360 --> 00:06:56,860
of queued items and the indinsies used to

126
00:06:56,860 --> 00:07:00,586
keep track of the were the next put or
take item occurs in the items array.

127
00:07:00,586 --> 00:07:03,622
Just as Java's reentrantlock class can
replace the

128
00:07:03,622 --> 00:07:07,712
use of Java's built-in synchronized
methods and blocks.

129
00:07:07,712 --> 00:07:10,040
A conditionobject can replace the use of
built-in Java

130
00:07:10,040 --> 00:07:13,598
monitor object methods, such as wait and
notify all.

131
00:07:13,598 --> 00:07:16,320
For example, arrayblockingqueue's
implementation has

132
00:07:16,320 --> 00:07:18,180
a reentrant lock to serialize

133
00:07:18,180 --> 00:07:21,350
access to its state, as well as two
conditionobjects, not

134
00:07:21,350 --> 00:07:24,060
empty and not full, that allow its take
and put

135
00:07:24,060 --> 00:07:27,460
methods to block when the queue is empty
and full, respectively.

136
00:07:28,850 --> 00:07:32,646
The arrayblockingqueue constructor
initializes these data

137
00:07:32,646 --> 00:07:35,639
members using the reentrantlocks new
condition

138
00:07:35,639 --> 00:07:40,537
method to associate the not empty and not
full conditionobjects with the lock.

139
00:07:40,537 --> 00:07:42,470
[MUSIC].

140
00:07:42,470 --> 00:07:49,780
Arrayblockingqueue uses reentrantlocks and
conditionobjects to implement the

141
00:07:49,780 --> 00:07:54,710
monitor object pattern, described at this
link and discussed later in this module.

142
00:07:54,710 --> 00:07:58,460
This diagram shows the structure of the
arrayblockingqueue monitor object,

143
00:07:58,460 --> 00:08:00,790
which we'll use to visualize the analysis
of its code.

144
00:08:01,990 --> 00:08:03,607
This implementation of monitor object

145
00:08:03,607 --> 00:08:06,220
differs from Java's built-in monitor
objects.

146
00:08:06,220 --> 00:08:08,443
Because it creates an explicit
reentrantlock

147
00:08:08,443 --> 00:08:10,951
and multiple conditionobjects, rather than
using

148
00:08:10,951 --> 00:08:12,718
the implicit monitor lock and single

149
00:08:12,718 --> 00:08:15,670
monitor condition provided by built-in
monitor objects.

150
00:08:16,910 --> 00:08:20,159
Although we focus on the
arrayblockingqueue here, these steps are

151
00:08:20,159 --> 00:08:23,929
applicable to the monitor object pattern
and conditionobjects in general.

152
00:08:25,560 --> 00:08:29,530
Assume thread T1 calls take to remove the
first element in a

153
00:08:29,530 --> 00:08:34,250
new instance of arrayblockingqueue, which
will block, since the queue is empty.

154
00:08:35,510 --> 00:08:39,460
When take is called, it acquires the
reentrantlock, if no other thread

155
00:08:39,460 --> 00:08:43,700
owns it, and starts to run in the monitor
objects critical section.

156
00:08:43,700 --> 00:08:47,792
Where it will determine that the count is
zero and so must wait on the not

157
00:08:47,792 --> 00:08:51,080
empty conditionobject, which atomically
releases a lock and

158
00:08:51,080 --> 00:08:53,465
puts thread T1 to sleep on the
conditionobject.

159
00:08:54,540 --> 00:08:56,650
Assume now that the second thread, T2
creates

160
00:08:56,650 --> 00:08:59,487
a new string and calls put on the
arrayblockingqueue.

161
00:09:00,732 --> 00:09:05,300
Since T1 released a lock when it went to
sleep on the not empty conditionobject,

162
00:09:05,300 --> 00:09:10,378
when thread T2 calls put, it acquires a
lock and runs in the monitor object.

163
00:09:10,378 --> 00:09:13,510
Where it determines the queue isn't full,
and this

164
00:09:13,510 --> 00:09:16,210
we'll call insert, which adds the new
element to the

165
00:09:16,210 --> 00:09:19,135
tail of the items array and signals the
not empty

166
00:09:19,135 --> 00:09:22,740
conditionobject to indicate that the queue
is no longer empty.

167
00:09:23,970 --> 00:09:26,560
When insert returns, the put method
releases

168
00:09:26,560 --> 00:09:30,090
a lock and leaves the monitors critical
section.

169
00:09:30,090 --> 00:09:34,065
At this point, thread T1 is reawakened
from its wait on the not empty

170
00:09:34,065 --> 00:09:37,710
conditionobject in take method, acquires a
lock

171
00:09:37,710 --> 00:09:40,040
and continues running in the take method.

172
00:09:40,040 --> 00:09:44,610
Where it determines that the queue is no
longer empty and calls the extract method.

173
00:09:46,080 --> 00:09:48,730
Extract removes the head element, in the
items

174
00:09:48,730 --> 00:09:52,655
array, signals any threads waiting on the
not full

175
00:09:52,655 --> 00:09:56,510
conditionobject to indicate the queue is
no longer full,

176
00:09:56,510 --> 00:09:59,520
and returns the element back to the take
method.

177
00:09:59,520 --> 00:10:02,480
Which then releases a lock and leaves the
monitor object.

178
00:10:02,480 --> 00:10:06,069
[MUSIC].

179
00:10:09,830 --> 00:10:13,990
In summary, a Java conditionobject
provides a flexible synchronization

180
00:10:13,990 --> 00:10:16,900
and scheduling mechanism that allows a
thread to suspend

181
00:10:16,900 --> 00:10:20,460
its execution until it's notified by
another thread that

182
00:10:20,460 --> 00:10:23,060
some shared state it's waiting on may now
be true.

183
00:10:24,330 --> 00:10:27,570
Unlike built-in Java monitor objects,
which can only have one

184
00:10:27,570 --> 00:10:32,702
wait queue, a user-defined Java object can
create multiple conditionobjects.

185
00:10:32,702 --> 00:10:36,115
A conditionobject is always used in
conjunction with a lock, such as a

186
00:10:36,115 --> 00:10:38,010
reentrantlock, to ensure state share by

187
00:10:38,010 --> 00:10:40,190
multiple threads is protected from race
conditions.

188
00:10:41,260 --> 00:10:43,556
A conditionobject supports several type of
wait

189
00:10:43,556 --> 00:10:47,570
operations, including interruptible,
non-interruptible, and timed waits.

190
00:10:48,600 --> 00:10:51,560
A call to wait should almost always be
invoked inside of a

191
00:10:51,560 --> 00:10:56,360
loop that tests for the condition being
waited on, for several reasons.

192
00:10:56,360 --> 00:11:01,120
First, a loop is needed since a waiting
thread can't assume that

193
00:11:01,120 --> 00:11:04,900
a notification it received was for the
particular state condition it's waiting

194
00:11:04,900 --> 00:11:09,410
on, or that the condition is still true,
due to the non-deterministic

195
00:11:09,410 --> 00:11:11,562
operations of other threads accessing a

196
00:11:11,562 --> 00:11:14,460
conditionobject concurrently, as describe
at this link.

197
00:11:16,110 --> 00:11:20,200
Second, it needs to guard against spurious
wake ups, that occur due

198
00:11:20,200 --> 00:11:24,600
to quirks of multi-processor or multi-core
systems, as described at this link.

199
00:11:26,302 --> 00:11:30,700
Although conditionobjects aren't used much
in Android application software, they are

200
00:11:30,700 --> 00:11:33,510
used in the underlying
Java.util.concurrent

201
00:11:33,510 --> 00:11:35,740
package, shown at this path name,

202
00:11:35,740 --> 00:11:37,060
unless they're used by extension

203
00:11:37,060 --> 00:11:39,612
in Android's concurrency frameworks, which
use

204
00:11:39,612 --> 00:11:44,060
Java.util.concurrent heavily, as we'll
cover in the next module in this section.

205
00:11:44,060 --> 00:11:53,009
[MUSIC]

