1
00:00:00,000 --> 00:00:08,156
[MUSIC]

2
00:00:08,156 --> 00:00:10,471
Welcome to the next part of the module on

3
00:00:10,471 --> 00:00:14,860
Android services and security which covers
the Android IntentService.

4
00:00:14,860 --> 00:00:16,730
In this part, we'll explain how the

5
00:00:16,730 --> 00:00:19,900
Android IntentService provides a framework
for programming

6
00:00:19,900 --> 00:00:22,998
started services that can currently
process commands

7
00:00:22,998 --> 00:00:25,909
expressed as Intents, as described in this
link.

8
00:00:27,200 --> 00:00:30,030
We'll start by summarizing how the Android
IntentService

9
00:00:30,030 --> 00:00:33,710
codifies a common idiom for concurrent
event processing.

10
00:00:33,710 --> 00:00:36,680
Although we present this idiom in the
context of the download

11
00:00:36,680 --> 00:00:38,910
service implementation discussed in the
previous

12
00:00:38,910 --> 00:00:41,459
video, it's actually used throughout
Android.

13
00:00:42,840 --> 00:00:45,710
This idiom involves two classes and
several methods.

14
00:00:46,900 --> 00:00:48,990
The first step in the idiom involves

15
00:00:48,990 --> 00:00:51,660
overriding the onCreate hook method
defined by a

16
00:00:51,660 --> 00:00:54,660
service, which creates and starts a
Handler

17
00:00:54,660 --> 00:00:58,390
Thread that processes Intent commands in
the background.

18
00:00:58,390 --> 00:01:01,690
And then gives the handle threads looper
to an instance of

19
00:01:01,690 --> 00:01:05,520
a service handler, so it will handle
messages in a background thread.

20
00:01:06,850 --> 00:01:10,561
The second step in this idiom involves
overriding the onStart

21
00:01:10,561 --> 00:01:14,380
Command method to create a message, that
encapsulates the Intent

22
00:01:14,380 --> 00:01:18,390
parameter and the idea of the start
request and passes

23
00:01:18,390 --> 00:01:21,290
it to the service handler by calling it
Send Message method.

24
00:01:22,670 --> 00:01:26,200
The third step in the idiom involves
overwriting the handleMessage

25
00:01:26,200 --> 00:01:29,970
hook method in the service handler
subclass to process the

26
00:01:29,970 --> 00:01:34,680
message containing the Intent, which in
this case involves downloading

27
00:01:34,680 --> 00:01:38,370
the image, storing it in a local file on
the device.

28
00:01:38,370 --> 00:01:40,940
And returning the path name to the
activity

29
00:01:40,940 --> 00:01:42,480
so it can be displayed to the user.

30
00:01:44,160 --> 00:01:46,740
After the processing is finished the
service shuts

31
00:01:46,740 --> 00:01:49,040
itself down via a call to stop self.

32
00:01:50,160 --> 00:01:54,558
This idiom appears in a number of Android
packed applications, including

33
00:01:54,558 --> 00:01:58,482
the calender and mms sms applications as
show in these path names.

34
00:01:58,482 --> 00:02:05,102
[MUSIC]

35
00:02:05,102 --> 00:02:09,350
Now that we've analyzed Android's idiom
for concurrent processing of Intents,

36
00:02:09,350 --> 00:02:13,580
we'll show how this idiom is codified by
the Android IntentService.

37
00:02:13,580 --> 00:02:17,010
Which is a subclass of service that
provides a started service

38
00:02:17,010 --> 00:02:20,220
framework for concurrently processing
asynchronous commands

39
00:02:20,220 --> 00:02:22,620
expressed as Intents as shown here.

40
00:02:23,840 --> 00:02:26,360
The IntentService framework is easy to use

41
00:02:26,360 --> 00:02:30,060
since subclasses simply override its
onHandleIntent hook

42
00:02:30,060 --> 00:02:32,600
method and provide the logic for
processing

43
00:02:32,600 --> 00:02:34,410
an Intent in a single background thread.

44
00:02:35,570 --> 00:02:39,490
The typical use case for the IntentService
is also straightforward.

45
00:02:39,490 --> 00:02:41,760
As we'll show using a variant of

46
00:02:41,760 --> 00:02:44,210
the download service shown in the previous
video.

47
00:02:45,850 --> 00:02:48,950
In the download application example, a
client sends

48
00:02:48,950 --> 00:02:52,280
intent via calls to the start service
method.

49
00:02:52,280 --> 00:02:55,135
Data, and even objects, can be passed
through the

50
00:02:55,135 --> 00:02:58,460
IntentService, by putting extras into the
Intents, which is

51
00:02:58,460 --> 00:03:02,070
used throughout Android to exchange
information between activities or

52
00:03:02,070 --> 00:03:04,490
between an activity and a service as shown
here.

53
00:03:05,750 --> 00:03:09,670
The IntentService is started on-demand via
the Activatior pattern,

54
00:03:09,670 --> 00:03:14,320
which efficiently and transparently
launches services on-demand as shown here.

55
00:03:15,550 --> 00:03:18,770
Subclasses of the IntentService implement
the onHandleIntent

56
00:03:18,770 --> 00:03:21,420
hook method, to process the Intent sent

57
00:03:21,420 --> 00:03:23,710
by the client concurrently in a background

58
00:03:23,710 --> 00:03:26,950
threat by automatically performing the
steps outlined here.

59
00:03:28,300 --> 00:03:32,548
For example, the onHandleIntent hook
method for the download service

60
00:03:32,548 --> 00:03:35,807
simply calls downloadImageAndReply to
concurrently

61
00:03:35,807 --> 00:03:38,073
retrieve the requested image, store

62
00:03:38,073 --> 00:03:40,334
it in a file in the device, and pass the

63
00:03:40,334 --> 00:03:45,107
path name back to the download activity
that originally called startService.

64
00:03:45,107 --> 00:03:51,777
[MUSIC]

65
00:03:51,777 --> 00:03:55,998
The IntentService implementation applies
the idiom described earlier in this

66
00:03:55,998 --> 00:03:59,340
video, as shown by the code at this path
name.

67
00:03:59,340 --> 00:04:02,485
In particular, its onCreate hook method
creates a

68
00:04:02,485 --> 00:04:06,409
ServiceHandler which internally spawns a
single background Handler Thread.

69
00:04:07,672 --> 00:04:09,905
Its onStart command hook method calls the

70
00:04:09,905 --> 00:04:13,340
ServiceHandler's send message method to
enqueue each intent

71
00:04:13,340 --> 00:04:16,220
received from clients into the message
queue managed

72
00:04:16,220 --> 00:04:18,064
by the Handler Thread running in the
background.

73
00:04:18,064 --> 00:04:21,940
The ServiceHandler's handle message hook
method then

74
00:04:21,940 --> 00:04:24,190
receives the message containing the Intent
in

75
00:04:24,190 --> 00:04:27,085
the Handler Thread and dispatches the
overwritten

76
00:04:27,085 --> 00:04:31,130
onHandleIntent hook method, to process the
Intent.

77
00:04:31,130 --> 00:04:33,280
Thereby ensuring, that long range

78
00:04:33,280 --> 00:04:36,640
processing doesn't block the
user-interface thread.

79
00:04:36,640 --> 00:04:38,700
The only and singleIntent is processed at
a

80
00:04:38,700 --> 00:04:40,699
time by the one and only background
thread.

81
00:04:41,778 --> 00:04:45,090
Finally the IntentService stops itself
automatically when

82
00:04:45,090 --> 00:04:47,380
there are no more Intents to process.

83
00:04:47,380 --> 00:04:50,375
In contrast a regular service must stop
itself

84
00:04:50,375 --> 00:04:54,539
manually by calling the stopSelf method
and application code.

85
00:04:54,539 --> 00:05:01,770
[MUSIC]

86
00:05:01,770 --> 00:05:05,874
Now that we've summarized the structure
and the functionality of the IntentService

87
00:05:05,874 --> 00:05:08,496
framework, we'll analyze its
implementation based

88
00:05:08,496 --> 00:05:10,912
on the code at this path name.

89
00:05:10,912 --> 00:05:15,000
The IntentService class extends the
service super class and overrides several

90
00:05:15,000 --> 00:05:17,060
hook methods to process asynchronous

91
00:05:17,060 --> 00:05:20,170
requests expressed as IntentCommands on
demand.

92
00:05:21,380 --> 00:05:23,870
The IntentService class also defines
Looper

93
00:05:23,870 --> 00:05:26,860
mServiceHandler objects as volatile data
members

94
00:05:26,860 --> 00:05:30,680
to ensure that they are visible to the
background handler's thread, when a

95
00:05:30,680 --> 00:05:33,110
client calls the start service method,

96
00:05:33,110 --> 00:05:36,370
the android service framework launches the
IntentService

97
00:05:36,370 --> 00:05:41,540
and evokes its onCreate Hook method, which
creates and then starts a thread.

98
00:05:41,540 --> 00:05:43,580
To process the Intent concurrently in the

99
00:05:43,580 --> 00:05:46,710
background using the handle thread class
covered here.

100
00:05:48,245 --> 00:05:50,340
onCreate then passes the handle threads to

101
00:05:50,340 --> 00:05:53,150
looper, to the constructor of service
handler.

102
00:05:53,150 --> 00:05:57,290
So it's handle message hook method will be
dispatched in the context of that thread.

103
00:05:58,860 --> 00:06:03,410
Each time an Intent is sent to the intent
service by the start service method.

104
00:06:03,410 --> 00:06:07,330
The Android service framework invokes its
onStart command hook method, which

105
00:06:07,330 --> 00:06:11,610
in turn invokes the OnStart Helper method
that forwards the intent

106
00:06:11,610 --> 00:06:15,720
to the ServiceHandler by creating a
message containing the intent and

107
00:06:15,720 --> 00:06:19,800
the start ID to guide subsequent
processing and shut down behavior.

108
00:06:21,070 --> 00:06:24,430
Finally, onStart calls the
ServiceHandler's send

109
00:06:24,430 --> 00:06:26,650
message method to pass the intent

110
00:06:26,650 --> 00:06:30,599
and start ID to the background Handler
Thread using the hammer framework.

111
00:06:31,850 --> 00:06:34,280
Since service handler extends handler,
it's

112
00:06:34,280 --> 00:06:36,080
handle message hook method runs in the

113
00:06:36,080 --> 00:06:40,765
context of the Handler Thread and receives
messages passed to it via sendMessage.

114
00:06:42,240 --> 00:06:44,780
Handler message dispatches the
onHandleIntent

115
00:06:44,780 --> 00:06:46,490
hook method which must be over

116
00:06:46,490 --> 00:06:50,400
ridden by sub classes of IntentService, to
process the intent concurrently.

117
00:06:51,470 --> 00:06:55,280
Only one intent is processed at a time,
but the processing happens

118
00:06:55,280 --> 00:06:56,910
in the Handler Thread, that runs

119
00:06:56,910 --> 00:07:00,190
concurrently with respect to other
application logic.

120
00:07:00,190 --> 00:07:03,970
Therefore, if this hook method runs for a
long time, it will hold up

121
00:07:03,970 --> 00:07:06,140
other requests with the same intent
service,

122
00:07:06,140 --> 00:07:07,489
but will not hold up anything else.

123
00:07:08,820 --> 00:07:13,156
When I handleIntent returns, the stopSelf
method is automatically called to

124
00:07:13,156 --> 00:07:17,908
stop the IntentService, using the shutdown
idiom presented in the previous video.

125
00:07:17,908 --> 00:07:23,078
After the IntentService stops itself,
Android service framework invokes it's on

126
00:07:23,078 --> 00:07:28,116
destroy hook method which quits the looper
and then shuts down the handle thread.

127
00:07:28,116 --> 00:07:35,399
[MUSIC]

128
00:07:35,399 --> 00:07:38,401
In summary, the Android IntentService
provides the

129
00:07:38,401 --> 00:07:41,080
framework to codifies a common Android
idiom.

130
00:07:42,360 --> 00:07:46,420
It creates a Handler Thread that processes
Intent commands in the background.

131
00:07:46,420 --> 00:07:51,790
Likewise, it uses the hammer framework to
dispatch calls to the onHandleIntent hook

132
00:07:51,790 --> 00:07:54,870
method, which performs application defined
processing of

133
00:07:54,870 --> 00:07:56,689
the intent parameter passed through this
method.

134
00:07:58,192 --> 00:08:02,039
The IntentService is designed for started
services that only need to

135
00:08:02,039 --> 00:08:05,780
process a singleIntent request at a time
and a background thread.

136
00:08:05,780 --> 00:08:09,620
If additional concurrency is needed, then
other solutions are available.

137
00:08:09,620 --> 00:08:10,642
As we'll discuss later.

138
00:08:10,642 --> 00:08:16,100
The IntentService is a classic application
of the command processor pattern, which

139
00:08:16,100 --> 00:08:19,010
packages a piece of application
functionality

140
00:08:19,010 --> 00:08:20,510
as well as it's parameterization of

141
00:08:20,510 --> 00:08:24,450
an object to execute it in another
context, which in this case

142
00:08:24,450 --> 00:08:28,700
is a different process or a different
thread, as covered in upcoming videos.

143
00:08:30,260 --> 00:08:33,050
If you compare the Android implementation
of the IntentService

144
00:08:33,050 --> 00:08:36,130
with a download service implementation in
the previous videos

145
00:08:36,130 --> 00:08:38,930
or with the open source Android calendar
and mms

146
00:08:38,930 --> 00:08:41,490
sms applications, you'll get a sense of
deja vu.

147
00:08:41,490 --> 00:08:45,690
Since they're very similar, which shows
how frameworks often evolve

148
00:08:45,690 --> 00:08:48,320
organically by refactoring common idioms

149
00:08:48,320 --> 00:08:50,680
and patterns into reusable software
components.

150
00:08:51,792 --> 00:08:54,350
The IntentService itself is also used
heavily

151
00:08:54,350 --> 00:08:56,710
in Android's packaged applications, as
shown here.

152
00:08:57,880 --> 00:09:01,370
Additional information on the Android
IntentService appears at this link.

