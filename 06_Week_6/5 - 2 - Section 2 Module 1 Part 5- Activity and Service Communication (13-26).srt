1
00:00:00,102 --> 00:00:08,221
[MUSIC]

2
00:00:08,221 --> 00:00:10,158
Welcome to the next part of the module

3
00:00:10,158 --> 00:00:13,783
on services and local interprocess
communication mechanisms which

4
00:00:13,783 --> 00:00:16,595
focuses on the mechanisms and frameworks
provided by

5
00:00:16,595 --> 00:00:20,239
Android to enable communication between
activities and services.

6
00:00:21,420 --> 00:00:25,320
In this part, we'll discuss how activities
can communicate to services as well

7
00:00:25,320 --> 00:00:26,910
as how services can reply back

8
00:00:26,910 --> 00:00:29,310
to activities that initiate communication
with them.

9
00:00:30,640 --> 00:00:31,920
In addition to describing these

10
00:00:31,920 --> 00:00:34,700
mechanisms, we'll also outline common
patterns

11
00:00:34,700 --> 00:00:36,480
Android uses to implement frameworks

12
00:00:36,480 --> 00:00:38,579
that support activity and service
communication.

13
00:00:39,860 --> 00:00:41,770
Before covering these communication
mechanisms in

14
00:00:41,770 --> 00:00:44,270
frameworks, we'll first delve deeper into
the

15
00:00:44,270 --> 00:00:48,870
deployment model of started and bound
services, which can be configured to run

16
00:00:48,870 --> 00:00:53,390
in the same process or in different
processes than their clients based on

17
00:00:53,390 --> 00:00:57,880
the process element setting in an Android
manifest XML file, as shown here.

18
00:00:58,960 --> 00:01:01,440
By default, services run in the same

19
00:01:01,440 --> 00:01:03,590
process as other components in an
application.

20
00:01:04,890 --> 00:01:07,590
To deploy a service in a separate process,
the

21
00:01:07,590 --> 00:01:10,170
process element must be added to the
Android manifest file.

22
00:01:11,870 --> 00:01:14,120
Although running activities and services
in the same

23
00:01:14,120 --> 00:01:16,660
process is the most common deployment
model for

24
00:01:16,660 --> 00:01:19,780
Android applications, there are several
reasons for running

25
00:01:19,780 --> 00:01:22,700
a service in its own process, as discussed
here.

26
00:01:24,020 --> 00:01:26,410
For example, a service must run in its

27
00:01:26,410 --> 00:01:30,100
own process if it's shared by multiple
applications, which

28
00:01:30,100 --> 00:01:32,110
is why the Android Bluetooth service runs
in

29
00:01:32,110 --> 00:01:34,620
a separate process as shown at this path
name.

30
00:01:35,760 --> 00:01:37,776
Likewise, if a service running in its

31
00:01:37,776 --> 00:01:40,422
own process memory address space fails or
hangs,

32
00:01:40,422 --> 00:01:42,249
the applications that use it may be

33
00:01:42,249 --> 00:01:45,970
more robust, assuming they're programmed
defensively of course.

34
00:01:47,220 --> 00:01:50,215
Moreover, if garbage collection occurs in
the virtual machine

35
00:01:50,215 --> 00:01:52,321
of a service running in its own process,
that

36
00:01:52,321 --> 00:01:54,927
won't affect other parts of the
application running in

37
00:01:54,927 --> 00:01:58,050
other processes which may make the
application more responsive.

38
00:02:00,040 --> 00:02:03,120
When a service runs in a different process
than the activity, then

39
00:02:03,120 --> 00:02:06,320
they need some form of inner process
communication mechanism to exchange data.

40
00:02:07,630 --> 00:02:11,438
Android implements these IPC mechanisms
using the binder framework covered

41
00:02:11,438 --> 00:02:16,870
here which supports two-way or one-way
client service communication models that

42
00:02:16,870 --> 00:02:20,850
could be programmed via interfaces,
generated from stubs by the Android

43
00:02:20,850 --> 00:02:23,500
Interface Definition Language compiler, or

44
00:02:23,500 --> 00:02:25,660
via messages passed using messenger
objects.

45
00:02:26,990 --> 00:02:30,276
Depending on the type of communication
mechanism you

46
00:02:30,276 --> 00:02:34,366
use by activities and services some
modifications to application

47
00:02:34,366 --> 00:02:37,213
code may be needed to exchange objects and
data

48
00:02:37,213 --> 00:02:41,462
correctly across processes as we'll show
throughout this module.

49
00:02:41,462 --> 00:02:46,613
[MUSIC]

50
00:02:46,613 --> 00:02:49,211
Android provides several mechanisms that
activities

51
00:02:49,211 --> 00:02:52,680
can use to initiate communications with
services.

52
00:02:52,680 --> 00:02:54,970
Selecting the right mechanism depends on

53
00:02:54,970 --> 00:02:57,522
various factors, such as whether the
service

54
00:02:57,522 --> 00:03:00,337
is started or bound, whether a
message-oriented

55
00:03:00,337 --> 00:03:03,627
or method-oriented programming model is
desired, etc.

56
00:03:03,627 --> 00:03:07,903
A simple way an activity can communicate
to a started service is by

57
00:03:07,903 --> 00:03:10,392
passing an intent command to the start

58
00:03:10,392 --> 00:03:13,440
service method, as shown in earlier
videos.

59
00:03:13,440 --> 00:03:16,293
Parameters can be added as extras to the
intent and then

60
00:03:16,293 --> 00:03:20,459
extracted by the started service and used
to guide its subsequent processing.

61
00:03:22,280 --> 00:03:24,430
Two different mechanisms can be used to
communicate with

62
00:03:24,430 --> 00:03:27,990
bound services, after first connecting to
them by calling

63
00:03:27,990 --> 00:03:31,545
BindService and receiving a binder object
from the service's

64
00:03:31,545 --> 00:03:34,570
on-bind hook methods, as shown in an
earlier video.

65
00:03:36,240 --> 00:03:37,430
The first of these communication

66
00:03:37,430 --> 00:03:40,460
mechanisms involves message passing by
calling

67
00:03:40,460 --> 00:03:43,639
send on a reference to an Android
messenger that's covered here.

68
00:03:45,090 --> 00:03:49,030
A messenger is a generalization of the
hammer framework, discussed here,

69
00:03:49,030 --> 00:03:52,390
that encapsulates a reference to a handler
implemented within a service.

70
00:03:53,860 --> 00:03:58,740
An activity uses this reference to pass
messages to the service's handler, even if

71
00:03:58,740 --> 00:04:02,970
it's configured to run in a different
process, as shown in an upcoming video.

72
00:04:04,480 --> 00:04:05,940
The other mechanism for communicating with

73
00:04:05,940 --> 00:04:08,240
bound services involves invoking methods
on

74
00:04:08,240 --> 00:04:10,750
stubs generated by the Android Interface

75
00:04:10,750 --> 00:04:12,870
Definition Language Compiler that's shown
here.

76
00:04:14,360 --> 00:04:16,868
These AIDL method calls can be programmed
to

77
00:04:16,868 --> 00:04:21,414
implement various behaviors, such as
two-way synchronous request response

78
00:04:21,414 --> 00:04:26,232
interactions, two-way asynchronous request
response interactions, or purely

79
00:04:26,232 --> 00:04:29,453
one-way method calls, as shown in an
upcoming video.

80
00:04:29,453 --> 00:04:32,048
[BLANK_AUDIO]

81
00:04:32,048 --> 00:04:36,814
[MUSIC]

82
00:04:36,814 --> 00:04:40,114
Android also provides several mechanisms
that services can use

83
00:04:40,114 --> 00:04:43,670
to reply back to activities that initiate
communication with them.

84
00:04:44,770 --> 00:04:48,040
The activity initiating the communication
typically dictates the reply

85
00:04:48,040 --> 00:04:50,620
mechanism based on information it passes
to the service.

86
00:04:52,130 --> 00:04:53,880
A simple way to communicate from a service

87
00:04:53,880 --> 00:04:57,050
back to an activity involves the messenger
mechanism

88
00:04:57,050 --> 00:05:00,270
covered here, and discussed earlier in
this video

89
00:05:00,270 --> 00:05:03,010
in the context of activity to service
communication.

90
00:05:04,280 --> 00:05:05,780
When used for service to activity

91
00:05:05,780 --> 00:05:09,110
communication, the activity creates a
messenger that

92
00:05:09,110 --> 00:05:11,560
encapsulates a reference to a handler
implemented

93
00:05:11,560 --> 00:05:13,750
within the activity and then gives the

94
00:05:13,750 --> 00:05:18,330
service a reference to the messenger via
the appropriate means, such as adding

95
00:05:18,330 --> 00:05:22,030
it as an extra to the intent command,
passed to the start service method.

96
00:05:23,830 --> 00:05:26,530
The service then extracts the reference to
this messenger, and

97
00:05:26,530 --> 00:05:29,750
uses it to send a reply back to the
activity,

98
00:05:29,750 --> 00:05:32,860
which is delivered to the activity's reply
handler, via its

99
00:05:32,860 --> 00:05:36,110
handle message hook method, as shown in an
upcoming video.

100
00:05:38,020 --> 00:05:41,950
Another common service to activity
communication mechanism involves the use

101
00:05:41,950 --> 00:05:45,990
of callback objects based on the Android
Interface Definitional Language,

102
00:05:45,990 --> 00:05:49,230
or AIDL, which can be passed from the
activity to

103
00:05:49,230 --> 00:05:54,040
the service via a one-way AIDL method call
as covered here.

104
00:05:54,040 --> 00:05:56,301
In this approach the service simply
invokes

105
00:05:56,301 --> 00:05:59,310
the appropriate one-way AIDL method on the
callback

106
00:05:59,310 --> 00:06:04,457
object to return its reply back to the
activity as shown in an upcoming video.

107
00:06:06,030 --> 00:06:09,550
A variant to this approach uses a two-way
AIDL method

108
00:06:09,550 --> 00:06:12,890
called from the activity on the service
which implicitly returns a

109
00:06:12,890 --> 00:06:16,490
reply from the service back to the
activity when the up

110
00:06:16,490 --> 00:06:19,402
call from the stub to the two-way method
implementation is done.

111
00:06:19,402 --> 00:06:22,630
Although two-way method calls seem
convenient to

112
00:06:22,630 --> 00:06:26,608
program, they're actually rather
problematic, since they

113
00:06:26,608 --> 00:06:30,060
execute synchronously, which can block the
activity

114
00:06:30,060 --> 00:06:34,202
and trigger the dreaded application not
responding exception.

115
00:06:34,202 --> 00:06:39,252
[MUSIC]

116
00:06:39,252 --> 00:06:44,021
Android's frameworks and applications of
these frameworks are designed,

117
00:06:44,021 --> 00:06:49,425
implemented, and integrated in accordance
with many POSA and Gang of Four patterns.

118
00:06:49,425 --> 00:06:51,080
We summarized key patterns using its

119
00:06:51,080 --> 00:06:53,710
concurrency frameworks in an earlier
video.

120
00:06:53,710 --> 00:06:55,540
We now summarize key patterns using

121
00:06:55,540 --> 00:06:58,540
its communication and service frameworks,
focusing first

122
00:06:58,540 --> 00:07:03,510
on a pattern Android uses to launch both
started or bound service on demand.

123
00:07:03,510 --> 00:07:06,150
In particular the activator pattern
automates the

124
00:07:06,150 --> 00:07:10,670
scalable, on-demand activation and
deactivation of service execution

125
00:07:10,670 --> 00:07:13,530
context to run services accessed by
multiple

126
00:07:13,530 --> 00:07:17,740
clients without consuming resources
unnecessarily as shown here.

127
00:07:19,280 --> 00:07:21,250
Android's activity manager service applies
this

128
00:07:21,250 --> 00:07:23,560
pattern to launch started and bound
services

129
00:07:23,560 --> 00:07:25,590
in response to clients that invoke the

130
00:07:25,590 --> 00:07:28,680
start service and bind service methods,
respectively.

131
00:07:30,130 --> 00:07:34,120
In addition to launching services, the
activity manager service also applies the

132
00:07:34,120 --> 00:07:38,790
activator pattern to launch other Android
components, such as activities and

133
00:07:38,790 --> 00:07:45,784
broadcast receivers on demand as shown in
the code at this

134
00:07:45,784 --> 00:07:50,660
path name.

135
00:07:50,660 --> 00:07:52,980
Android applies a set of patterns that
guide the design

136
00:07:52,980 --> 00:07:56,730
of its mechanisms for passing messages
between activities and started services.

137
00:07:57,890 --> 00:08:02,130
In particular, the command processor
pattern packages a piece of application

138
00:08:02,130 --> 00:08:06,620
functionality as well as its
parameterization in an object, to execute

139
00:08:06,620 --> 00:08:09,920
it in another context, such as a later
point in time,

140
00:08:09,920 --> 00:08:13,544
in a different process or in a different
thread, as covered here.

141
00:08:13,544 --> 00:08:16,430
Android applies this pattern in its
intense service

142
00:08:16,430 --> 00:08:20,480
framework which processes asynchronous
commands, expresses intents in

143
00:08:20,480 --> 00:08:22,730
a background thread so they don't block
the

144
00:08:22,730 --> 00:08:24,910
main thread as shown in this earlier
video.

145
00:08:26,040 --> 00:08:27,808
The active object pattern defines the
units of

146
00:08:27,808 --> 00:08:31,340
concurrency on a component to be requests
for service.

147
00:08:31,340 --> 00:08:34,070
These service requests are processed in a
different thread then

148
00:08:34,070 --> 00:08:37,130
the client threat that invoked the
request, as covered here.

149
00:08:38,390 --> 00:08:41,790
Android applies this pattern via its
messenger mechanism which

150
00:08:41,790 --> 00:08:44,930
it generalizes the hammer frameworks to
send message and

151
00:08:44,930 --> 00:08:48,820
handle message methods to communicate
between activities and services

152
00:08:48,820 --> 00:08:52,500
even across process boundaries, as shown
in this upcoming video.

153
00:08:54,168 --> 00:08:59,331
When these message-passing mechanisms are
used to communicate between activities and

154
00:08:59,331 --> 00:09:02,635
services, running and different processes,
they're

155
00:09:02,635 --> 00:09:06,299
implemented internally using Android's
binder framework.

156
00:09:06,299 --> 00:09:11,720
[MUSIC]

157
00:09:11,720 --> 00:09:13,981
Android applies the command processor and
active

158
00:09:13,981 --> 00:09:16,296
object patterns discussed in the previous
segment

159
00:09:16,296 --> 00:09:17,963
to guide the design of its mechanisms

160
00:09:17,963 --> 00:09:20,840
that pass messages between activities and
started services.

161
00:09:21,860 --> 00:09:23,540
It applies a different set of mechanisms
and

162
00:09:23,540 --> 00:09:27,920
patterns to enable communication between
activities and bound services.

163
00:09:27,920 --> 00:09:31,570
In particular, the Broker pattern connects
clients with

164
00:09:31,570 --> 00:09:35,070
objects in a separate process by mediating
invocations from

165
00:09:35,070 --> 00:09:38,100
clients to these objects while
encapsulating the details

166
00:09:38,100 --> 00:09:41,939
that the underlying interprocess
communication mechanisms, as covered here.

167
00:09:43,420 --> 00:09:45,400
Android applies this pattern to support

168
00:09:45,400 --> 00:09:49,340
method calls between activities and bound
services

169
00:09:49,340 --> 00:09:51,180
running in the same or in different

170
00:09:51,180 --> 00:09:53,680
processes, as shown in this upcoming
video.

171
00:09:55,180 --> 00:09:57,820
Broker is actually a pattern language that
applies

172
00:09:57,820 --> 00:09:59,770
many other Gang of Four and POSA patterns.

173
00:10:00,820 --> 00:10:04,860
One pattern in the Broker pattern language
is the proxy pattern, which provides a

174
00:10:04,860 --> 00:10:11,590
circuit or place holder for another object
to control access to it, as covered here.

175
00:10:11,590 --> 00:10:15,200
Android's binder framework uses this
pattern to guide the implementation of

176
00:10:15,200 --> 00:10:20,020
the stub code generated by the Android
Interface Definition Language compiler.

177
00:10:20,020 --> 00:10:21,830
When parameters are passed from an
activity

178
00:10:21,830 --> 00:10:23,940
to a service and back across process

179
00:10:23,940 --> 00:10:28,660
boundaries, these stubs automate
martialing and demartialing,

180
00:10:28,660 --> 00:10:32,000
which decomposes parameter objects passed
to the methods

181
00:10:32,000 --> 00:10:34,210
into primitive data that the operating
system

182
00:10:34,210 --> 00:10:37,150
can understand and then recomposes the
data into

183
00:10:37,150 --> 00:10:42,200
objects on the receiver, as discussed at
this link and shown in an upcoming video.

184
00:10:43,620 --> 00:10:48,170
We explore these patterns and their
application to Android

185
00:10:48,170 --> 00:10:51,725
in more detail in a later section of this
MOOC.

186
00:10:51,725 --> 00:10:56,243
[MUSIC]

187
00:10:56,243 --> 00:11:00,819
In summary, Android provides a range of
mechanisms that enable activities

188
00:11:00,819 --> 00:11:03,178
and services to communicate within the

189
00:11:03,178 --> 00:11:05,980
same process or across different
processes.

190
00:11:07,030 --> 00:11:09,565
This part of the module summarized
mechanism for passing

191
00:11:09,565 --> 00:11:13,190
intent commands and messages between
activities and services, as

192
00:11:13,190 --> 00:11:17,020
well as invoking method calls
synchronously or asynchronously between

193
00:11:17,020 --> 00:11:20,500
activities and services using the Android
Interface Definition Language.

194
00:11:21,580 --> 00:11:24,870
When activities and services reside in
different processes, these

195
00:11:24,870 --> 00:11:27,980
mechanisms use the Android Binder
framework to communicate efficiently.

196
00:11:29,260 --> 00:11:33,690
These communication mechanisms also apply
various Gang of Four and POSA patterns.

197
00:11:33,690 --> 00:11:36,610
For example, programs based on the intent
service

198
00:11:36,610 --> 00:11:40,320
apply the command processor pattern,
programs based on messengers

199
00:11:40,320 --> 00:11:43,150
apply the active object pattern, and
programs based on

200
00:11:43,150 --> 00:11:46,260
the Android Interface Definition Language
apply the Broker pattern.

201
00:11:47,570 --> 00:11:50,880
Passing intent command via startService or
bindService is an

202
00:11:50,880 --> 00:11:53,770
easy way to communicate from an activity
to a service,

203
00:11:53,770 --> 00:11:56,500
though this approach is limited, since it
doesn't enable the

204
00:11:56,500 --> 00:11:59,408
service to pass an intent reply back to
the activity.

205
00:11:59,408 --> 00:12:04,000
When such two-way communication between
activities and services is

206
00:12:04,000 --> 00:12:09,150
needed, Android Messengers are easy to use
for simple interactions,

207
00:12:09,150 --> 00:12:11,860
since there's no need to define a separate
Android

208
00:12:11,860 --> 00:12:16,710
Interface Definition Language interface,
extend stubs and override hook methods.

209
00:12:17,900 --> 00:12:20,260
Messengers are often used to send replies
to a

210
00:12:20,260 --> 00:12:23,720
started service back to an activity that
initiated it.

211
00:12:23,720 --> 00:12:28,190
However, messengers are harder to use when
applications perform more sophisticated

212
00:12:28,190 --> 00:12:31,710
communication interactions involving
complex data types,

213
00:12:31,710 --> 00:12:34,110
especially when messages cross process
boundaries.

214
00:12:35,250 --> 00:12:39,560
In these cases invoking methods via the
stubs generated by the

215
00:12:39,560 --> 00:12:42,200
Android Interface Definition Language
compiler is

216
00:12:42,200 --> 00:12:44,700
often more efficient and effective, since

217
00:12:44,700 --> 00:12:47,900
these generated stubs automatically
perform marshaling,

218
00:12:47,900 --> 00:12:50,880
and demarshaling, and shield application
programmers

219
00:12:50,880 --> 00:12:53,090
from tedious and error prone details

220
00:12:53,090 --> 00:12:55,420
of passing messages across process
boundaries.

221
00:12:56,520 --> 00:13:00,890
However, the explicit use of the Android
Interface Definition Language cause

222
00:13:00,890 --> 00:13:04,700
services to process method calls
concurrently in a pool of Threads.

223
00:13:04,700 --> 00:13:07,070
So objects referenced by these Threads
must be

224
00:13:07,070 --> 00:13:11,430
protected from raised conditions by the
appropriate synchronizers.

225
00:13:11,430 --> 00:13:15,930
In contrast, messengers don't require any
particular concurrency model.

226
00:13:15,930 --> 00:13:18,044
[BLANK_AUDIO]

227
00:13:18,044 --> 00:13:25,779
[MUSIC]

