1
00:00:00,000 --> 00:00:05,020
[MUSIC].

2
00:00:05,020 --> 00:00:05,700
Welcome

3
00:00:08,620 --> 00:00:10,920
to the next part of the introduction
section

4
00:00:10,920 --> 00:00:13,680
which provides an overview of Patterns and
Frameworks.

5
00:00:13,680 --> 00:00:17,170
In this part, we will explain what
Patterns and Frameworks are

6
00:00:17,170 --> 00:00:19,920
and describe why they are essential for
programming mobile device software.

7
00:00:21,190 --> 00:00:23,350
Patterns and Frameworks are important
techniques, tools and

8
00:00:23,350 --> 00:00:26,700
methods for leveraging proven design and
implementation experience

9
00:00:26,700 --> 00:00:29,540
to enhance key software quality attributes
such as

10
00:00:29,540 --> 00:00:35,880
modularity, flexibility and extensibility,
reusability, performance and resilience.

11
00:00:35,880 --> 00:00:38,970
Before we discuss these topics in the
context of Android, we'll

12
00:00:38,970 --> 00:00:42,440
first consider how experience is leveraged
in other domains beyond software.

13
00:00:43,840 --> 00:00:47,900
Experts in most domains perform quite
differently than novices.

14
00:00:47,900 --> 00:00:52,400
For example, professional athletes,
musicians, and dancers move fluidly and

15
00:00:52,400 --> 00:00:56,870
effortlessly without focusing on each
individual movement as novices do.

16
00:00:58,080 --> 00:01:01,860
When watching experts perform however,
it's easy to forget how much

17
00:01:01,860 --> 00:01:05,316
effort and experience was needed to reach
their high levels of achievement.

18
00:01:05,316 --> 00:01:10,560
Moreover, continuous repetition, practice
and mentoring

19
00:01:10,560 --> 00:01:12,840
from experts was crucial to their success.

20
00:01:14,120 --> 00:01:16,900
At the heart of all these activities is
knowledge and mastery of

21
00:01:16,900 --> 00:01:19,140
patterns which are reasonable solutions to

22
00:01:19,140 --> 00:01:22,890
common problems that arise in particular
context.

23
00:01:22,890 --> 00:01:25,900
Naturally the context in this MOOC is
generally

24
00:01:25,900 --> 00:01:28,180
the domain of mobile software development
with Android.

25
00:01:29,410 --> 00:01:31,290
While knowledge of patterns provides
essential

26
00:01:31,290 --> 00:01:33,880
design and architecture guidance, it also

27
00:01:33,880 --> 00:01:36,460
helps to have implementation guidance
which

28
00:01:36,460 --> 00:01:38,440
motivates the need for software
frameworks.

29
00:01:39,800 --> 00:01:43,450
A framework is an integrated set of
components that collaborate to

30
00:01:43,450 --> 00:01:45,470
provide a reasonable architecture for a

31
00:01:45,470 --> 00:01:48,520
family of related applications or
services.

32
00:01:48,520 --> 00:01:51,000
Patterns and frameworks are highly
synergistic.

33
00:01:51,000 --> 00:01:54,300
For example, frameworks can be viewed as
concrete realisations of

34
00:01:54,300 --> 00:01:58,730
patterns that facilitate direct reuse of
detail design and source code.

35
00:01:58,730 --> 00:02:01,790
Likewise, patterns can be viewed as
abstract descriptions of

36
00:02:01,790 --> 00:02:05,020
frameworks that facilitate reuse of
software architecture and design.

37
00:02:06,380 --> 00:02:09,870
Patterns are generally described in
programming language independent ways

38
00:02:09,870 --> 00:02:11,290
whereas frameworks are generally
implemented

39
00:02:11,290 --> 00:02:12,630
in a particular programming language.

40
00:02:13,750 --> 00:02:16,770
Android applies many patterns to implement
its Java concurrency

41
00:02:16,770 --> 00:02:19,622
and communication frameworks, some of
which we'll outline next.

42
00:02:19,622 --> 00:02:26,564
[MUSIC]

43
00:02:26,564 --> 00:02:31,360
As outlined earlier, patterns leverage
proven software design and

44
00:02:31,360 --> 00:02:33,590
programming expertise to provide
reasonable

45
00:02:33,590 --> 00:02:35,440
solutions to common problems within

46
00:02:35,440 --> 00:02:39,740
various contexts such as the domains of
mobile devices, aerospace,

47
00:02:39,740 --> 00:02:44,110
avionics and automotive systems,
e-commerce, electronic trading and so on.

48
00:02:45,270 --> 00:02:48,490
Patterns allow developers in these domains
to resolve key software quality

49
00:02:48,490 --> 00:02:50,380
attribute forces such as need for

50
00:02:50,380 --> 00:02:53,960
modularity, flexibility and extensibility,
and reusability.

51
00:02:55,060 --> 00:02:57,260
These software quality attributes must be
balanced and

52
00:02:57,260 --> 00:02:59,920
traded off against other forces such as a
need

53
00:02:59,920 --> 00:03:02,500
to reduce end to end latency, or ensure
resilient

54
00:03:02,500 --> 00:03:05,880
execution even in the face of failures or
cyberattacks.

55
00:03:07,600 --> 00:03:10,250
Knowledge of patterns helps developers
navigate more effectively

56
00:03:10,250 --> 00:03:12,860
through the tradeoffs of these domains and
design spaces.

57
00:03:13,860 --> 00:03:17,560
Patterns also capture recurring structures
and dynamics among software

58
00:03:17,560 --> 00:03:19,870
elements thereby enabling reuse of

59
00:03:19,870 --> 00:03:23,210
successful designs and implementation
techniques.

60
00:03:23,210 --> 00:03:26,410
For example, observer is a common pattern
that defines

61
00:03:26,410 --> 00:03:29,360
a one-to-many dependency between objects
so that when one

62
00:03:29,360 --> 00:03:31,880
object changes, other objects that depend
on it are

63
00:03:31,880 --> 00:03:34,930
automatically notified and updated as
described at this link.

64
00:03:36,060 --> 00:03:38,200
This diagram depicts the canonical
structure of

65
00:03:38,200 --> 00:03:41,520
the observer pattern which has a subject
that's

66
00:03:41,520 --> 00:03:44,260
associated with an abstract observer base
class

67
00:03:44,260 --> 00:03:47,160
which in turn, is subclassed by concrete
observers.

68
00:03:48,690 --> 00:03:51,330
These concrete observers override the
update method in

69
00:03:51,330 --> 00:03:56,481
the abstract observer class to define
application-specified behaviors.

70
00:03:56,481 --> 00:03:59,190
The subject maintains a collection of
observers

71
00:03:59,190 --> 00:04:01,700
that can be attached or detached by
applications.

72
00:04:02,820 --> 00:04:06,620
When a state change occurs, the subject is
notified which causes

73
00:04:06,620 --> 00:04:10,350
to iterate through all it's attached
observers and invoke their update method.

74
00:04:11,970 --> 00:04:14,840
These call backs should run quickly to
avoid starving

75
00:04:14,840 --> 00:04:18,020
other observers and preventing them from
doing their processing.

76
00:04:20,310 --> 00:04:22,390
The observer pattern can be implemented
and applied in

77
00:04:22,390 --> 00:04:25,720
many different ways, in different
languages both object joined

78
00:04:25,720 --> 00:04:28,640
and non object jointed, on different
platforms, with different

79
00:04:28,640 --> 00:04:33,060
data structures and different domains by
different vendors, etc.

80
00:04:33,060 --> 00:04:34,790
Regardless of these different
implementation

81
00:04:34,790 --> 00:04:37,280
details, the underlying patterns roles

82
00:04:37,280 --> 00:04:39,190
and responsibilities are essentially the

83
00:04:39,190 --> 00:04:42,369
same thereby reusing valuable design
knowledge.

84
00:04:43,650 --> 00:04:47,320
Historically, software developers learn
these types of design and programming

85
00:04:47,320 --> 00:04:49,010
techniques, tools, and methods by

86
00:04:49,010 --> 00:04:51,710
working alongside experienced developers,
as apprentices.

87
00:04:53,030 --> 00:04:54,400
Although these mentoring relationships are

88
00:04:54,400 --> 00:04:57,470
valuable, they're also labor-intensive,
and rely

89
00:04:57,470 --> 00:04:59,850
heavily on identifying and motivating

90
00:04:59,850 --> 00:05:02,720
experienced developers to serve as
mentors.

91
00:05:02,720 --> 00:05:06,510
Likewise, they're also risky since a
mentor may decide to change

92
00:05:06,510 --> 00:05:09,660
jobs or get hit by a bus as described at
this link.

93
00:05:11,462 --> 00:05:14,190
Patterns often address these risks by
codifying expert

94
00:05:14,190 --> 00:05:17,980
knowledge of time proven design strategies
and best practices.

95
00:05:17,980 --> 00:05:20,075
So the developers need to learn them
solely

96
00:05:20,075 --> 00:05:22,779
through human mentors or tedious trial and
error.

97
00:05:24,620 --> 00:05:27,020
Android implements dozens of patterns that
guide the

98
00:05:27,020 --> 00:05:30,120
design and implementation of its
mechanisms for event multiplexing

99
00:05:30,120 --> 00:05:34,570
and dispatching, interface and component
partitioning and interaction, application

100
00:05:34,570 --> 00:05:38,240
control, resource and database management,
and concurrency and synchronization.

101
00:05:38,240 --> 00:05:41,520
This MOOC devotes several modules

102
00:05:41,520 --> 00:05:44,310
to Android concurrency and communication
patterns.

103
00:05:44,310 --> 00:05:47,200
Additional information about patterns
appears at this link.

104
00:05:47,200 --> 00:05:54,780
[MUSIC].

105
00:05:54,780 --> 00:05:57,250
Knowledge of patterns codifies experience
and

106
00:05:57,250 --> 00:05:59,640
guides the design and architectures
decisions which

107
00:05:59,640 --> 00:06:03,530
is essential for developing and sustaining
quality software on time and on budget.

108
00:06:04,560 --> 00:06:07,170
But design and architecture alone is
insufficient for

109
00:06:07,170 --> 00:06:11,850
many software professionals who also
benefit from implementation guidance.

110
00:06:11,850 --> 00:06:14,300
To address this need, frameworks provide a

111
00:06:14,300 --> 00:06:17,230
powerful and complimentary means to
redefine software

112
00:06:17,230 --> 00:06:20,440
experience and patterns and tangible code
artifacts

113
00:06:20,440 --> 00:06:23,050
that help improve developer productivity
and quality.

114
00:06:24,260 --> 00:06:27,400
A framework that is an integrated set of
components that collaborate to

115
00:06:27,400 --> 00:06:29,480
provide a reasonable architecture for a

116
00:06:29,480 --> 00:06:31,530
family of related applications or
services.

117
00:06:32,700 --> 00:06:37,360
There are several defining characteristics
of Frameworks as described in this link.

118
00:06:37,360 --> 00:06:41,980
First, they provide inversion of control
also known as the Hollywood principle.

119
00:06:43,160 --> 00:06:47,350
Rather than having an application be self
directed doing what it wants,

120
00:06:47,350 --> 00:06:51,220
when and how it wants, a Framework owns
the main application event loop.

121
00:06:52,390 --> 00:06:55,980
Applications register event handler
objects with the framework.

122
00:06:55,980 --> 00:06:58,325
What events occur that an application is
indicated

123
00:06:58,325 --> 00:07:01,500
[INAUDIBLE] in, the framework is
responsible for detecting what's

124
00:07:01,500 --> 00:07:05,100
happened and then demultiplexing and
dispatching the events, to

125
00:07:05,100 --> 00:07:08,010
hook methods defined in the registered
application event handles.

126
00:07:09,390 --> 00:07:11,170
A hook method is a specified point

127
00:07:11,170 --> 00:07:13,710
in a framework based program where
developers can

128
00:07:13,710 --> 00:07:17,000
customize generic framework components
with call backs that

129
00:07:17,000 --> 00:07:19,889
the framework invokes through an
application specific logic.

130
00:07:21,730 --> 00:07:25,120
The second defining characteristic of
frameworks is their support for domain

131
00:07:25,120 --> 00:07:28,030
specific structures and functionality
which allows

132
00:07:28,030 --> 00:07:29,820
the framework to perform many common

133
00:07:29,820 --> 00:07:32,510
interactions, guide the canonical flow of

134
00:07:32,510 --> 00:07:36,440
control and enforce key architectural
constraints

135
00:07:36,440 --> 00:07:39,520
so developers needn't rediscover,
reimplement, and

136
00:07:39,520 --> 00:07:41,480
redebug them for each new application.

137
00:07:43,010 --> 00:07:46,150
Some domains supported by frameworks are
application domains

138
00:07:46,150 --> 00:07:49,770
such as social media, mobile applications,
or electronic trading.

139
00:07:51,190 --> 00:07:54,550
Other domains supported by frameworks are
infrastructure domains such as

140
00:07:54,550 --> 00:07:57,064
graphical user interfaces, communication
middle

141
00:07:57,064 --> 00:07:58,620
ware and persistent database storage.

142
00:07:59,750 --> 00:08:01,930
The third defining characteristic of
frameworks

143
00:08:01,930 --> 00:08:04,360
is their support for semi-complete
applications or

144
00:08:04,360 --> 00:08:07,360
portions of applications where the
framework provides

145
00:08:07,360 --> 00:08:09,640
most of the canonical structure and
behavior

146
00:08:09,640 --> 00:08:11,310
in the form of reusable interfaces and

147
00:08:11,310 --> 00:08:14,880
classes and developers simply implement
hook methods

148
00:08:14,880 --> 00:08:16,980
that customize and tailor the generic
framework

149
00:08:16,980 --> 00:08:19,959
components for application or server
specific needs.

150
00:08:22,050 --> 00:08:23,570
Android provides many frameworks that

151
00:08:23,570 --> 00:08:26,670
manage activities, event notifications
persistent

152
00:08:26,670 --> 00:08:31,610
content interact with the user and the
radio and application installation.

153
00:08:31,610 --> 00:08:33,040
This MOOC devotes several modules

154
00:08:33,040 --> 00:08:35,830
to Android concurrency and communication
frameworks.

155
00:08:35,830 --> 00:08:38,720
Additional information about frameworks
appears at this

156
00:08:42,740 --> 00:08:43,960
link.

157
00:08:43,960 --> 00:08:47,070
[MUSIC]

158
00:08:47,070 --> 00:08:48,900
While the overview of patterns and
frameworks

159
00:08:48,900 --> 00:08:51,470
in the previous two videos, summarized
their essential

160
00:08:51,470 --> 00:08:55,940
characteristics, the presentation was
intentionally high-level, and

161
00:08:55,940 --> 00:08:58,280
only touched briefly on their relevance to
Android.

162
00:08:59,790 --> 00:09:04,020
To make the discussion more concrete,
we'll now outline several applications of

163
00:09:04,020 --> 00:09:09,820
patterns and frameworks in the observer
pattern, outlines earlier in this video.

164
00:09:09,820 --> 00:09:12,520
Which has been used successfully in many
domains.

165
00:09:14,140 --> 00:09:16,650
Android applies this pattern extensively.

166
00:09:16,650 --> 00:09:18,820
For example, it's content provider and
resolver

167
00:09:18,820 --> 00:09:21,780
framework applies this pattern to
automatically notify

168
00:09:21,780 --> 00:09:24,150
content observers when rows in an SQL

169
00:09:24,150 --> 00:09:26,900
lite database changes as described at this
link.

170
00:09:28,440 --> 00:09:32,390
This diagram shows the UML notation that
maps classes in a content

171
00:09:32,390 --> 00:09:36,430
observer based design to keep roles and
responsibilities of the observer pattern.

172
00:09:37,450 --> 00:09:39,940
For example, the Android desk clock
application uses

173
00:09:39,940 --> 00:09:43,080
the observer pattern to monitor user
display preferences

174
00:09:43,080 --> 00:09:46,820
such as the use of 12 hour versus 24 hour
time as shown in this path name.

175
00:09:48,030 --> 00:09:50,410
The Android Content Observable plays the
role

176
00:09:50,410 --> 00:09:52,730
of the Subject in the Observer pattern.

177
00:09:52,730 --> 00:09:57,670
Likewise, the Content Observer plays the
Abstract Observer role in the pattern,

178
00:09:57,670 --> 00:10:01,059
and the FormatChange Observer plays the
Concrete Observer role in the pattern.

179
00:10:03,040 --> 00:10:05,030
>> Android also uses the observer pattern
in

180
00:10:05,030 --> 00:10:08,230
its intents framework, which is a powerful
mechanism

181
00:10:08,230 --> 00:10:12,180
that activates and notifies activity,
service and broadcast

182
00:10:12,180 --> 00:10:15,359
receiver components asynchronously, as
described at this link.

183
00:10:16,710 --> 00:10:19,710
This email diagram maps the key
programming elements in the intense

184
00:10:19,710 --> 00:10:23,770
framework to the observer pattern also
using the desk top application.

185
00:10:24,840 --> 00:10:27,940
For example, broadcast receiver is an
abstract observer that's

186
00:10:27,940 --> 00:10:30,720
extended by the desk clock application to
create an alarm

187
00:10:30,720 --> 00:10:34,110
receiver that connects an alarm alert
intent receiver to

188
00:10:34,110 --> 00:10:37,240
an alarm alert activity as shown at this
path name.

189
00:10:38,800 --> 00:10:42,250
The Android Context object plays the role
of the subject which

190
00:10:42,250 --> 00:10:46,070
notifies the registered alarm receiver
when an alarm alert event occurs.

191
00:10:48,100 --> 00:10:50,510
Knowing that Android applies the Observer
pattern helps

192
00:10:50,510 --> 00:10:54,020
application developers better understand
how these 2 different frameworks

193
00:10:54,020 --> 00:10:57,020
behave and how to use them effectively
since

194
00:10:57,020 --> 00:10:59,670
it reduces the surface area of the design
space.

195
00:11:01,380 --> 00:11:03,270
Both these applications of the observer
pattern in

196
00:11:03,270 --> 00:11:06,920
the Android also demonstrate key framework
characteristics such as

197
00:11:06,920 --> 00:11:10,685
inversion of control, domain specific
structure and functionality, and

198
00:11:10,685 --> 00:11:14,710
semi-complete portions of applications, as
discussed in the previous

199
00:11:16,950 --> 00:11:17,480
video.

200
00:11:17,480 --> 00:11:18,459
[MUSIC].

201
00:11:22,290 --> 00:11:25,910
In summary, patterns and frameworks are
important techniques,

202
00:11:25,910 --> 00:11:29,410
tools, and methods for developing and
sustaining quality software.

203
00:11:29,410 --> 00:11:31,610
In particular, they enhance systematic

204
00:11:31,610 --> 00:11:34,020
software reuse by intentionally creating
or

205
00:11:34,020 --> 00:11:38,610
acquiring reusable assets and then
consistently using and evolving them to

206
00:11:38,610 --> 00:11:42,300
obtain a high degree of reuse thereby
optimizing the ability to

207
00:11:42,300 --> 00:11:46,680
produce quality software products rapidly
and effectively as described at this link.

208
00:11:48,030 --> 00:11:50,740
If you program professionally, you may be
familiar with the

209
00:11:50,740 --> 00:11:54,860
concept of opportunistic reuse which
involves ad hoc cutting and

210
00:11:54,860 --> 00:11:57,550
pasting of existing code when building a
new piece of

211
00:11:57,550 --> 00:12:00,240
software to avoid having to write it all
from scratch.

212
00:12:01,455 --> 00:12:05,840
While opportunistic reuse is popular, it
yields many code forks that

213
00:12:05,840 --> 00:12:07,740
are frustratingly hard to evolve and

214
00:12:07,740 --> 00:12:10,190
sustain correctly and consistently over
time.

215
00:12:11,410 --> 00:12:15,560
In contrast, systematic resuse is a more
rigorous method that

216
00:12:15,560 --> 00:12:19,480
applies patterns and frameworks to reuse
design and code artifacts.

217
00:12:20,680 --> 00:12:22,640
Design re-use matches problems to the
relevent

218
00:12:22,640 --> 00:12:25,410
solution structures and dynamics in a
particular domain.

219
00:12:26,470 --> 00:12:28,730
Code re-use reifies proven designs

220
00:12:28,730 --> 00:12:32,170
within particular development environments
and platforms.

221
00:12:32,170 --> 00:12:35,880
Together, reuse of designs via patterns,
and code via

222
00:12:35,880 --> 00:12:40,110
frameworks avoids rediscovering and
rewriting solutions to many software

223
00:12:40,110 --> 00:12:43,600
development problems, which saves time and
money as well

224
00:12:43,600 --> 00:12:46,620
as produces better quality products over
the software life cycle.

225
00:12:48,190 --> 00:12:51,870
We could devote an entire MOOC to discuss
all the nuances and aspects

226
00:12:51,870 --> 00:12:55,880
of patterns and frameworks since they are
very powerful and deep technical topics.

227
00:12:56,968 --> 00:13:01,220
However, this MOOC focuses on Android, so
we just covered the

228
00:13:01,220 --> 00:13:03,529
sub set of pattern and framework topics
that pertain to it.

229
00:13:04,630 --> 00:13:09,740
For broader and deeper coverage of these
topics, see the 2013 POSA MOOC archives

230
00:13:09,740 --> 00:13:11,690
which have many more hours of videos

231
00:13:11,690 --> 00:13:15,330
on pattern relationships, such as pattern
compounds, pattern

232
00:13:15,330 --> 00:13:20,110
complements, pattern sequences and pattern
languages, much more extensive coverage

233
00:13:20,110 --> 00:13:23,980
of frameworks that implement pattern
languages as well as more background

234
00:13:23,980 --> 00:13:30,381
material on concurrency and communication,
and the operating

235
00:13:30,381 --> 00:13:34,856
system and middleware layers.

236
00:13:34,856 --> 00:13:39,019
[MUSIC]

