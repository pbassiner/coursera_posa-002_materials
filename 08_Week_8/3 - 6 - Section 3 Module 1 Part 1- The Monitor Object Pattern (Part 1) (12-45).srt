1
00:00:00,138 --> 00:00:08,310
[MUSIC]

2
00:00:08,310 --> 00:00:10,199
Welcome to the next part of the module,

3
00:00:10,199 --> 00:00:12,605
which begins our discussion of the monitor
object

4
00:00:12,605 --> 00:00:15,010
pattern that forms the basis for many
concurrency

5
00:00:15,010 --> 00:00:18,990
libraries, applications and services in
Java and Android.

6
00:00:18,990 --> 00:00:21,010
This part first summarizes the challenges

7
00:00:21,010 --> 00:00:23,370
that the monitor object pattern addresses
and

8
00:00:23,370 --> 00:00:27,410
then describes its intent, applicability,
structure, dynamics,

9
00:00:27,410 --> 00:00:30,810
consequences and outlines some common
known uses.

10
00:00:30,810 --> 00:00:34,289
Based on material from the posted to book
and summarized at this link.

11
00:00:35,680 --> 00:00:39,130
To motivate the need for this pattern and
to introduce an example that

12
00:00:39,130 --> 00:00:40,390
we'll use throughout our discussion of

13
00:00:40,390 --> 00:00:43,380
this pattern, we generalize from several
examples

14
00:00:43,380 --> 00:00:44,730
covered in previous parts of this

15
00:00:44,730 --> 00:00:48,390
module, where concurrent applications and
services need

16
00:00:48,390 --> 00:00:51,200
to coordinate the interactions of multiple
producer

17
00:00:51,200 --> 00:00:53,510
and consumer threads via a shared queue.

18
00:00:53,510 --> 00:00:57,460
A common problem in this type of software
is

19
00:00:57,460 --> 00:01:00,010
that naive implementations of a shared
queue will incur

20
00:01:00,010 --> 00:01:03,680
race conditions or busy waiting, when
multiple threads put

21
00:01:03,680 --> 00:01:06,890
and take items in to and from the queue.

22
00:01:06,890 --> 00:01:08,860
For example, concurrent threads can
corrupt the

23
00:01:08,860 --> 00:01:12,500
queues internal state, if it's not
synchronized properly.

24
00:01:12,500 --> 00:01:15,230
Likewise, threads will incur busy waiting
when the

25
00:01:15,230 --> 00:01:18,950
queue is empty or full, which wastes CPU
cycles.

26
00:01:18,950 --> 00:01:22,420
A common solution to these problems is to
apply the monitor object pattern to

27
00:01:22,420 --> 00:01:24,220
synchronize the shared queue in a manner

28
00:01:24,220 --> 00:01:26,910
that's efficient and relatively easy to
program.

29
00:01:28,040 --> 00:01:30,960
Earlier parts of this module have shown
implementations of the monitor object

30
00:01:30,960 --> 00:01:35,690
pattern in the video on Java condition
objects and Java built-in monitor objects.

31
00:01:35,690 --> 00:01:38,519
This part expands upon this earlier
coverage to examine

32
00:01:38,519 --> 00:01:42,660
the pattern more comprehensively using the
Java-linked blocking queue.

33
00:01:42,660 --> 00:01:45,450
Described at this link as a running
example to

34
00:01:45,450 --> 00:01:47,950
make the discussion of the monitor object
pattern more concrete.

35
00:01:49,130 --> 00:01:51,290
Link blocking queue is similar to the
array

36
00:01:51,290 --> 00:01:53,710
blocking queue we examined in this earlier
video.

37
00:01:55,060 --> 00:01:59,737
A detailed comparison of the performance
differences between link

38
00:01:59,737 --> 00:02:04,009
blocking queue and array blocking queue
appear at this link.

39
00:02:04,009 --> 00:02:05,576
[MUSIC]

40
00:02:05,576 --> 00:02:11,119
As correctly inefficient, the monitor
object pattern appears in the POSA2 book.

41
00:02:12,250 --> 00:02:15,470
The intent of this pattern is to
synchronize concurrent method execution

42
00:02:15,470 --> 00:02:18,880
to ensure that only method at a time runs
within an object.

43
00:02:19,950 --> 00:02:21,430
It also allows an object's methods

44
00:02:21,430 --> 00:02:23,790
to cooperatively schedule their execution
sequence.

45
00:02:25,310 --> 00:02:28,040
This pattern is applicable under several
conditions.

46
00:02:28,040 --> 00:02:30,680
For example, it's often the case that an
object's

47
00:02:30,680 --> 00:02:33,909
interface methods can define its
scheduling and synchronization boundaries.

48
00:02:35,200 --> 00:02:40,380
To separate concerns and protect object
state from uncontrolled changes, object

49
00:02:40,380 --> 00:02:42,670
oriented programmers are accustomed to
accessing

50
00:02:42,670 --> 00:02:44,670
objects only through their interface
methods.

51
00:02:46,100 --> 00:02:48,690
It's straight forward to extend this
object oriented programming

52
00:02:48,690 --> 00:02:52,800
model to protect an objects data from
uncontrolled concurrent changes.

53
00:02:54,228 --> 00:02:56,970
Concurrent software is often easier to
program with only

54
00:02:56,970 --> 00:02:59,329
one method at a time is active within an
object.

55
00:03:00,420 --> 00:03:05,060
Likewise, concurrent software's also often
easier to program when clients

56
00:03:05,060 --> 00:03:08,580
aren't responsible for serializing method
execution in an object since

57
00:03:08,580 --> 00:03:12,620
it's tedious and error-prone to explicitly
acquire and release low-level

58
00:03:12,620 --> 00:03:16,820
synchronization and scheduling mechanisms,
such as locks and condition variables.

59
00:03:18,080 --> 00:03:20,330
Finally, an object's methods may need

60
00:03:20,330 --> 00:03:23,130
to interact cooperatively during their
execution.

61
00:03:23,130 --> 00:03:24,670
For example, if one thread must block
awaiting a

62
00:03:24,670 --> 00:03:28,390
resource during its execution, it should
be able to relinquish

63
00:03:28,390 --> 00:03:31,670
its thread of control voluntarily, so
methods called from

64
00:03:31,670 --> 00:03:34,350
other threads can access the object to
update the resource.

65
00:03:35,490 --> 00:03:37,260
When a method relinquishes its thread of
control

66
00:03:37,260 --> 00:03:42,040
voluntarily, it must ensure that object
specific invariance hold.

67
00:03:42,040 --> 00:03:45,082
Likewise, it must resume executing within
an

68
00:03:45,082 --> 00:03:47,819
object only when it's in a stable state.

69
00:03:47,819 --> 00:03:52,703
[MUSIC]

70
00:03:52,703 --> 00:03:55,900
This diagram shows the structure of the
monitor object pattern.

71
00:03:56,920 --> 00:03:59,589
The monitor object class exports one or
more synchronize methods.

72
00:04:00,650 --> 00:04:03,080
To protect the internal state of the
monitor object from race

73
00:04:03,080 --> 00:04:07,360
conditions, all clients must access the
monitor object only through these methods.

74
00:04:08,630 --> 00:04:10,570
Each synchronized method typically
executes in the

75
00:04:10,570 --> 00:04:11,830
thread of the client that invokes it.

76
00:04:13,320 --> 00:04:16,200
Java's link blocking queue, described at
this link, is

77
00:04:16,200 --> 00:04:18,590
an example of a class implemented as a
monitor object.

78
00:04:19,650 --> 00:04:22,310
Each monitor object contains one or more
monitor locks.

79
00:04:22,310 --> 00:04:24,370
What you use to insure mutual exclusion of

80
00:04:24,370 --> 00:04:26,995
its synchronized methods on a per object
basis.

81
00:04:28,040 --> 00:04:30,040
Each synchronized method acquires and
releases

82
00:04:30,040 --> 00:04:32,110
a monitor lock while entering or exiting

83
00:04:32,110 --> 00:04:33,810
the monitor object, to ensure it's

84
00:04:33,810 --> 00:04:36,810
internal state is protected from race
conditions.

85
00:04:36,810 --> 00:04:39,260
For example, the link blocking queue
class,

86
00:04:39,260 --> 00:04:41,640
uses two Java reentrant locks, take lock
and

87
00:04:41,640 --> 00:04:44,100
put lock, as it's monitor locks protect
the

88
00:04:44,100 --> 00:04:46,190
current queue from corruption due to
concurrent access.

89
00:04:47,270 --> 00:04:49,760
Multiple synchronized methods running in
separate threads can

90
00:04:49,760 --> 00:04:53,080
cooperatively synchronize and schedule
their execution sequences by

91
00:04:53,080 --> 00:04:55,615
waiting for and notifying each other by
one

92
00:04:55,615 --> 00:04:58,289
or more monitor conditions associated with
the monitor object.

93
00:04:59,390 --> 00:05:02,760
Synchronized methods use a monitor lock in
conjunction with one of

94
00:05:02,760 --> 00:05:06,710
our monitor conditions to determine when
to suspend and resume their processing.

95
00:05:08,010 --> 00:05:11,779
For example, the link blocking queue class
uses two Java

96
00:05:11,779 --> 00:05:16,648
condition objects, not empty and not full,
as it's monitor conditions

97
00:05:16,648 --> 00:05:21,598
to coordinate producer and consumer
threads that attempt to take elements

98
00:05:21,598 --> 00:05:25,624
from or put elements to an empty or full
queue respectively.

99
00:05:25,624 --> 00:05:30,678
[MUSIC]

100
00:05:30,678 --> 00:05:32,787
This UML sequence diagram shows the
dynamic

101
00:05:32,787 --> 00:05:36,100
interactions between participants in the
monitor object pattern.

102
00:05:37,180 --> 00:05:40,070
When thread T1 invokes a synchronized
method on a monitor

103
00:05:40,070 --> 00:05:43,580
object, the method must first acquire the
object's monitor lock.

104
00:05:44,920 --> 00:05:47,730
A monitor lock can't be acquired as long
as another

105
00:05:47,730 --> 00:05:51,920
synchronized method in thread T2 is
executing within the monitor object.

106
00:05:51,920 --> 00:05:54,370
In this case, client thread T1 will

107
00:05:54,370 --> 00:05:56,530
lock until the synchronized method
acquires a lock.

108
00:05:57,980 --> 00:06:02,130
After the synchronized method called by T1
is finished executing, the monitor lock is

109
00:06:02,130 --> 00:06:05,110
released so that other synchronized
methods called

110
00:06:05,110 --> 00:06:07,050
by other threads can access the monitor
object.

111
00:06:08,370 --> 00:06:12,110
For example, if thread T1 calls the
synchronized take method on a

112
00:06:12,110 --> 00:06:16,120
linked blocking queue, it will block until
it can acquire the take lock.

113
00:06:17,680 --> 00:06:20,480
If synchronize method must block or
otherwise

114
00:06:20,480 --> 00:06:23,320
can't make immediate progress, it can wait

115
00:06:23,320 --> 00:06:25,880
on one of its monitored conditions,
causing

116
00:06:25,880 --> 00:06:27,859
it to leave the monitor object
temporarily.

117
00:06:29,090 --> 00:06:32,000
The monitor object implementation is
responsible for ensuring that the

118
00:06:32,000 --> 00:06:35,160
object is in a stable state, before
switching to another thread.

119
00:06:36,570 --> 00:06:39,890
When a synchronized method leaves the
monitor object, the client's thread is

120
00:06:39,890 --> 00:06:44,265
suspended on that monitor condition, and
the monitor lock is released atomically.

121
00:06:45,520 --> 00:06:47,800
Another synchronized method in another
thread

122
00:06:47,800 --> 00:06:50,108
can now execute within the monitor object.

123
00:06:50,108 --> 00:06:53,300
For example, if thread T1 calls a
synchronized take method on an

124
00:06:53,300 --> 00:06:56,920
empty link blocking queue, it will wait on
the not empty condition.

125
00:06:58,290 --> 00:07:02,430
A synchronized method can notify a monitor
condition, which awakens a thread

126
00:07:02,430 --> 00:07:06,850
of a synchronized method, that it
suspended itself on the monitor condition.

127
00:07:06,850 --> 00:07:09,570
For example, if thread T2 calls a
synchronized

128
00:07:09,570 --> 00:07:11,590
put method to add a new element to

129
00:07:11,590 --> 00:07:13,980
the link blocking queue, it will notify
the

130
00:07:13,980 --> 00:07:17,100
not empty condition object, which may
awaken thread T1.

131
00:07:18,640 --> 00:07:22,100
A synchronized method can also notify all
synchronized methods

132
00:07:22,100 --> 00:07:24,490
that suspended their thread earlier on the
monitor condition.

133
00:07:25,990 --> 00:07:29,810
In this case, all suspended threads are
awaken, and one of them

134
00:07:29,810 --> 00:07:33,559
at a time can acquire the monitor lock and
run within monitor object.

135
00:07:35,120 --> 00:07:38,780
After a suspended synchronized method is
notified, its execution can

136
00:07:38,780 --> 00:07:41,370
resume at the point where it waited on the
monitor condition.

137
00:07:42,970 --> 00:07:45,900
This resumption is typically performed
implicitly by

138
00:07:45,900 --> 00:07:49,280
having the monitor lock reacquired
atomically before

139
00:07:49,280 --> 00:07:51,910
the notified thread reenters the monitor
object

140
00:07:51,910 --> 00:07:54,459
and resumes execution of the synchronized
method.

141
00:07:55,510 --> 00:07:58,190
For example, when the not empty condition
object

142
00:07:58,190 --> 00:08:00,150
at thread T1 is waiting on is notified by

143
00:08:00,150 --> 00:08:03,990
thread T2, T1 will reacquire the take lock
and

144
00:08:03,990 --> 00:08:05,985
continue trying to take an element from
the queue.

145
00:08:07,610 --> 00:08:12,384
Due to the non-deterministic nature of
concurrency, however, thread

146
00:08:12,384 --> 00:08:15,156
T1 may or may not actually add an element
to

147
00:08:15,156 --> 00:08:17,774
the queue, which is why calls to wait on a

148
00:08:17,774 --> 00:08:22,019
condition object should nearly always be
invoked within a loop.

149
00:08:22,019 --> 00:08:26,991
[MUSIC]

150
00:08:26,991 --> 00:08:28,838
The monitor object pattern provider two

151
00:08:28,838 --> 00:08:32,110
key benefits to developers of concurrent
software.

152
00:08:32,110 --> 00:08:34,310
First, it presents a concise programming
model

153
00:08:34,310 --> 00:08:37,290
for sharing an object among cooperating
threads.

154
00:08:37,290 --> 00:08:39,150
For example, concurrent access to a link

155
00:08:39,150 --> 00:08:43,200
blocking queue corresponds to conventional
method indications.

156
00:08:43,200 --> 00:08:46,715
Likewise, clients need not be concerned
with explicit

157
00:08:46,715 --> 00:08:49,900
serialization mechanisms when invoking
methods on a monitor object.

158
00:08:50,950 --> 00:08:53,150
A second benefit is that synchronized
method's

159
00:08:53,150 --> 00:08:55,360
can use their monitor conditions to
determine

160
00:08:55,360 --> 00:08:57,205
when a thread should suspend or resume

161
00:08:57,205 --> 00:09:00,740
its execution and that of collaborating
threads.

162
00:09:00,740 --> 00:09:03,460
For example, put and take methods on a
linked blocking

163
00:09:03,460 --> 00:09:07,300
queue can suspend themselves and a wait to
be notified when

164
00:09:07,300 --> 00:09:11,400
internal state changes occur without using
an efficient polling, which

165
00:09:11,400 --> 00:09:15,130
allows monitor objects to cooperatively
execute their methods in multiple threads.

166
00:09:16,600 --> 00:09:19,330
They're also several drawbacks to the
monitor object pattern however.

167
00:09:20,430 --> 00:09:25,442
One drawback occurs, when a single monitor
lock is used per monitor object, which

168
00:09:25,442 --> 00:09:29,050
limits scannability, due to the increased
contention,

169
00:09:29,050 --> 00:09:31,680
when multiple threads serialize on the
single lock.

170
00:09:33,150 --> 00:09:37,890
The link blocking queue class, shows one
way to improve scannability, by defining

171
00:09:37,890 --> 00:09:42,129
multiple monitor locks, as we'll examine
further, in the next part of this module.

172
00:09:44,010 --> 00:09:46,140
Another drawback involves the complicated

173
00:09:46,140 --> 00:09:48,830
extensibility semantics resulting from
tight

174
00:09:48,830 --> 00:09:50,660
coupling between a monitor object's

175
00:09:50,660 --> 00:09:53,890
functionality and its concurrency control
mechanisms,

176
00:09:53,890 --> 00:09:56,950
which makes it hard to change
synchronization in scheduling policies

177
00:09:56,950 --> 00:09:58,970
or mechanisms without modifying the

178
00:09:58,970 --> 00:10:01,380
implementations of a monitor object's
methods.

179
00:10:02,780 --> 00:10:05,692
This link contains more discussion of the

180
00:10:05,692 --> 00:10:09,692
inheritance anomaly problem related to
this drawback.

181
00:10:09,692 --> 00:10:14,692
[MUSIC]

182
00:10:14,692 --> 00:10:18,040
There are many known uses of the monitor
object pattern.

183
00:10:18,040 --> 00:10:20,060
Originating with the Dijkstra and
Hoare-style

184
00:10:20,060 --> 00:10:22,850
monitors that define programming language
features to

185
00:10:22,850 --> 00:10:25,955
encapsulate functions and their internal
variables into

186
00:10:25,955 --> 00:10:28,760
thread-safe modules, as described at this
link.

187
00:10:30,390 --> 00:10:33,330
Java built-in monitor objects are based on
a subset

188
00:10:33,330 --> 00:10:36,550
of the Dijkstra Hoare-style monitors as
described at this link.

189
00:10:38,060 --> 00:10:41,830
Any Java object can be used as a monitor
object that contains a single monitor

190
00:10:41,830 --> 00:10:44,460
lock and a single monitor condition as

191
00:10:44,460 --> 00:10:46,500
described in the previous video in this
module.

192
00:10:48,260 --> 00:10:51,150
Java monitor objects are convenient for
simple use cases

193
00:10:51,150 --> 00:10:54,280
because they allow threads to serialize
their execution implicitly via

194
00:10:54,280 --> 00:10:58,300
synchronized methods and coordinate their
activities via calls to wait,

195
00:10:58,300 --> 00:11:01,768
notify and notify all methods, defined on
all Java objects.

196
00:11:01,768 --> 00:11:04,760
Although Java built-in monitor objects are
not

197
00:11:04,760 --> 00:11:07,230
well suited for more sophisticated use
cases,

198
00:11:07,230 --> 00:11:09,090
such as the classes in Java util

199
00:11:09,090 --> 00:11:12,470
concurrent and Android's concurrency
frameworks, the monitor

200
00:11:12,470 --> 00:11:16,930
object pattern is still widely applied in
this code, as shown in our analysis

201
00:11:16,930 --> 00:11:21,345
of the link blocking queue class in part
two of the monitor object pattern video.

202
00:11:21,345 --> 00:11:24,780
C++ libraries also provide portable

203
00:11:24,780 --> 00:11:26,920
building blocks for implementing monitor
objects.

204
00:11:26,920 --> 00:11:30,035
For example, ACE provides many reusable
open source

205
00:11:30,035 --> 00:11:33,040
C++ wrapper facades for mutual exclusion,
or mutex

206
00:11:33,040 --> 00:11:35,520
locks and condition variables that are
portable to

207
00:11:35,520 --> 00:11:39,442
many operating system platforms, as
described at this link.

208
00:11:39,442 --> 00:11:44,735
Likewise C++11 specifies mutex locks and
condition variables that enable

209
00:11:44,735 --> 00:11:50,672
developers to write multi-threaded code in
a standard way, as described at this link.

210
00:11:50,672 --> 00:11:55,646
[MUSIC]

211
00:11:55,646 --> 00:11:59,014
In summary, concurrent software often
contains objects whose

212
00:11:59,014 --> 00:12:02,390
methods are invoked concurrently by
multiple client threads.

213
00:12:03,790 --> 00:12:06,160
To protect the internal state of objects
shared by multiple

214
00:12:06,160 --> 00:12:10,160
threads, it's necessary to synchronize and
schedule access to them.

215
00:12:11,620 --> 00:12:14,580
To simplify programming, it's often
helpful if the

216
00:12:14,580 --> 00:12:16,880
interface and object exposes to its
clients is the

217
00:12:16,880 --> 00:12:19,750
same, regardless of whether the object is
shared by

218
00:12:19,750 --> 00:12:22,560
multiple threads or just accessed by a
single thread.

219
00:12:24,010 --> 00:12:26,901
The monitor object pattern provides an
intuitive

220
00:12:26,901 --> 00:12:30,136
programming model that enables client
threads to share

221
00:12:30,136 --> 00:12:33,372
objects and cooperatively ensure their
serialized yet

222
00:12:33,372 --> 00:12:37,041
interleaved execution sequence, as
described at this link.

223
00:12:37,041 --> 00:12:37,091
[MUSIC]

