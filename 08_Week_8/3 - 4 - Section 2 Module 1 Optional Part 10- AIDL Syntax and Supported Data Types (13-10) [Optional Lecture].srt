1
00:00:00,000 --> 00:00:07,964
[MUSIC]

2
00:00:07,964 --> 00:00:09,813
So welcome to the next class.

3
00:00:09,813 --> 00:00:11,779
What we're going to be covering today is a

4
00:00:11,779 --> 00:00:14,641
continuation of the discussion of the
Android Interface

5
00:00:14,641 --> 00:00:17,442
Definition Language, and we're going to
talk about some

6
00:00:17,442 --> 00:00:20,000
of the syntax and supported data types
first.

7
00:00:20,000 --> 00:00:24,200
And then we're going to go in some more
detail how you implement AIDL interfaces.

8
00:00:24,200 --> 00:00:26,470
Looking at the internals, what's generated
by

9
00:00:26,470 --> 00:00:28,590
the AIDL compiler, and then we'll look at

10
00:00:28,590 --> 00:00:31,320
some examples illustrating how to use AIDL
and

11
00:00:31,320 --> 00:00:35,790
the binder for both synchronous and
asynchronous communication.

12
00:00:35,790 --> 00:00:39,590
So first let's start by talking about the
supported data types.

13
00:00:39,590 --> 00:00:44,260
So we're going to discuss the syntax for
the Android interface definition language.

14
00:00:44,260 --> 00:00:46,810
And sort of the way in which it's, it
supports

15
00:00:46,810 --> 00:00:49,150
various kinds of data types that you
define in Java.

16
00:00:50,720 --> 00:00:54,380
So, AIDL allows application developers to
declare

17
00:00:54,380 --> 00:00:58,850
their business logic methods, using a
Java-like, syntax.

18
00:00:58,850 --> 00:01:01,480
So, the key thing here is Java-like.

19
00:01:01,480 --> 00:01:03,248
If you know Java interfaces,

20
00:01:03,248 --> 00:01:06,880
then understanding AIDL is very
straightforward.

21
00:01:06,880 --> 00:01:09,290
But be aware, as we'll see in a second,
that not everything that

22
00:01:09,290 --> 00:01:13,360
you get in a Java interface is going to
show up in AIDL.

23
00:01:13,360 --> 00:01:16,630
There's a number of restrictions, which
are good things to know.

24
00:01:16,630 --> 00:01:18,320
So here's a very simple example, this
comes

25
00:01:18,320 --> 00:01:20,320
out of the Android source code; there's
something in

26
00:01:20,320 --> 00:01:23,420
there called the, the drop box manager
service or

27
00:01:23,420 --> 00:01:26,483
the iDrop box manager service, I standing
for interface.

28
00:01:26,483 --> 00:01:28,580
And as you can see there you can go ahead

29
00:01:28,580 --> 00:01:32,250
and add an entry, which is a drop box
manager entry.

30
00:01:32,250 --> 00:01:34,490
And you can go ahead and then get the next
entry.

31
00:01:34,490 --> 00:01:37,430
You could iterate through this thing one
thing at a time

32
00:01:37,430 --> 00:01:39,670
getting back the entries that are in a
drop box entry.

33
00:01:39,670 --> 00:01:41,740
So you can imagine that, that's probably
used

34
00:01:41,740 --> 00:01:44,330
internally by Android to allow you to
access your

35
00:01:44,330 --> 00:01:47,600
drop box content from your Android phone
which is

36
00:01:47,600 --> 00:01:49,950
a very useful thing to be able to do.

37
00:01:49,950 --> 00:01:53,410
So here are things that are similar with,
with the Java interfaces.

38
00:01:53,410 --> 00:01:56,450
So if you know Java then you know that
it's possible to define

39
00:01:56,450 --> 00:02:02,720
interfaces to have methods that have typed
parameters and optionally a return value.

40
00:02:02,720 --> 00:02:05,270
You could also have a void to not return
anything but

41
00:02:05,270 --> 00:02:07,990
it's common to have a return value of some
kind as well.

42
00:02:09,140 --> 00:02:15,110
So, pretty much everything you know about
Java interfaces will apply to AIDL.

43
00:02:15,110 --> 00:02:16,750
With a few key exceptions.

44
00:02:16,750 --> 00:02:17,900
So here are some of the differences.

45
00:02:17,900 --> 00:02:21,250
You cannot define any static fields in
AIDL

46
00:02:21,250 --> 00:02:24,119
interfaces, whereas you can do that in
Java interfaces.

47
00:02:25,190 --> 00:02:29,420
Any non primitive parameters, in other
words things

48
00:02:29,420 --> 00:02:32,740
that aren't in float, double, things like
that.

49
00:02:32,740 --> 00:02:34,880
They have to be defined indicating the

50
00:02:34,880 --> 00:02:38,020
direction in which the parameter is being
passed.

51
00:02:38,020 --> 00:02:43,010
And the three directions are, in, which is
the default for

52
00:02:43,010 --> 00:02:45,960
for primitives and the only way to do it
for primitives,

53
00:02:45,960 --> 00:02:48,380
and what that says is that the data will
be copied

54
00:02:48,380 --> 00:02:52,730
from the caller over to the address space
of the receiver.

55
00:02:52,730 --> 00:02:54,580
So that's what in means.

56
00:02:54,580 --> 00:02:58,310
Out means the opposite, it means that the
data will be copied from

57
00:02:58,310 --> 00:03:03,450
the receiver and returned as a so-called
out parameter back to the caller.

58
00:03:03,450 --> 00:03:05,810
And then finally inout.

59
00:03:05,810 --> 00:03:08,870
Which is, you pass an in and you get a
result back.

60
00:03:08,870 --> 00:03:11,670
I looked through all of Android and I
could find no examples of

61
00:03:11,670 --> 00:03:13,750
where anything in Android used the inout

62
00:03:13,750 --> 00:03:16,600
parameter passing mode in terms of
direction.

63
00:03:16,600 --> 00:03:17,920
So it's not very common.

64
00:03:17,920 --> 00:03:19,770
The most common things are in.

65
00:03:19,770 --> 00:03:23,610
There's somethings that use out, and it's
important to

66
00:03:23,610 --> 00:03:25,560
remember to do this because when you start
trying

67
00:03:25,560 --> 00:03:29,160
to pass data between the address spaces,
then you

68
00:03:29,160 --> 00:03:32,630
want to limit the amount of data that's
passed.

69
00:03:32,630 --> 00:03:37,130
So when you say in, it only goes with the
request, it doesn't go with the response.

70
00:03:37,130 --> 00:03:39,740
When you say out, it only comes back with

71
00:03:39,740 --> 00:03:42,940
a response and doesn't, nothing goes over
with the request.

72
00:03:42,940 --> 00:03:44,740
So that's why they typically do this.

73
00:03:44,740 --> 00:03:48,540
And this is also characteristic of other
interface definition languages.

74
00:03:48,540 --> 00:03:54,140
Thinks like Corba or Microsoft's IDL they
use for Comm and decomm.

75
00:03:54,140 --> 00:03:56,730
So this is a very common thing to do.

76
00:03:58,600 --> 00:04:03,230
Another set of things that are different,
is that you can have one way methods.

77
00:04:03,230 --> 00:04:05,780
So unlike a regular Java interface where
you invoke a

78
00:04:05,780 --> 00:04:10,450
method and it basically returns something,
which could be void.

79
00:04:10,450 --> 00:04:13,620
with, with, but it, but the point is when
you invoke

80
00:04:13,620 --> 00:04:16,600
that method it's going to block until the
method call is done.

81
00:04:16,600 --> 00:04:19,390
Whether it returns anything or not, the
caller is blocked

82
00:04:19,390 --> 00:04:22,630
for the duration of the call in a normal
Java interface.

83
00:04:22,630 --> 00:04:27,930
With android and AIDL however you can
designate methods as being one way.

84
00:04:27,930 --> 00:04:31,110
And one way means that you invoke it, its
copied from the

85
00:04:31,110 --> 00:04:34,910
callers address space down into the

86
00:04:34,910 --> 00:04:37,230
operating system, and then the call
returns

87
00:04:37,230 --> 00:04:41,090
right away, it doesnt wait until the call
goes over to the receiver

88
00:04:41,090 --> 00:04:45,680
side, is turned back into a method call,
is processed and so on.

89
00:04:45,680 --> 00:04:48,810
So that means that they're going to return
much more quickly.

90
00:04:48,810 --> 00:04:50,790
And we're going to use this one way
capability

91
00:04:50,790 --> 00:04:54,020
later when we start talking about
asynchronous mechanisms.

92
00:04:54,020 --> 00:04:58,970
How you can use asynchronous communication
and AIDL by using

93
00:04:58,970 --> 00:05:01,779
one way, wha, by using a pair of one-way
methods.

94
00:05:01,779 --> 00:05:04,570
So one-way methods don't block the caller.

95
00:05:04,570 --> 00:05:07,140
Another thing, methods can't throw
exceptions.

96
00:05:07,140 --> 00:05:08,780
Which is kind of an unusual thing, but
that's

97
00:05:08,780 --> 00:05:10,330
just one of the things that they, they do.

98
00:05:10,330 --> 00:05:13,390
You, you can't, you can't throw the
exceptions yourself.

99
00:05:13,390 --> 00:05:16,430
They don't propagate those through the
call.

100
00:05:16,430 --> 00:05:17,870
That's something that's ki, kind of
strange.

101
00:05:17,870 --> 00:05:19,280
I don't know why they, they do that.

102
00:05:19,280 --> 00:05:22,980
In languages like, like CorbaIDL, you can
in

103
00:05:22,980 --> 00:05:26,260
fact throw exceptions, and they get
propagated back.

104
00:05:26,260 --> 00:05:29,220
And then another thing that you can't do
in AIDL, that you can

105
00:05:29,220 --> 00:05:30,620
do in regular Java, you can't

106
00:05:30,620 --> 00:05:33,610
have interfaces that inherit from other
interfaces.

107
00:05:33,610 --> 00:05:35,500
So you have to do some other thing, in

108
00:05:35,500 --> 00:05:38,540
order to to make them composed together in
some way.

109
00:05:40,520 --> 00:05:44,290
There's a number of different, primitive
operations that are supported, as

110
00:05:44,290 --> 00:05:49,380
parameters, or return values, from AIDL,
or AIDL methods in Android.

111
00:05:50,450 --> 00:05:52,275
The typical things you'd expect, right?

112
00:05:52,275 --> 00:06:00,300
So bool, array of bool, byte, int and
array of int.

113
00:06:00,300 --> 00:06:02,260
Long, array of long.

114
00:06:02,260 --> 00:06:04,850
Character, array of character.

115
00:06:04,850 --> 00:06:06,320
float, array of float.

116
00:06:06,320 --> 00:06:08,000
Double, array of double, et cetera.

117
00:06:08,000 --> 00:06:10,800
Those are all the kinds of things you can
pass back and forth.

118
00:06:10,800 --> 00:06:14,570
You can also return character sequences
and strings as well.

119
00:06:14,570 --> 00:06:16,340
And just poking around an Android for a
few

120
00:06:16,340 --> 00:06:18,280
minutes, just to look and see what was out
there.

121
00:06:18,280 --> 00:06:20,640
There's something that's called the
interface for the email service.

122
00:06:20,640 --> 00:06:21,930
As you can see here, you can create

123
00:06:21,930 --> 00:06:25,220
folders, you can delete folders, you can
rename folders.

124
00:06:25,220 --> 00:06:29,580
And that allows you to pass in, basically
account IDs, and names of things.

125
00:06:29,580 --> 00:06:34,260
The account ID being a long, the string
being used as the name.

126
00:06:34,260 --> 00:06:37,110
So there's some examples of how you're
passing primitives are

127
00:06:37,110 --> 00:06:39,310
around, very straightforward, not that

128
00:06:39,310 --> 00:06:40,940
much different from normal java
programming.

129
00:06:42,160 --> 00:06:45,410
You can also pass around lists, so there's

130
00:06:45,410 --> 00:06:49,455
this thing called java.utilList and
internally it uses the

131
00:06:49,455 --> 00:06:53,540
Java.utilArrayList as the implementation,
the mapping of the

132
00:06:53,540 --> 00:06:58,770
IDL list abstraction is this underlying
Java list abstraction.

133
00:06:58,770 --> 00:07:01,130
And you can support generic lists.

134
00:07:01,130 --> 00:07:04,150
Here's an example of an interface that,
that's defined

135
00:07:04,150 --> 00:07:06,230
in, in parts of Android where you could
have

136
00:07:06,230 --> 00:07:08,850
this thing that would go and lookup what
network

137
00:07:08,850 --> 00:07:11,770
interfaces are available, and you could do
this, this query.

138
00:07:11,770 --> 00:07:16,500
And when the query's complete, you get
back this list of or sorry.

139
00:07:16,500 --> 00:07:19,720
You, you go ahead and get back a list of
things that

140
00:07:19,720 --> 00:07:24,220
have completed, which tell you what
operators are connected to the network.

141
00:07:24,220 --> 00:07:26,100
So there's an example of where you're
getting back a

142
00:07:26,100 --> 00:07:28,950
list of something, in this case a list of
operator info.

143
00:07:28,950 --> 00:07:31,380
So that's how you can use those kinds of
things.

144
00:07:31,380 --> 00:07:33,920
There's also something called, a map,
which under

145
00:07:33,920 --> 00:07:38,014
the hood, maps to the underlying Java hash
map.

146
00:07:38,014 --> 00:07:42,100
They don't support generic maps, you have
to give it a type.

147
00:07:42,100 --> 00:07:44,400
Unlike lists, where you can support
generic lists.

148
00:07:44,400 --> 00:07:46,970
And when I looked through the Android
source code,

149
00:07:46,970 --> 00:07:50,140
I couldn't find any examples of maps being
used.

150
00:07:50,140 --> 00:07:53,160
So I guess it's kind of sort of a science
fiction-like thing.

151
00:07:53,160 --> 00:07:56,780
Or maybe it's a map of a, a fantasy place
that doesn't really exist.

152
00:07:56,780 --> 00:08:00,330
Like the Shire, or Mordor or something
like that.

153
00:08:00,330 --> 00:08:03,210
So they don't really have a lot of use of
maps,

154
00:08:03,210 --> 00:08:05,530
but they're available if you, if you tend
to use them.

155
00:08:05,530 --> 00:08:09,679
I think people tend to use parcels and
parcellables instead for various things.

156
00:08:10,900 --> 00:08:12,100
That's the next topic.

157
00:08:12,100 --> 00:08:18,080
So you can actually define your own data
types and have them passable back

158
00:08:18,080 --> 00:08:24,380
and forth as parameters or return values
from methods defined in AIDL interfaces.

159
00:08:24,380 --> 00:08:26,150
And the way that you do this is kind of
interesting.

160
00:08:26,150 --> 00:08:28,190
So, you define your own class.

161
00:08:28,190 --> 00:08:31,640
Like, this is one I got out of Android for
the status bar.

162
00:08:31,640 --> 00:08:32,010
Icons.

163
00:08:32,010 --> 00:08:36,540
There's something called a status bar icon
which implements personable.

164
00:08:36,540 --> 00:08:39,400
And you as the implementor of that class
are

165
00:08:39,400 --> 00:08:41,720
obliged to fill in a number of hook
methods.

166
00:08:41,720 --> 00:08:45,370
Like, read from parcel, write to parcel,
and so on.

167
00:08:45,370 --> 00:08:49,830
And at the appropriate times, as this
android is doing its thing, it'll

168
00:08:49,830 --> 00:08:53,940
end up invoking those methods in the stub
or in the proxy in

169
00:08:53,940 --> 00:08:58,140
order to get the, the state of the
particular instance of this thing,

170
00:08:58,140 --> 00:09:01,970
and then pass that back and forth under
the hood as a parcel.

171
00:09:01,970 --> 00:09:03,511
[COUGH] And you can see down here, here an

172
00:09:03,511 --> 00:09:05,810
example of how we would this, we would
say.

173
00:09:05,810 --> 00:09:07,820
Here's an interface called istatusbar;
which

174
00:09:07,820 --> 00:09:09,780
is actually a real interface in Android.

175
00:09:09,780 --> 00:09:13,920
And you can have parcelable StatusBarIcon
that just say hey, this, this

176
00:09:13,920 --> 00:09:18,400
guy is being defined as a user defined
type; with parcelable properties.

177
00:09:18,400 --> 00:09:23,950
This, read from parcel and write to parcel
hook methods that are defined.

178
00:09:23,950 --> 00:09:25,920
And then here's a method called setIcon

179
00:09:25,920 --> 00:09:29,930
that takes in a StatusBarIcon as a
parameter.

180
00:09:29,930 --> 00:09:31,960
So, it's pretty open-ended; you can go
ahead and add

181
00:09:31,960 --> 00:09:34,740
these things as you see fit to Android,
and it, it

182
00:09:34,740 --> 00:09:37,890
makes it easier for you to define types
that can

183
00:09:37,890 --> 00:09:43,100
be used with the overall IDL AIDL
mechanisms that Android supports.

184
00:09:44,610 --> 00:09:45,420
Any questions about that?

185
00:09:46,820 --> 00:09:47,220
>> Yeah?

186
00:09:47,220 --> 00:09:48,687
>> Why is there no direction for the

187
00:09:48,687 --> 00:09:51,089
primitives, so like, INT indexes and that
thing.

188
00:09:51,089 --> 00:09:55,814
>> Because in in Java, these things are
going to be passed by value.

189
00:09:55,814 --> 00:09:56,370
>> Okay.

190
00:09:56,370 --> 00:09:58,440
>> So you, you can't get the result back.

191
00:09:58,440 --> 00:10:01,450
Because they don't have the, Java doesn't
have the same thing you do in

192
00:10:01,450 --> 00:10:04,320
C or C++ where you could take the address
of or pass a reference.

193
00:10:04,320 --> 00:10:05,770
That's why.

194
00:10:05,770 --> 00:10:09,900
So, as you can see here status bar icon is
a, is a Java source file

195
00:10:09,900 --> 00:10:15,015
this other thing is an AIDL source file,
and so you can make those work together.

196
00:10:15,015 --> 00:10:17,655
There's a description that you can find on
the

197
00:10:17,655 --> 00:10:20,498
Android webpage that talks more about how
you pass

198
00:10:20,498 --> 00:10:23,069
objects, and it goes through and shows you
an

199
00:10:23,069 --> 00:10:25,319
example of how to do this kind of thing.

200
00:10:25,319 --> 00:10:29,463
So to summarize this particular discussion
AIDL, Android

201
00:10:29,463 --> 00:10:33,775
Interface Definition Language, is a
relatively simple syntax.

202
00:10:33,775 --> 00:10:38,002
It's, it's a subset of the full blown Java
interface syntax, and it lets

203
00:10:38,002 --> 00:10:40,620
you define interfaces and then define
methods

204
00:10:40,620 --> 00:10:43,790
that take parameters and return values,
optionally.

205
00:10:44,810 --> 00:10:47,020
As we talked about before there, there's a
subset of things

206
00:10:47,020 --> 00:10:48,929
you can do that you can't do all the full
blown stuff.

207
00:10:50,140 --> 00:10:52,130
The parameters and return values can be
any

208
00:10:52,130 --> 00:10:54,680
of the supported types we just talked
about.

209
00:10:54,680 --> 00:10:59,450
And, you can even have interface
parameters passed.

210
00:10:59,450 --> 00:11:00,360
And we'll see this later when we

211
00:11:00,360 --> 00:11:04,110
start to talk about asynchronous
interfaces in AIDL.

212
00:11:04,110 --> 00:11:08,180
What you can do is you can essentially
create objects

213
00:11:08,180 --> 00:11:12,500
that live in a client that are instances,
or implementations,

214
00:11:12,500 --> 00:11:15,040
of interfaces, and then you can pass the
references to

215
00:11:15,040 --> 00:11:20,320
those things as parameters, or return
values, to other AIDL methods.

216
00:11:20,320 --> 00:11:22,950
And this gives you the very powerful
ability to be able to

217
00:11:22,950 --> 00:11:28,080
pass essentially objects using factories
or other gang of four style patterns.

218
00:11:28,080 --> 00:11:29,470
And the receivers, when they get those

219
00:11:29,470 --> 00:11:31,660
interfaces, can then make method calls on
them.

220
00:11:31,660 --> 00:11:35,470
So you can essentially pass remote object
references around and

221
00:11:35,470 --> 00:11:38,770
access them from other processes in other
parts of the system.

222
00:11:40,300 --> 00:11:41,970
And we'll see a bunch of examples on how
that works.

223
00:11:43,190 --> 00:11:44,730
Basically what you end up doing is you end

224
00:11:44,730 --> 00:11:48,900
up creating this AIDL file using your
favorite editor.

225
00:11:48,900 --> 00:11:51,620
Typically you'd end up using either the

226
00:11:51,620 --> 00:11:54,440
IDE editor environment that you have in
Eclipse

227
00:11:54,440 --> 00:11:58,080
or, or your own editor that you may choose
like Emacs or VI, or what not.

228
00:11:58,080 --> 00:11:59,950
And the thing you always have to remember

229
00:11:59,950 --> 00:12:03,370
is that each interface goes into a
separate file.

230
00:12:03,370 --> 00:12:06,990
So here's a file that has that iDownload
interface.

231
00:12:06,990 --> 00:12:09,850
Here's a file that has iDownload callback
interface.

232
00:12:09,850 --> 00:12:12,200
Those have to be defined in separate
files.

233
00:12:12,200 --> 00:12:15,380
And that, that gets a little bit
squirrel-y and confusing at times.

234
00:12:15,380 --> 00:12:16,940
You'd like to be able to glum them all
together

235
00:12:16,940 --> 00:12:20,720
but they don't' support that kind of
combination of, of interfaces.

236
00:12:20,720 --> 00:12:22,516
You have to do them one per file.

237
00:12:22,516 --> 00:12:24,950
And that means you, you'll, as you'll see
in a

238
00:12:24,950 --> 00:12:26,330
minute when we look at some of the
examples, you

239
00:12:26,330 --> 00:12:28,600
have to do a little bit of other syntactic
sugar,

240
00:12:28,600 --> 00:12:31,580
to, to make sure that the files know about
each other.

241
00:12:31,580 --> 00:12:34,940
That they understand, for example, in this
particular case, notice

242
00:12:34,940 --> 00:12:39,070
how the iDownload interface, uses

243
00:12:39,070 --> 00:12:41,870
a reference to the iDownloadCallback
interface.

244
00:12:41,870 --> 00:12:47,710
And so we would have to basically import
the iDownload call back interface into

245
00:12:47,710 --> 00:12:52,230
this file so it would be visible to be
usable by the underlying system.

246
00:12:52,230 --> 00:12:54,810
And I think they just did this to make it
easier to write the compiler honestly.

247
00:12:54,810 --> 00:12:55,960
There's no need to do it.

248
00:12:55,960 --> 00:12:58,292
Other languages give you more powerful
ways of

249
00:12:58,292 --> 00:13:01,055
being able to deal with multiple
interfaces per file.

250
00:13:01,055 --> 00:13:08,673
[MUSIC]

