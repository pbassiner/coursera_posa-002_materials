1
00:00:00,000 --> 00:00:08,147
[MUSIC]

2
00:00:08,147 --> 00:00:09,935
Welcome to the next part of the module

3
00:00:09,935 --> 00:00:14,140
on Android services and local interprocess
communication mechanisms.

4
00:00:14,140 --> 00:00:17,950
Which begins our analysis of how to
program a bound service.

5
00:00:17,950 --> 00:00:21,740
A bound service offers a client server
interface that allows extended

6
00:00:21,740 --> 00:00:25,730
two way conversations between one or more
clients and the service.

7
00:00:25,730 --> 00:00:27,170
As shown in an earlier video.

8
00:00:28,430 --> 00:00:30,880
To understand how to develop a bound
service with

9
00:00:30,880 --> 00:00:33,880
a pair of messengers, this part will
analyze key

10
00:00:33,880 --> 00:00:36,760
elements and steps in design of an
application that

11
00:00:36,760 --> 00:00:40,760
can currently retrieves a system wide,
persistent unique identifier.

12
00:00:40,760 --> 00:00:41,980
And displays it to the user.

13
00:00:43,390 --> 00:00:46,420
Before delving into the details of this
program we will first

14
00:00:46,420 --> 00:00:48,950
outline the overall structure and
functionality

15
00:00:48,950 --> 00:00:50,780
of the unique ID generator application.

16
00:00:52,060 --> 00:00:55,080
This application contains the unique ID
generator activity that

17
00:00:55,080 --> 00:00:58,130
calls bind service on a unique ID
generator service.

18
00:00:58,130 --> 00:01:01,520
When Android calls it's life cycle hook
method.

19
00:01:01,520 --> 00:01:03,010
This service returns a reference to

20
00:01:03,010 --> 00:01:06,290
a manager through it's onBind factory
method.

21
00:01:06,290 --> 00:01:09,290
The activity receives this reference by
the on-service connected

22
00:01:09,290 --> 00:01:11,670
hook method, and stores it in a local data
member.

23
00:01:12,810 --> 00:01:16,540
When the user clicks the generate unique
ID button, the activity

24
00:01:16,540 --> 00:01:20,770
uses the messenger reference to send a
request message to the service.

25
00:01:20,770 --> 00:01:22,260
This message contains a reference to a

26
00:01:22,260 --> 00:01:24,740
reply messenger defined in the activity,
that

27
00:01:24,740 --> 00:01:28,459
the service uses to return the system wide
unique ID, back to the activity.

28
00:01:29,690 --> 00:01:33,240
The service receives this message via a
handle message hook method

29
00:01:33,240 --> 00:01:36,350
and enqueues the message in a background
thread for subsequent processing.

30
00:01:37,450 --> 00:01:40,550
This background thread generates the
unique ID and returns

31
00:01:40,550 --> 00:01:43,379
the result by calling send on the reply
messenger reference.

32
00:01:44,520 --> 00:01:47,370
The activity then receives this reply
message via a handle

33
00:01:47,370 --> 00:01:50,330
message hook method and displays the
unique ID to the user.

34
00:01:51,400 --> 00:01:52,720
The source code for the unique ID

35
00:01:52,720 --> 00:01:55,430
generator application is available at this
link.

36
00:01:55,430 --> 00:01:58,830
So download it, and watch this video, and
the next one, carefully.

37
00:01:58,830 --> 00:02:01,250
Perhaps multiple times, to learn how it
works.

38
00:02:02,290 --> 00:02:05,140
This example contains four primary
classes, as well

39
00:02:05,140 --> 00:02:09,600
as various Android bound service,
concurrency, and communication mechanisms.

40
00:02:09,600 --> 00:02:12,440
So we'll progressively analyze the design
and implementation from

41
00:02:12,440 --> 00:02:15,420
various perspectives to show how all the
pieces work.

42
00:02:15,420 --> 00:02:19,016
And fit together.

43
00:02:19,016 --> 00:02:24,056
[MUSIC]

44
00:02:24,056 --> 00:02:28,840
We'll now summarize the steps involved in
programming a bound service.

45
00:02:28,840 --> 00:02:31,450
Using our unique ID application as a
running

46
00:02:31,450 --> 00:02:36,150
example to reality each step in general a
client.

47
00:02:36,150 --> 00:02:40,340
Typically in activity launches about
servers by calling the buying service

48
00:02:40,340 --> 00:02:45,180
method to creat a so call persistent
connection as discuss here.

49
00:02:45,180 --> 00:02:48,570
For example, the unique ID generator
activity uses a factor method

50
00:02:48,570 --> 00:02:52,010
that creat a tenth command that identifies
a series of starts.

51
00:02:52,010 --> 00:02:55,370
Wich in this case is the unique ID
generator service.

52
00:02:55,370 --> 00:02:58,960
In addition to passing the intent to
buying service the climist most also

53
00:02:58,960 --> 00:03:01,066
provide a service connection object thats
use

54
00:03:01,066 --> 00:03:02,689
to monitor the connection with the
service.

55
00:03:04,040 --> 00:03:05,000
Hook methods defined in the

56
00:03:05,000 --> 00:03:07,140
service connection object, are
automatically called

57
00:03:07,140 --> 00:03:11,700
back by Android's service framework, where
connections are established, and lost.

58
00:03:11,700 --> 00:03:12,410
As shown here.

59
00:03:13,430 --> 00:03:14,920
In response to the bind service

60
00:03:14,920 --> 00:03:18,210
call, Android's activity manager service,
launches

61
00:03:18,210 --> 00:03:19,730
the service, if it's not already

62
00:03:19,730 --> 00:03:22,770
running using the activator pattern
described here.

63
00:03:24,240 --> 00:03:26,570
The activity manager service starts the
service

64
00:03:26,570 --> 00:03:29,900
asynchronously so the bind service method
does not

65
00:03:29,900 --> 00:03:32,290
block the client synchronously while the
unique

66
00:03:32,290 --> 00:03:34,789
ID generator service is being launched and
run.

67
00:03:35,950 --> 00:03:38,190
After the service is up and running

68
00:03:38,190 --> 00:03:41,470
Androids service framework invokes the
onCreate and on

69
00:03:41,470 --> 00:03:45,460
bind hook methods to perform
initialization activities it

70
00:03:45,460 --> 00:03:48,290
inherits these methods from the service
super class.

71
00:03:49,600 --> 00:03:52,630
The unique generator services onCreate
method.

72
00:03:52,630 --> 00:03:56,140
Initializes its data members, such as the
messenger, that

73
00:03:56,140 --> 00:04:00,190
hands requests for unique IDs, an object
that stores

74
00:04:00,190 --> 00:04:03,730
these IDs persistently, and an executor
that manages the

75
00:04:03,730 --> 00:04:07,059
pool of threads used to process client
requests concurrently.

76
00:04:08,320 --> 00:04:12,160
Likewise, onBind returns an IBinder object
that enables

77
00:04:12,160 --> 00:04:14,070
a client to communicate with a bound
service.

78
00:04:15,130 --> 00:04:18,160
The object returned from onBind is
typically initialized in

79
00:04:18,160 --> 00:04:22,550
the onCreate hook method or in a data
member definition.

80
00:04:22,550 --> 00:04:24,725
For example the unique ID generator
service

81
00:04:24,725 --> 00:04:28,100
onBind factory method calls get binder to
return

82
00:04:28,100 --> 00:04:31,190
the binder the request messenger users to
communicate

83
00:04:31,190 --> 00:04:34,080
with it's associated request handle as
discussed here.

84
00:04:35,340 --> 00:04:38,860
Although multiple clients can connect to a
bound service Android

85
00:04:38,860 --> 00:04:42,780
service framework only calls the services
on bind factory method.

86
00:04:42,780 --> 00:04:46,260
To retrieve the Ibinder when the first
client binds.

87
00:04:46,260 --> 00:04:51,000
It catches this Ibinder and redelivers it
to any additional clients that bind

88
00:04:51,000 --> 00:04:58,999
without calling onBind again as discussed
here.

89
00:05:02,140 --> 00:05:04,370
Service connection class implements a call

90
00:05:04,370 --> 00:05:06,770
back driven protocol that the Android
service

91
00:05:06,770 --> 00:05:11,400
framework uses to establish a connection
between a client and a bound service.

92
00:05:12,610 --> 00:05:15,560
After a connection to the service has been
established,.

93
00:05:15,560 --> 00:05:18,620
This framework automatically dispatches
the onServiceConnected

94
00:05:18,620 --> 00:05:20,640
hook method to give the client

95
00:05:20,640 --> 00:05:24,390
the ibinder object of the communication
channel that's connected to the service.

96
00:05:25,550 --> 00:05:28,880
The unique ID generator activity overrides
this method.

97
00:05:28,880 --> 00:05:32,930
To get the I Binder to the messenger
that's returned from the on bind factory

98
00:05:32,930 --> 00:05:35,740
method which is then encapsulated in a

99
00:05:35,740 --> 00:05:38,350
new messenger reference data member for
later use.

100
00:05:39,790 --> 00:05:41,860
The Android service framework
automatically

101
00:05:41,860 --> 00:05:44,950
dispatches the on-service disconnected
hook method.

102
00:05:44,950 --> 00:05:47,050
When a connection to the service has been
lost.

103
00:05:48,280 --> 00:05:50,700
This can happen when the process hosting
the service

104
00:05:50,700 --> 00:05:54,530
has crashed or has been killed by the
Android RunTime.

105
00:05:56,160 --> 00:05:59,450
This hook method does not remove the
service connection itself.

106
00:05:59,450 --> 00:06:01,130
Which remains active.

107
00:06:01,130 --> 00:06:03,510
So the client will receive a call back to
on

108
00:06:03,510 --> 00:06:07,050
service connected when the bound service
is up and running again.

109
00:06:08,700 --> 00:06:12,670
The client can interact with the service
after the connection is established, and

110
00:06:12,670 --> 00:06:14,970
the on service connected method returns

111
00:06:14,970 --> 00:06:16,820
it the interface to the communication
channel.

112
00:06:18,180 --> 00:06:19,890
This interface an be generic.

113
00:06:19,890 --> 00:06:23,400
Such as the mechanisms that perform inter
process communication in the unique ID

114
00:06:23,400 --> 00:06:26,270
generator application via send and handle
message

115
00:06:26,270 --> 00:06:30,070
calls on messenger and handle objects
respectively.

116
00:06:30,070 --> 00:06:33,840
An interface can also be type specific
such as the mechanisms for inter

117
00:06:33,840 --> 00:06:36,400
process communication based on the Android
Interface

118
00:06:36,400 --> 00:06:38,930
Definition Language shown in an upcoming
video.

119
00:06:40,070 --> 00:06:44,230
Both approaches use the Android binder
framework and implementation patterns.

120
00:06:44,230 --> 00:06:49,120
Such as broker and proxy the unique ID
generator application uses a pair

121
00:06:49,120 --> 00:06:51,730
of messengers to communicate the unique

122
00:06:51,730 --> 00:06:54,390
generator service defines a request
messenger that

123
00:06:54,390 --> 00:06:57,570
encapsulates a request handler this
messenger

124
00:06:57,570 --> 00:07:00,560
is past the unique generator activity by

125
00:07:00,560 --> 00:07:05,650
the onBind factory method and subsequently
used to send a request to the service.

126
00:07:05,650 --> 00:07:08,530
Likewise, unique ID generator activity
defines a

127
00:07:08,530 --> 00:07:12,060
reply messenger that encapsulates a reply
handler.

128
00:07:12,060 --> 00:07:16,510
This messenger is passed to the unique ID
generator service as the reply to field

129
00:07:16,510 --> 00:07:20,740
in the request message, and used to send
the unique ID back to the activity.

130
00:07:28,710 --> 00:07:31,430
When a bound service is launched, its life

131
00:07:31,430 --> 00:07:33,960
cycle typically depends on the components
accessing it.

132
00:07:35,090 --> 00:07:38,410
In particular, a bound service usually
doesn't run in the background

133
00:07:38,410 --> 00:07:40,870
indefinitely, but instead is managed

134
00:07:40,870 --> 00:07:43,490
automatically by the Android service
framework.

135
00:07:43,490 --> 00:07:46,860
Based on whether it's bound to any clients
as shown here.

136
00:07:48,160 --> 00:07:50,160
When a client is done interacting with a
bound

137
00:07:50,160 --> 00:07:55,040
service, it calls unBindService which
informs the Android service framework.

138
00:07:55,040 --> 00:07:59,140
That the client no longer wants to receive
calls if the service is restarted.

139
00:08:00,240 --> 00:08:03,430
When all clients have unbound from a
service the Android

140
00:08:03,430 --> 00:08:08,420
service framework calls its on unBind hook
method which returns false

141
00:08:08,420 --> 00:08:12,560
by default but can be programmed to return
true if

142
00:08:12,560 --> 00:08:16,090
the service is on rebind hook method
should be called later.

143
00:08:16,090 --> 00:08:17,430
When new clients bind to it.

144
00:08:18,780 --> 00:08:21,370
OnRebind is used when a service continues

145
00:08:21,370 --> 00:08:24,530
running after all it's clients have
unbound.

146
00:08:24,530 --> 00:08:29,230
Which happens if a bound service is also a
started service.

147
00:08:29,230 --> 00:08:32,950
Which isn't uncommon but supported use
case as discussed here.

148
00:08:34,680 --> 00:08:38,680
When the service is unbound from all
clients Android service framework

149
00:08:38,680 --> 00:08:43,570
dispatches it's on destroy hook method
unless it's also a started service.

150
00:08:43,570 --> 00:08:47,240
This hook method cleans up any resources
that may have been allocated.

151
00:08:47,240 --> 00:08:49,020
Such as shutting down, the thread pool

152
00:08:49,020 --> 00:08:51,780
executor, in the unique ID generator
service.

153
00:08:52,980 --> 00:08:55,910
It's a good idea to call unBindService,
when an activity

154
00:08:55,910 --> 00:09:00,020
stops, or when it's done interacting with
a bound service.

155
00:09:00,020 --> 00:09:02,200
So that Android's service framework, can
shut

156
00:09:02,200 --> 00:09:04,350
down the service, when it's not being
used.

157
00:09:05,900 --> 00:09:08,100
When a clan activity is destroyed.

158
00:09:08,100 --> 00:09:14,230
Android, automatically unBinds it, from
any bound services it's connected to.

159
00:09:14,230 --> 00:09:19,186
[MUSIC]

160
00:09:19,186 --> 00:09:21,898
>> In summary, a bound service is the
server,

161
00:09:21,898 --> 00:09:26,590
in client server interactions that run on
Android devices.

162
00:09:26,590 --> 00:09:30,050
For example, the unique ID generator
application defines a bound service.

163
00:09:30,050 --> 00:09:32,660
That allows activities to bind to the
service

164
00:09:32,660 --> 00:09:36,570
send requests relieve replies and perform
inner process communication.

165
00:09:37,740 --> 00:09:40,380
A bound service typically lives only while
it serves other

166
00:09:40,380 --> 00:09:44,390
application components for example the
unique ID generator service does

167
00:09:44,390 --> 00:09:47,270
not run in the background indefinitely but
only lives as

168
00:09:47,270 --> 00:09:50,240
long as the unique ID generator activities
that bind to it.

169
00:09:51,550 --> 00:09:54,210
It's also possible to define hybrid
models.

170
00:09:54,210 --> 00:09:57,100
That comply in bound and started services.

171
00:09:57,100 --> 00:10:00,940
In particular, if a bound service also
implements the onStart command

172
00:10:00,940 --> 00:10:04,610
hook method it won't be destroyed when
it's unbound from all clients.

173
00:10:05,910 --> 00:10:10,650
If the onUnbind method returns true the
onRebind hook method will

174
00:10:10,650 --> 00:10:14,150
be called the next time a client binds to
the service.

175
00:10:14,150 --> 00:10:20,180
Instead of having it receive a call, to
onbind, on rebind is past the intent,

176
00:10:20,180 --> 00:10:22,450
originally used to bind to the service, by

177
00:10:22,450 --> 00:10:25,320
the bind service method call, as discussed
here.

178
00:10:26,760 --> 00:10:28,880
Although hybrid services are not nearly as

179
00:10:28,880 --> 00:10:32,550
common, as either started, or bound
services.

180
00:10:32,550 --> 00:10:36,480
The Android media playback service, is an
example of a hybrid service.

181
00:10:36,480 --> 00:10:42,052
That's both started and bound, as shown at
this path name.

182
00:10:42,052 --> 00:10:49,529
[MUSIC]

