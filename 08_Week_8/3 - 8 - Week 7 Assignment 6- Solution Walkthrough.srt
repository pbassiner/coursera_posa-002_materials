1
00:00:01,720 --> 00:00:02,890
We're going to begin by taking a look

2
00:00:02,890 --> 00:00:06,760
at the vulnerabilities in the Create Story
activity.

3
00:00:06,760 --> 00:00:09,830
Now, this, this application has a number
of issues, and one of the

4
00:00:09,830 --> 00:00:13,660
ones that we saw, from the Vulnerability
Checker application was that we could.

5
00:00:14,780 --> 00:00:17,690
Obtain the location of the device without
ever

6
00:00:17,690 --> 00:00:22,530
having the, the location permissions that
we would need.

7
00:00:22,530 --> 00:00:25,310
We could get find location for a device
without having

8
00:00:25,310 --> 00:00:29,890
any of the associated permissions in the
Vulnerability Checker app.

9
00:00:29,890 --> 00:00:32,890
So if you open up the create story
activity, which

10
00:00:32,890 --> 00:00:36,909
is the edu.vum.mocha.ui package and then
find the set location method.

11
00:00:36,909 --> 00:00:41,355
The [UNKNOWN] where the actual
vulnerability

12
00:00:41,355 --> 00:00:47,270
is that's allowing the Vulnerability
Checker app.

13
00:00:47,270 --> 00:00:52,770
To obtain the location of the device
without having the associated permission.

14
00:00:52,770 --> 00:00:58,080
And the way that this is happening is that
the iRemember app is logging the location

15
00:00:58,080 --> 00:01:03,940
that it's receiving whenever the location
is updated in the create story activity.

16
00:01:03,940 --> 00:01:04,440
So.

17
00:01:04,440 --> 00:01:07,270
This line right here is related to the

18
00:01:07,270 --> 00:01:11,740
vulnerability disclosures that were linked
in the assignment description.

19
00:01:11,740 --> 00:01:14,310
And that is, whenever you log data on

20
00:01:14,310 --> 00:01:18,000
certain versions of Android, it's possible
for other apps

21
00:01:18,000 --> 00:01:20,240
to read the log files that are being

22
00:01:20,240 --> 00:01:23,930
created by simply asking for permission to
read logs.

23
00:01:25,560 --> 00:01:27,710
Now, on Android 4.1 and above, this has
been changed.

24
00:01:27,710 --> 00:01:30,680
So, you can no longer ask for permission
to read

25
00:01:30,680 --> 00:01:35,390
the log files, for an arbitrary other
application or at all.

26
00:01:35,390 --> 00:01:38,810
Only system apps that are pre-installed by
the OEM or by

27
00:01:38,810 --> 00:01:43,670
Google, can actually go and obtain this
permission to read logs.

28
00:01:43,670 --> 00:01:46,130
But previously, and on older versions of
Android, it

29
00:01:46,130 --> 00:01:49,380
is possible to read the logs of a device.

30
00:01:49,380 --> 00:01:55,390
And in this case, when the location is
updated, in the set location method.

31
00:01:55,390 --> 00:01:58,540
The first thing it does is logs that
location.

32
00:01:58,540 --> 00:02:02,220
And this might be a helpful thing for
developer to try to see

33
00:02:02,220 --> 00:02:07,290
that this method is actually being called,
or understands the information related to.

34
00:02:07,290 --> 00:02:07,990
Where the device is.

35
00:02:07,990 --> 00:02:09,120
What data's coming in.

36
00:02:09,120 --> 00:02:11,530
Why a particular bug is present or isn't
present.

37
00:02:11,530 --> 00:02:14,960
But these types of log messages,
particularly in

38
00:02:14,960 --> 00:02:19,090
this case, can potentially, you know,
expose sensitive information.

39
00:02:19,090 --> 00:02:25,470
In this case, another app is able to get
access to the location of the device.

40
00:02:25,470 --> 00:02:28,290
Without ever actually having their
associated permission.

41
00:02:28,290 --> 00:02:30,210
So this is a case where we're.

42
00:02:30,210 --> 00:02:35,770
Using logging to accidentally allow a
privilege escalation and something,

43
00:02:35,770 --> 00:02:40,530
some order app to get access to data that
it shouldn't have access to.

44
00:02:40,530 --> 00:02:41,910
Now, if you wanted to go and fix this,

45
00:02:41,910 --> 00:02:44,640
this wasn't one of the requirements for
the assignment.

46
00:02:44,640 --> 00:02:47,190
But the easiest way to fix this, is just
to command this line out.

47
00:02:47,190 --> 00:02:49,400
If this line isn't there, it's not
possible.

48
00:02:50,470 --> 00:02:54,930
And preferably you don't have this line at
all where you have some type of field

49
00:02:54,930 --> 00:02:58,700
process that automatically removes the
logging statements so

50
00:02:58,700 --> 00:03:01,440
that you don't accidentally expose some
other data.

51
00:03:01,440 --> 00:03:05,220
So, you know, location isn't the only
thing you need to worry about logging.

52
00:03:05,220 --> 00:03:07,000
You shouldn't be logging.

53
00:03:07,000 --> 00:03:07,160
Yeah.

54
00:03:07,160 --> 00:03:09,550
Usernames, or, contact information.

55
00:03:09,550 --> 00:03:13,875
Or anything else that you could get with
a, with a, permission.

56
00:03:13,875 --> 00:03:19,340
So, be careful and [UNKNOWN] when you're
logging data in some type of application.

57
00:03:19,340 --> 00:03:19,840
The

58
00:03:22,000 --> 00:03:27,940
sound record activity also has, or also
participates, in a privilege escalation.

59
00:03:27,940 --> 00:03:30,250
So if you'll open up the sound record
activity in

60
00:03:30,250 --> 00:03:35,670
the same package and then look for the
onCreate method.

61
00:03:35,670 --> 00:03:39,815
We'll all be look at the chain of events
that lead to this privilege escalation.

62
00:03:40,920 --> 00:03:44,170
So one of the first things that we see in
the onCreate method.

63
00:03:44,170 --> 00:03:49,720
Is that the activity actually extracts a
file name that it's going

64
00:03:49,720 --> 00:03:54,050
to later use from an intent; so whoever
starts this activity can

65
00:03:54,050 --> 00:03:57,250
send in an intent with a file name extra
that it will

66
00:03:57,250 --> 00:04:01,170
then read out of that intent when it goes
to start up.

67
00:04:01,170 --> 00:04:04,000
Now the reason this is important is later
on

68
00:04:04,000 --> 00:04:06,840
what we're going to see is that the same
file name,

69
00:04:06,840 --> 00:04:09,640
which is declared at the top of the file

70
00:04:09,640 --> 00:04:14,150
in the activity gets used in a number of
places.

71
00:04:14,150 --> 00:04:17,840
In particular, we see down here in the
start plain.

72
00:04:17,840 --> 00:04:20,890
Method, which is going to actually go and

73
00:04:22,730 --> 00:04:25,410
read and play the, some file that's been
recorded.

74
00:04:25,410 --> 00:04:26,380
It's using that file name.

75
00:04:26,380 --> 00:04:30,680
So that means that we're going to be
saving something to the m file name.

76
00:04:30,680 --> 00:04:33,520
If we scroll a little farther down and we
see start recording.

77
00:04:33,520 --> 00:04:35,340
Here's where the problem starts to emerge.

78
00:04:37,030 --> 00:04:39,550
This sound record activity.

79
00:04:39,550 --> 00:04:44,350
Creates a media recorder, and then begins
grabbing the audio from the

80
00:04:44,350 --> 00:04:49,110
device, and saving it to whatever file
name was provided in the intent.

81
00:04:49,110 --> 00:04:51,890
So in this case, the caller can specify a
file,

82
00:04:51,890 --> 00:04:54,890
where they want all of this audio to be
saved.

83
00:04:54,890 --> 00:04:58,660
And that file can be a file that this app
has control

84
00:05:00,030 --> 00:05:02,570
over, or it can be a file that just
happens to be.

85
00:05:02,570 --> 00:05:03,490
World readable.

86
00:05:03,490 --> 00:05:05,130
Or that this app can write to.

87
00:05:05,130 --> 00:05:08,250
And some other app can potentially read
from.

88
00:05:08,250 --> 00:05:11,580
So you can imagine another app could
potentially,

89
00:05:11,580 --> 00:05:14,990
if they could get access to the sound
record

90
00:05:14,990 --> 00:05:17,350
activity, provide a file name that the
sound

91
00:05:17,350 --> 00:05:20,640
recording activity should go and record
some sound to.

92
00:05:21,990 --> 00:05:25,960
Now the key question is how would another
app get access

93
00:05:25,960 --> 00:05:31,180
to this sound record activity if it lives
inside of another app.

94
00:05:31,180 --> 00:05:33,000
That isn't that app's own.

95
00:05:33,000 --> 00:05:37,150
So in this case the sound record activity
is

96
00:05:37,150 --> 00:05:40,210
declared in the Android manifest for the
iRemember app.

97
00:05:40,210 --> 00:05:42,930
So down here at the bottom of the Android

98
00:05:42,930 --> 00:05:45,240
manifest for this project, which you'll
see in the.

99
00:05:46,240 --> 00:05:47,930
Eclipse project.

100
00:05:47,930 --> 00:05:51,020
And, this is where the sound record
activity

101
00:05:51,020 --> 00:05:55,480
is declared, and one of the interesting
things

102
00:05:55,480 --> 00:05:58,160
that we see, is that this activity doesn't

103
00:05:58,160 --> 00:06:01,930
specify, a value for the Android app
exported.

104
00:06:03,240 --> 00:06:05,940
So, we can say, and add the attribute.

105
00:06:05,940 --> 00:06:06,440
Exported.

106
00:06:07,660 --> 00:06:11,470
And if we say true, then this activity is

107
00:06:11,470 --> 00:06:15,570
accessible by any other activity or app on
a device.

108
00:06:15,570 --> 00:06:17,560
They can send an intent to it to start it.

109
00:06:18,570 --> 00:06:18,896
If we set.

110
00:06:18,896 --> 00:06:22,032
Exported to false.

111
00:06:22,032 --> 00:06:25,090
Then components of other applications that
aren't in

112
00:06:25,090 --> 00:06:27,650
this app cannot send invest to this
activity.

113
00:06:28,920 --> 00:06:33,350
Exported means that no one else should be
able to talk to this activity.

114
00:06:33,350 --> 00:06:35,520
But, in this case we see something
interesting and

115
00:06:35,520 --> 00:06:38,880
that's there's no value present at all for
Export.

116
00:06:40,820 --> 00:06:44,140
We do see, however, that there's an intent
filter.

117
00:06:44,140 --> 00:06:46,270
And this leads to one tricky issue, and
that

118
00:06:46,270 --> 00:06:48,720
is, if you don't specify a value for
exported.

119
00:06:50,140 --> 00:06:56,440
If you don't have the Android exported
tag, or attribute on the activity tag.

120
00:06:56,440 --> 00:06:58,660
Then the default value is dependent upon
whether

121
00:06:58,660 --> 00:07:02,136
or not the activity has any intent
filters.

122
00:07:02,136 --> 00:07:07,438
So, if the activity has an intent filter,
than exported defaults to true.

123
00:07:07,438 --> 00:07:11,190
In which case other apps, or components of

124
00:07:11,190 --> 00:07:13,760
other apps can send intents to this
activity.

125
00:07:14,770 --> 00:07:20,000
If it has an intent it doesn't have an
intent folders then it defaults to false.

126
00:07:20,000 --> 00:07:23,500
In which case other apps or components of

127
00:07:23,500 --> 00:07:27,390
those other apps cannot send intents to
it.

128
00:07:27,390 --> 00:07:30,660
So in this case because we don't
explicitly set.

129
00:07:30,660 --> 00:07:33,450
Android exported the false.

130
00:07:33,450 --> 00:07:35,540
And we have an intent filter.

131
00:07:35,540 --> 00:07:40,900
It means that, the default value for
exported in this case is true.

132
00:07:40,900 --> 00:07:44,590
And this activity has exported.

133
00:07:44,590 --> 00:07:49,960
So, what we have here, is the equivalence,
of having Android exported.

134
00:07:51,710 --> 00:07:57,120
True, so that is what this, whether or not
we specify export it doesn't matter

135
00:07:57,120 --> 00:07:59,070
because since we haven't specified it and

136
00:07:59,070 --> 00:08:01,420
we have an intent filter,it defaults to
true.

137
00:08:01,420 --> 00:08:06,410
Now there's a number of ways that we can
fix this.

138
00:08:06,410 --> 00:08:07,880
One is if we had the Sound Record

139
00:08:07,880 --> 00:08:10,460
Activity not take this [INAUDIBLE] file
name that's it

140
00:08:10,460 --> 00:08:13,160
going to record audio to it as parameter
that would

141
00:08:13,160 --> 00:08:16,360
be helpful as we always recorded to a
file.

142
00:08:16,360 --> 00:08:19,240
That was under the control of this app.

143
00:08:19,240 --> 00:08:21,350
But that may not always make sense.

144
00:08:21,350 --> 00:08:24,910
And, since we might want to have the

145
00:08:24,910 --> 00:08:28,900
capability of allowing other apps or
activities or

146
00:08:28,900 --> 00:08:31,220
some other caller to specify where the
file

147
00:08:31,220 --> 00:08:34,700
name is that we should store the audio to.

148
00:08:34,700 --> 00:08:39,490
We should still have a way of providing
that capability but protecting in some

149
00:08:41,520 --> 00:08:41,630
way.

150
00:08:41,630 --> 00:08:45,890
One way that we could protect it is if we
knew that we only wanted the

151
00:08:45,890 --> 00:08:49,150
app, the activity to be called internally,
would

152
00:08:49,150 --> 00:08:56,160
be to add the Android exported equals
false attribute.

153
00:08:56,160 --> 00:09:00,320
So this would guarantee that the activity
wasn't called.

154
00:09:00,320 --> 00:09:03,950
And we could remove this intent filter
which isn't actually used.

155
00:09:05,130 --> 00:09:08,300
Even if we didn't spend, specify Android
exported equals false

156
00:09:08,300 --> 00:09:12,190
and we just removed the ten, intent
filter, that would

157
00:09:12,190 --> 00:09:15,270
also plug the vulnerability or plug the
leak that we

158
00:09:15,270 --> 00:09:18,750
have from the Vulnerability Checker being
able to record sound through.

159
00:09:20,240 --> 00:09:20,740
And this app.

160
00:09:21,900 --> 00:09:25,500
However, it would probably be ideal to
have Android exported

161
00:09:25,500 --> 00:09:30,570
false, regardless of whether or not we
remove the intent filter.

162
00:09:30,570 --> 00:09:34,910
Another way that might be even a, a more
powerful mechanism particularly if we did

163
00:09:34,910 --> 00:09:38,890
want to expose this sounder activity to

164
00:09:38,890 --> 00:09:42,120
other apps and the components of other
apps.

165
00:09:42,120 --> 00:09:44,650
Would be to add a permission that's
required.

166
00:09:46,650 --> 00:09:50,310
So in this case, we could say that we're

167
00:09:50,310 --> 00:09:53,260
going to require the same permissions that
we require.

168
00:09:53,260 --> 00:09:55,930
So in this case, we're requiring the
record

169
00:09:55,930 --> 00:09:58,580
audio permission in order to make this
possible.

170
00:09:58,580 --> 00:10:01,180
So we could require that callers of the

171
00:10:01,180 --> 00:10:05,260
sound record activity also have the record
audio permission.

172
00:10:05,260 --> 00:10:09,690
So this would probably be the most full
proof way to do it.

173
00:10:09,690 --> 00:10:12,480
As if we wanted to not only not export it

174
00:10:12,480 --> 00:10:15,908
but also require that whoever calls it has
record audio but.

175
00:10:15,908 --> 00:10:18,840
It probably an other, great way to do it

176
00:10:18,840 --> 00:10:21,370
would be simply to add the record audio
permission.

177
00:10:21,370 --> 00:10:25,700
So, if a caller has record audio
permission, then they can call

178
00:10:25,700 --> 00:10:28,860
you and tell you to record the file,
wherever you, they want.

179
00:10:28,860 --> 00:10:31,620
Because, they already have that capability
themselves.

180
00:10:31,620 --> 00:10:34,940
They already have that privilege
themselves, it doesn't matter.

181
00:10:34,940 --> 00:10:38,250
You are not exposing or creating a
privilege escalation.

182
00:10:38,250 --> 00:10:41,010
If they go off and do something
inappropriate with that data.

183
00:10:41,010 --> 00:10:45,400
It's their fault and not your fault at
that point.

184
00:10:45,400 --> 00:10:48,154
You could also, of course, not have this

185
00:10:48,154 --> 00:10:51,144
and have Android export equals false if
you do

186
00:10:51,144 --> 00:10:53,662
not ever intend for this activity to be

187
00:10:53,662 --> 00:10:57,379
called by an external component of some
other app.

188
00:10:57,379 --> 00:11:01,114
[BLANK_AUDIO]

189
00:11:01,114 --> 00:11:05,659
Now if we go back to the sound record
activity some people may ask well isn't

190
00:11:05,659 --> 00:11:08,474
the real problem that we're accepting in
file

191
00:11:08,474 --> 00:11:11,650
name in the onCreate method from another
intent?

192
00:11:11,650 --> 00:11:14,580
Shouldn't we remove this line here?

193
00:11:14,580 --> 00:11:17,770
And that's not really the root of the
problem in this case.

194
00:11:17,770 --> 00:11:21,080
It's certainly part of what's happening,
and part of the problem,

195
00:11:21,080 --> 00:11:24,590
and part of the, one of the links in the
chain, but

196
00:11:24,590 --> 00:11:28,290
the fact that this activity in and of it's
self, accepts

197
00:11:28,290 --> 00:11:32,170
a file name to save some audio file to, is
not necessarily.

198
00:11:32,170 --> 00:11:33,990
A security issue.

199
00:11:33,990 --> 00:11:37,250
It might be good if the app somehow
checked that

200
00:11:37,250 --> 00:11:39,790
file, and whether or not it was
appropriate to save audio

201
00:11:39,790 --> 00:11:42,610
there, but it's, it's not really that
app's job if

202
00:11:42,610 --> 00:11:46,310
the caller is making the decision on where
to save it.

203
00:11:46,310 --> 00:11:47,620
But what is that app's job is to make

204
00:11:47,620 --> 00:11:49,420
sure if it is recording audio and it is
allowing

205
00:11:49,420 --> 00:11:51,800
somebody else to get access to it, that it
does

206
00:11:52,800 --> 00:11:57,480
protect it with the appropriate
permission, in this case requiring.

207
00:11:57,480 --> 00:12:00,460
Whoever the caller is, to also have the
record audio permission.

208
00:12:03,050 --> 00:12:07,130
The next vulnerability that we're going to
look at, is in the log-in activity class.

209
00:12:07,130 --> 00:12:11,980
If you'll open this class and then look at
the

210
00:12:11,980 --> 00:12:16,385
getLoginID method, and the getLogin file
method, which is just above.

211
00:12:16,385 --> 00:12:19,900
The, get log-in ID method.

212
00:12:19,900 --> 00:12:23,610
We can see one of the vulnerabilities
that's happening.

213
00:12:23,610 --> 00:12:28,740
So, first off this app is storing a user
name and password

214
00:12:28,740 --> 00:12:33,950
on disc, which is really a bad idea in an
app altogether.

215
00:12:33,950 --> 00:12:36,330
Now the reason for this is, is that.

216
00:12:36,330 --> 00:12:41,840
If you store something on the file system,
then you have to be protected in some way.

217
00:12:41,840 --> 00:12:43,900
In this case, you know, you would prefer

218
00:12:43,900 --> 00:12:46,170
to see this app encrypting that data so
that

219
00:12:46,170 --> 00:12:49,550
if somebody obtained physical access to
the device

220
00:12:49,550 --> 00:12:52,350
or obtained access to the device in some
way.

221
00:12:52,350 --> 00:12:57,140
That attacker couldn't simply read the
password for that user out of that file.

222
00:12:57,140 --> 00:12:58,520
And interpret it.

223
00:12:58,520 --> 00:13:02,470
You would like that file to be encrypted.

224
00:13:02,470 --> 00:13:06,450
But, that of itself isn't necessarily a
security vulnerability for this app.

225
00:13:06,450 --> 00:13:10,130
Yes, it's a bad practice, and something
that should not be done.

226
00:13:10,130 --> 00:13:13,840
But it still requires somebody probably
getting physical access

227
00:13:13,840 --> 00:13:17,120
to the device, in order to read that
password off.

228
00:13:17,120 --> 00:13:18,540
Now, do I think that it is a good

229
00:13:18,540 --> 00:13:22,130
idea that this app is storing password in
plain text?

230
00:13:22,130 --> 00:13:22,590
Absolutely not.

231
00:13:22,590 --> 00:13:24,190
It should be removed if possible.

232
00:13:24,190 --> 00:13:25,750
Absolutely it should be removed.

233
00:13:25,750 --> 00:13:26,870
You shouldn't do that.

234
00:13:27,920 --> 00:13:30,000
But for this assignment, really what we
wanted to point out,

235
00:13:30,000 --> 00:13:33,260
was that we wanted to have some data that
was so obvious.

236
00:13:33,260 --> 00:13:38,470
And clearly something that other apps
shouldn't get access to, to try

237
00:13:38,470 --> 00:13:43,440
to illustrate another type of
vulnerability that was taking place.

238
00:13:43,440 --> 00:13:49,550
In this case, what we see is that when we
ask for getLoginId, we are getting the

239
00:13:49,550 --> 00:13:52,290
login file to get that actual place where
that,

240
00:13:52,290 --> 00:13:56,792
that file is stored with the username and
password.

241
00:13:56,792 --> 00:13:59,280
And if we go to the getLoginFile method,
what

242
00:13:59,280 --> 00:14:02,192
we'll see is that we're using this
StorageUtilities class.

243
00:14:02,192 --> 00:14:06,950
To get the output media file or
essentially

244
00:14:06,950 --> 00:14:09,130
where we're going to be storing the
username and password.

245
00:14:09,130 --> 00:14:15,040
And we're passing a number of different
values into this get output media file.

246
00:14:15,040 --> 00:14:19,910
One of them that's a little suspicious is
this max security value.

247
00:14:19,910 --> 00:14:22,100
So let's take a look at the storage
utilities,

248
00:14:22,100 --> 00:14:26,800
get output media file method, and see
what's actually happening.

249
00:14:27,970 --> 00:14:33,090
Well we see that we're passing in a
context a type of file,

250
00:14:33,090 --> 00:14:37,020
the security level that should be applied,
and then the name of the file.

251
00:14:37,020 --> 00:14:40,710
And if we go back to the login activity,
we'll see that we have the context.

252
00:14:42,070 --> 00:14:46,150
We have the type of file, that we're
saving some text.

253
00:14:46,150 --> 00:14:48,990
We have a security level, max security.

254
00:14:48,990 --> 00:14:54,620
And then we have login.text, which is the
name of the file that we're storing.

255
00:14:54,620 --> 00:15:00,240
And if we go down below, what we see is
that if the security level is

256
00:15:00,240 --> 00:15:05,900
private, we're going to store it in the
app's private data storage.

257
00:15:05,900 --> 00:15:07,000
Otherwise.

258
00:15:07,000 --> 00:15:11,480
We're going to store it and one of many
other places in which case

259
00:15:11,480 --> 00:15:15,470
all of the other places that we might
store happened to be on the external

260
00:15:18,080 --> 00:15:22,530
storage directory which before Android 4.4
was a publicly readable and location.

261
00:15:22,530 --> 00:15:26,900
So in this case unless we explicitly set
security to private we're

262
00:15:26,900 --> 00:15:30,390
going to store on the external storage
which could be read by another app.

263
00:15:31,550 --> 00:15:36,700
Now in this case, what we see is we're
passing in max security.

264
00:15:36,700 --> 00:15:39,260
Which, if you see this number over here,
you

265
00:15:39,260 --> 00:15:44,026
can see, is actually set to the maximum
integer value.

266
00:15:44,026 --> 00:15:47,320
Now the question is, what does security
private equal?

267
00:15:47,320 --> 00:15:50,190
Well, if we mouse over the red, we see
security private.

268
00:15:50,190 --> 00:15:52,400
Is actually equal to 1.

269
00:15:52,400 --> 00:15:55,280
So this is a vulnerability because what
we're doing is

270
00:15:55,280 --> 00:15:59,570
we're passing in an inappropriate value
for the security level.

271
00:15:59,570 --> 00:16:03,150
Which is causing this login data to be

272
00:16:03,150 --> 00:16:07,020
stored in a world readable location on
external storage.

273
00:16:07,020 --> 00:16:11,870
So on, under Android 4.4 it would be
possible for another app to

274
00:16:11,870 --> 00:16:17,080
read this app's login data because it's
accidentally storing it on the external

275
00:16:21,400 --> 00:16:22,250
storage directory.

276
00:16:22,250 --> 00:16:24,950
So in this case what we have is an issue
where

277
00:16:24,950 --> 00:16:31,760
the get login file method and the login
activity is inappropriately using.

278
00:16:31,760 --> 00:16:34,700
The get, getoutputmedia file, method or,

279
00:16:34,700 --> 00:16:38,270
inappropriate using, inappropriately using
the API.

280
00:16:38,270 --> 00:16:40,460
That's exposed by storage utilities.

281
00:16:40,460 --> 00:16:42,870
By passing in max security.

282
00:16:42,870 --> 00:16:44,190
As a value.

283
00:16:44,190 --> 00:16:47,260
So, because there wasn't a bound, on what
you could

284
00:16:47,260 --> 00:16:52,150
provide, for that integer and because only
certain values made sense.

285
00:16:52,150 --> 00:16:56,905
In this case, whoever wrote the getlogin
file method, made a mistake.

286
00:16:56,905 --> 00:17:03,610
Was passing an incorrect value, and
because of that, this line has created

287
00:17:03,610 --> 00:17:08,800
a security vulnerability, that is this
line is inappropriately using

288
00:17:08,800 --> 00:17:14,930
another API causing information that
should be private always, to leak on

289
00:17:14,930 --> 00:17:18,490
to the external storage, where other apps
can get access to it.

290
00:17:18,490 --> 00:17:21,280
This app shouldn't be storing passwords in
the first place.

291
00:17:21,280 --> 00:17:23,490
But that in and of itself is not the key
issue here.

292
00:17:23,490 --> 00:17:26,690
The k, the number one issue that needs to
be fixed is

293
00:17:26,690 --> 00:17:30,510
that this app is storing that sensitive
data in a location that's inappropriate.

294
00:17:34,620 --> 00:17:38,540
The next security issue is related to the
one that we just saw with login activity.

295
00:17:39,700 --> 00:17:42,990
And what we saw with login activity was
that the user

296
00:17:42,990 --> 00:17:50,100
of the storage utilities API was using the
storage utilities API inappropriately.

297
00:17:50,100 --> 00:17:52,250
Causing some data to be leaked.

298
00:17:52,250 --> 00:17:54,740
So one of the security or stylistic issues

299
00:17:54,740 --> 00:17:57,390
that we have going on in storage
utilities.

300
00:17:57,390 --> 00:18:02,540
That we would like to fix is the fact that
it's so easy to make a mistake and

301
00:18:02,540 --> 00:18:06,430
accidentally have the wrong security
applied to the data

302
00:18:07,910 --> 00:18:11,100
that's being stored, and in essence
suddenly start leaking data.

303
00:18:12,180 --> 00:18:16,120
So let's start by taking a look at these
flags that are being used.

304
00:18:16,120 --> 00:18:19,550
To determine the security level of where
files get stored.

305
00:18:19,550 --> 00:18:20,050
The

306
00:18:21,760 --> 00:18:24,290
first thing we see is we're using
integers.

307
00:18:24,290 --> 00:18:29,210
So as we saw before, when we use the
integer, the login activity was able

308
00:18:29,210 --> 00:18:31,540
to pass in a value that we hadn't

309
00:18:31,540 --> 00:18:34,950
explicitly come up with a, a
interpretation of.

310
00:18:34,950 --> 00:18:39,720
So in this case, because our value was max
integer value and we hadn't defined that.

311
00:18:39,720 --> 00:18:42,320
The fact that we're using integer as

312
00:18:42,320 --> 00:18:45,620
the type to specify these flags was
problematic.

313
00:18:45,620 --> 00:18:48,060
It made it easier for the caller to make a
mistake.

314
00:18:49,310 --> 00:18:50,770
The second issue that we're going to see.

315
00:18:51,900 --> 00:18:56,795
Is that here we're defining the default
value.

316
00:18:56,795 --> 00:19:01,180
The default security level to be 0, which
is security public.

317
00:19:02,230 --> 00:19:04,260
Now when I say default value.

318
00:19:04,260 --> 00:19:07,970
If you initialize an integer, by default
it's going to be 0.

319
00:19:07,970 --> 00:19:09,260
So if a caller.

320
00:19:09,260 --> 00:19:12,530
Provided an uninitialized value to the
method.

321
00:19:12,530 --> 00:19:15,810
We're going to see in a second, it's going
to default to security public.

322
00:19:16,990 --> 00:19:22,820
Now, if we scroll down and we get look at
the get output media file method, we see

323
00:19:22,820 --> 00:19:25,130
that security is being passed in and then
clearly

324
00:19:25,130 --> 00:19:28,180
their expecting one of those integers
above to be used.

325
00:19:29,290 --> 00:19:34,570
But it's very easy that the caller could
provide the wrong integer value as we saw.

326
00:19:34,570 --> 00:19:38,030
And if they do provide the wrong integer
value and

327
00:19:38,030 --> 00:19:42,420
they provide something that has not
explicitly had a value defined.

328
00:19:42,420 --> 00:19:45,880
Then what we see is down here in this
conditional logic.

329
00:19:47,010 --> 00:19:51,810
That unless they explicitly say security
private, the default

330
00:19:51,810 --> 00:19:54,450
is going to be to store it as insecure.

331
00:19:54,450 --> 00:20:00,490
It's going to be to store it in external
files where anybody can read it.

332
00:20:00,490 --> 00:20:03,640
So in this case, it's a security
vulnerability here that

333
00:20:03,640 --> 00:20:09,090
the default branch of this L statement is
driven by.

334
00:20:09,090 --> 00:20:11,230
A value being correctly value.

335
00:20:11,230 --> 00:20:13,790
So unless you correctly provide a value
for the security.

336
00:20:13,790 --> 00:20:16,050
It's going to default to this else branch

337
00:20:16,050 --> 00:20:20,836
and store things on the external storage
directory.

338
00:20:20,836 --> 00:20:26,490
What we would really like is for the
default to be security private.

339
00:20:26,490 --> 00:20:29,250
But in this case, that's not the default.

340
00:20:29,250 --> 00:20:31,510
Security private only works if.

341
00:20:32,880 --> 00:20:35,220
We explicitly set a value for it.

342
00:20:35,220 --> 00:20:40,590
So one way to do this, to fix this would
be to swap

343
00:20:40,590 --> 00:20:46,060
these out so we could say move these
values up here, then

344
00:20:46,060 --> 00:20:51,330
move the private down here and we make
this.

345
00:20:52,410 --> 00:20:55,350
Security public and we'll reformat that.

346
00:20:55,350 --> 00:21:00,520
So now what we say is unless you
explicitly set the value to be

347
00:21:00,520 --> 00:21:05,580
public, then we're going to by default
store it in the public storage directory.

348
00:21:05,580 --> 00:21:12,590
And this would plug this hole and provide
a better experience for.

349
00:21:12,590 --> 00:21:13,100
Users.

350
00:21:13,100 --> 00:21:16,290
Now you are required to fix this as a part
of your assignment

351
00:21:16,290 --> 00:21:19,630
but a much better way of structuring this
would be a make it so

352
00:21:19,630 --> 00:21:23,060
that unless the explicitly say that they
want to public in know what

353
00:21:23,060 --> 00:21:27,280
the value is to make it public that you're
going to make it private.

354
00:21:27,280 --> 00:21:31,610
Similarly at the top in order to also make
sure that this works.

355
00:21:31,610 --> 00:21:38,610
By default we would like to move this and
make so that private is 0 and public is 1.

356
00:21:38,610 --> 00:21:44,340
This way ideally if they don't provide a
value for the security.

357
00:21:44,340 --> 00:21:48,650
If they don't, use an uninitialized
variable it will default to private.

358
00:21:48,650 --> 00:21:53,600
Now it would be much better rather than
using integers to use a enom of some type.

359
00:21:53,600 --> 00:21:58,000
I'm not going to walk through the full
solution for that.

360
00:21:58,000 --> 00:21:59,200
It's fairly simple to do.

361
00:21:59,200 --> 00:22:02,810
You could declare a enom with two
different values to secure

362
00:22:02,810 --> 00:22:05,590
your private and security public, and then
require that, that enom be

363
00:22:07,740 --> 00:22:08,320
passed down later.

364
00:22:08,320 --> 00:22:12,127
So how do we go about fixing the
vulnerability in the login activity?

365
00:22:13,330 --> 00:22:16,080
The first thing that we need to do and

366
00:22:16,080 --> 00:22:18,530
the only thing that's needed in order to
plug the

367
00:22:18,530 --> 00:22:22,330
leak that the Vulnerability Checker is
exploiting is to make

368
00:22:22,330 --> 00:22:26,450
sure that we provide a correct value for
the security.

369
00:22:26,450 --> 00:22:31,430
So in this case we switch from our max
security that we arbitrarily came up with.

370
00:22:32,480 --> 00:22:36,550
To an actual value for security that's
defined by the API.

371
00:22:36,550 --> 00:22:40,280
In this case, StorageUtilities.security
private.

372
00:22:40,280 --> 00:22:43,180
And doing this alone is a valid solution
to the

373
00:22:43,180 --> 00:22:48,080
assignment that will plug particularly
with the Vulnerability Checker issues.

374
00:22:49,370 --> 00:22:52,710
Ideally though you really wouldn't like to
store passwords.

375
00:22:52,710 --> 00:22:58,270
So, an enhancement that we could do that's
not required for a valid solution, but

376
00:22:58,270 --> 00:22:59,990
would be much better practice is to

377
00:22:59,990 --> 00:23:04,370
rel, eliminate, the storage of the
plain-text password.

378
00:23:04,370 --> 00:23:06,870
So in this case, there aren't any other
activities

379
00:23:06,870 --> 00:23:10,040
that actually depend upon the password
being in this file.

380
00:23:10,040 --> 00:23:12,590
So we can simply remove.

381
00:23:12,590 --> 00:23:15,960
The line, appropriate lines from the login
collect.

382
00:23:15,960 --> 00:23:19,000
We can remove the appropriate lines from

383
00:23:19,000 --> 00:23:22,180
any applications where we're relying on
it.

384
00:23:22,180 --> 00:23:24,020
And actually, in this case it's only one

385
00:23:24,020 --> 00:23:26,520
other place we can remove the get
password,

386
00:23:26,520 --> 00:23:29,110
method completely, because as you'll see
when we

387
00:23:29,110 --> 00:23:32,290
remove this, no other activities depend
upon it.

388
00:23:32,290 --> 00:23:34,510
And we don't depend upon it ourselves.

389
00:23:34,510 --> 00:23:37,700
So we can completely eliminate this
un-needed password, that we

390
00:23:37,700 --> 00:23:40,930
happen to be storing for some reason in
this file.

391
00:23:40,930 --> 00:23:44,880
And we've significantly improved our
security.

392
00:23:44,880 --> 00:23:48,870
We still also provided backwards
capability, compatibility, with all of the

393
00:23:48,870 --> 00:23:52,700
other all of the other activities, that
may depend upon it.

394
00:23:52,700 --> 00:23:56,620
There's some other activities, that depend
on this get login ID.

395
00:23:56,620 --> 00:23:56,910
Method.

396
00:23:56,910 --> 00:23:59,230
But, we're not storing a password with it.

397
00:23:59,230 --> 00:24:00,540
We're just storing a login idea.

398
00:24:01,660 --> 00:24:05,850
Now if you really wanted to be paranoid
and, and try to improve the

399
00:24:05,850 --> 00:24:11,280
security even more, you could not even
store the login ID on the file system.

400
00:24:11,280 --> 00:24:13,570
And instead you could have this method
since it's

401
00:24:13,570 --> 00:24:17,370
a static method and the caller always
provides a context.

402
00:24:17,370 --> 00:24:22,440
You could potentially have this method,
pop-up a dialogue of some sort.

403
00:24:22,440 --> 00:24:24,955
To actually prompt the user for their

404
00:24:24,955 --> 00:24:28,290
log-in ID, every time this method was
called.

405
00:24:28,290 --> 00:24:33,440
Or, you could use a log-in ID and have it
stored on disk, like we're doing here.

406
00:24:33,440 --> 00:24:36,660
But, remove the password, as we did, below
by.

407
00:24:36,660 --> 00:24:37,740
Commenting out these lines.

408
00:24:37,740 --> 00:24:40,620
And then removing the get password method.

409
00:24:40,620 --> 00:24:44,150
Those would be better ways of solving the

410
00:24:44,150 --> 00:24:47,580
issue by completely eliminating the
password from the file.

411
00:24:47,580 --> 00:24:51,830
But either way, we, we need to make sure
that this file is stored privately.

412
00:24:51,830 --> 00:24:54,770
Because even if we're just storing the
login ID, that's

413
00:24:54,770 --> 00:24:58,300
really not something that we should be
saving on the file.

414
00:24:58,300 --> 00:25:00,840
Somewhere where that file is publicly
readable and

415
00:25:00,840 --> 00:25:02,720
letting any app get access to the login
ID.

416
00:25:03,970 --> 00:25:06,320
It's, it's okay, potentially, to store
that data because if

417
00:25:06,320 --> 00:25:09,350
an attacker did steal the phone and did
get the login

418
00:25:09,350 --> 00:25:11,950
id, they still wouldn't have the password,
where as if

419
00:25:11,950 --> 00:25:15,310
we're storing both, they could have access
to both of them.

420
00:25:15,310 --> 00:25:18,800
But either way, we need to make sure apps,
other apps, can't get access to this

421
00:25:18,800 --> 00:25:20,730
file, which is clearly something that is
suppose

422
00:25:20,730 --> 00:25:23,930
to be private and internal to this
iRemember app.

423
00:25:26,770 --> 00:25:31,610
To recap, the vulnerabilities that we were
looking for to be identified.

424
00:25:31,610 --> 00:25:35,500
The first one is at the Android manifest,
at line 56.

425
00:25:35,500 --> 00:25:40,750
The intent filter here that's being added
without an.

426
00:25:40,750 --> 00:25:45,210
Corresponding explicit values set for
Android and exported.

427
00:25:45,210 --> 00:25:48,170
Causes this activity to be exported.

428
00:25:48,170 --> 00:25:53,360
And because of that another app can access
the sound report activity.

429
00:25:54,620 --> 00:25:59,080
The second vulnerability was on line 382
of the create story activity.

430
00:25:59,080 --> 00:26:04,250
And this is where we are logging the
location of the device to.

431
00:26:04,250 --> 00:26:07,690
The log, and another app on certain
versions of Android, could

432
00:26:07,690 --> 00:26:13,260
potentially read that location causing a
yet again, another privilege escalation.

433
00:26:13,260 --> 00:26:18,780
In login activity, on line 48, there is a
inappropriate usage of the storage

434
00:26:18,780 --> 00:26:24,370
utilities get output media file.

435
00:26:24,370 --> 00:26:26,940
API by providing max val, max security as
the value.

436
00:26:26,940 --> 00:26:28,410
Which isn't defined.

437
00:26:28,410 --> 00:26:33,940
And causes this file to be stored on
external storage, where it's accessible.

438
00:26:35,380 --> 00:26:40,650
And then the final two lines of
vulnerabilities were the fact

439
00:26:40,650 --> 00:26:41,900
that, and it's not actually a

440
00:26:41,900 --> 00:26:44,495
vulnerability, more of a stylistic
problem.

441
00:26:44,495 --> 00:26:52,860
That's causing the APIs or storage
utilities to be used inappropriately.

442
00:26:52,860 --> 00:26:54,450
Is it on line-24.

443
00:26:54,450 --> 00:26:57,420
We're setting the default value to public
for the security.

444
00:26:57,420 --> 00:27:00,680
And then lower down in the get output
media

445
00:27:00,680 --> 00:27:04,630
file method on line 76, we're making the
default branch.

446
00:27:04,630 --> 00:27:08,310
Be to store the data that's provided on
external

447
00:27:08,310 --> 00:27:12,900
storage directory where some other app can
potentially read it.

448
00:27:12,900 --> 00:27:15,200
We're not making the default be secure.

449
00:27:16,380 --> 00:27:18,640
So those were the key vulnerabilities that
should have been

450
00:27:18,640 --> 00:27:21,985
identified in the quiz for the first part
of the assignment.

451
00:27:24,900 --> 00:27:28,340
Now that we've gone through all of the
vulnerabilities that needed to be

452
00:27:28,340 --> 00:27:30,850
discovered in this app, let's talk about

453
00:27:30,850 --> 00:27:32,980
the peer grading aspect of this
assignment.

454
00:27:32,980 --> 00:27:37,110
And how to assess whether or not somebody
has fixed the vulnerabilities in

455
00:27:37,110 --> 00:27:39,760
the login activity and the Android
manifest

456
00:27:39,760 --> 00:27:42,830
file that we needed to have fixed.

457
00:27:42,830 --> 00:27:44,570
In the login activity, there are a couple

458
00:27:44,570 --> 00:27:48,660
different ways that you could fix this
vulnerability.

459
00:27:48,660 --> 00:27:50,960
One is as we've done here, to swap from
max security,

460
00:27:50,960 --> 00:27:57,450
to the appropriate flag which would be
storage utilities dot security private.

461
00:27:57,450 --> 00:28:02,130
If the code that the person is using is
storing anything on disk.

462
00:28:02,130 --> 00:28:04,680
Then that data should be stored in private
storage.

463
00:28:05,960 --> 00:28:08,790
Now there is a couple of ways you can
written this, rewritten this method.

464
00:28:08,790 --> 00:28:10,340
You could have rewritten this to use the

465
00:28:10,340 --> 00:28:13,400
appropriate flag and in this case security
private.

466
00:28:13,400 --> 00:28:19,010
If somebody rewrote this to automatically
themselves directly decide the data.

467
00:28:19,010 --> 00:28:21,540
The private data directory of the app and
return

468
00:28:21,540 --> 00:28:24,860
a file in that, that would also
potentially be okay.

469
00:28:24,860 --> 00:28:28,800
That's fine if the person is not using the
storage utility API at all because

470
00:28:28,800 --> 00:28:30,660
they say it's broken, they're instead
going to

471
00:28:30,660 --> 00:28:35,070
provide an appropriate file to store
things to.

472
00:28:35,070 --> 00:28:37,420
Or if the person uses security private.

473
00:28:37,420 --> 00:28:38,730
To fix things.

474
00:28:38,730 --> 00:28:40,450
That's also a valid solution.

475
00:28:41,490 --> 00:28:46,880
Another valid solution, if they do the
work to make things compile properly,

476
00:28:46,880 --> 00:28:51,830
is to completely eliminate the storage of
the log-in information in the file.

477
00:28:51,830 --> 00:28:52,890
So if you went.

478
00:28:52,890 --> 00:28:57,550
And eliminated all of the, places where
they're storing this data in the file.

479
00:28:58,760 --> 00:29:01,270
And then eliminate the places where there
are reading

480
00:29:01,270 --> 00:29:05,670
this out to instead obtain the values some
other way.

481
00:29:05,670 --> 00:29:09,680
That would also be a legitimate, approach
to fixing this.

482
00:29:09,680 --> 00:29:14,780
So you could change get login id to prompt
the user with some kind of gooey.

483
00:29:14,780 --> 00:29:17,500
To get their login ID and similarly you
could

484
00:29:17,500 --> 00:29:20,690
change if they get getPassword method is
still there.

485
00:29:20,690 --> 00:29:23,940
You could change that to prompt the person

486
00:29:23,940 --> 00:29:28,230
to appropriately provide their password
when its needed.

487
00:29:28,230 --> 00:29:32,000
So any, any solution that either switches
the storage

488
00:29:32,000 --> 00:29:36,063
to be private, most people will probably
have taken an.

489
00:29:36,063 --> 00:29:42,920
Switched max security to something like
storageutilities.securityprivate.

490
00:29:42,920 --> 00:29:46,280
However, if you also went and directly
create and or obtain

491
00:29:46,280 --> 00:29:49,840
a file, it's within the apps' private
storage, that's also fine.

492
00:29:49,840 --> 00:29:52,810
It's also okay if you completely eliminate
the

493
00:29:52,810 --> 00:29:57,120
storage of the ID and the password on
disk.

494
00:29:57,120 --> 00:30:02,860
And provide some appropriate mechanism to
prevent the dependence of,

495
00:30:02,860 --> 00:30:06,458
on the login ID method and the if
getPassword method,

496
00:30:06,458 --> 00:30:11,870
[UNKNOWN] anybody that was actually
dependent upon that method to still

497
00:30:11,870 --> 00:30:17,160
work properly but remove the storage on,
on the file.

498
00:30:17,160 --> 00:30:19,720
The password, the login ID, that also is
appropriate.

499
00:30:21,070 --> 00:30:22,480
However.

500
00:30:22,480 --> 00:30:25,290
If you are storing something on the file,
you must

501
00:30:25,290 --> 00:30:31,230
have either security private, or a file
looked up and returned.

502
00:30:31,230 --> 00:30:33,810
That is in private data directory, of the
app.

503
00:30:34,970 --> 00:30:37,770
Just change in the name of the file is not
sufficient.

504
00:30:37,770 --> 00:30:40,960
If that file is still on the external
storage directory, or is world readable.

505
00:30:42,030 --> 00:30:43,310
Just.

506
00:30:43,310 --> 00:30:47,910
Removing the, storage of the username and
password, if

507
00:30:47,910 --> 00:30:51,070
it causes compilation errors and other
parts of the app.

508
00:30:51,070 --> 00:30:53,110
Or causes a crash, somewhere else in the
app.

509
00:30:53,110 --> 00:30:55,110
That also is an insufficient solution.

510
00:30:55,110 --> 00:30:59,560
So, what you want to look for, is either
if they are storing things on a file.

511
00:30:59,560 --> 00:31:02,630
That they are doing it in a way, that

512
00:31:02,630 --> 00:31:05,060
still makes sure that file is stored in
the private.

513
00:31:06,140 --> 00:31:10,840
A storage of that app and not accessible
to other apps.

514
00:31:10,840 --> 00:31:14,060
Or, if they're not doing that, and they're
getting rid of the file entirely.

515
00:31:14,060 --> 00:31:18,730
That the app still compiles and works
correctly because either they're providing

516
00:31:18,730 --> 00:31:22,610
some alternate method for getting the
login ID, and getting the password.

517
00:31:24,030 --> 00:31:26,830
Or they come up with some other solution
that can eliminate those things

518
00:31:26,830 --> 00:31:30,258
and still allow the rest of the app to
compile and function correctly.

519
00:31:30,258 --> 00:31:35,210
For the second vulnerability that needed
to be fixed.

520
00:31:35,210 --> 00:31:37,220
In this case with the sound recorder
activity.

521
00:31:38,260 --> 00:31:43,420
What you want to look for is that where
the sound record activity is declared.

522
00:31:43,420 --> 00:31:48,830
That the person has done one of a couple
of things.

523
00:31:48,830 --> 00:31:54,090
One valid solution is to add the
RECORD_AUDIO permission to that

524
00:31:54,090 --> 00:31:58,714
activity so that all callers have to have
the RECORD_AUDIO permission.

525
00:31:58,714 --> 00:31:59,825
And that will stop.

526
00:31:59,825 --> 00:32:02,210
[UNKNOWN] Any potential privilege
escalation.

527
00:32:03,630 --> 00:32:07,280
Another potential solution would be just
to

528
00:32:07,280 --> 00:32:10,240
eliminate the intent filter from the
activity.

529
00:32:10,240 --> 00:32:12,840
So that it's not exported.

530
00:32:12,840 --> 00:32:15,480
Now, the only challenge with solution.

531
00:32:15,480 --> 00:32:20,380
It is a valid solution and should be
counted peer review as being correct.

532
00:32:20,380 --> 00:32:23,700
The only challenge with this solution is
down the road if somebody decides to add

533
00:32:23,700 --> 00:32:26,490
an intent filter back to this activity,

534
00:32:26,490 --> 00:32:30,230
and they don't understand how Android
Exporter works.

535
00:32:30,230 --> 00:32:34,830
They could potentially introduce that
vulnerability again.

536
00:32:34,830 --> 00:32:38,900
And then a third valid way of fixing
things is to add.

537
00:32:40,810 --> 00:32:43,130
Exported equals false to this activity so
that

538
00:32:43,130 --> 00:32:46,150
it's not accessible by external callers at
all.

539
00:32:46,150 --> 00:32:52,260
So those are the three different ways that
somebody could potentially fix

540
00:32:52,260 --> 00:32:57,550
that privilege escalation that's traveling
through the sound record activity.

541
00:32:57,550 --> 00:32:58,360
And any of those.

542
00:32:58,360 --> 00:33:02,210
Ways of fixing it should all be counted as
correct within the peer grade.

