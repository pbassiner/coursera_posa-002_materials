1
00:00:00,252 --> 00:00:08,415
[MUSIC]

2
00:00:08,415 --> 00:00:10,141
Welcome to the next part of the module

3
00:00:10,141 --> 00:00:14,120
on Android services and local interprocess
communication mechanisms.

4
00:00:14,120 --> 00:00:17,590
Which continues our analysis of how to
program a bound service.

5
00:00:18,650 --> 00:00:21,770
The previous video summarized the overall
design.

6
00:00:21,770 --> 00:00:25,220
And the individual steps involved in
programming bound services

7
00:00:25,220 --> 00:00:28,710
in general, and the unique ID generator
service in particular.

8
00:00:30,100 --> 00:00:31,960
We now take a closer look at the

9
00:00:31,960 --> 00:00:35,800
protocol used to communicate between
activities and services.

10
00:00:35,800 --> 00:00:39,149
Using the unique ID generator application
as a running example.

11
00:00:40,700 --> 00:00:43,230
Well first examine the protocol for
launching

12
00:00:43,230 --> 00:00:45,690
connecting and interacting with a bound
service.

13
00:00:46,800 --> 00:00:50,380
When Android activity framework invokes
the on start hook method

14
00:00:50,380 --> 00:00:54,690
on the unique id generator activity it
calls bind service.

15
00:00:54,690 --> 00:00:57,470
Passing in the intent associated with a
bound service.

16
00:00:57,470 --> 00:00:58,650
And the service connection object.

17
00:00:59,920 --> 00:01:03,020
This method starts a unique ID generator
service if it's not already running.

18
00:01:04,220 --> 00:01:08,720
Android service framework then invokes the
onBind factory method which returns

19
00:01:08,720 --> 00:01:13,179
the iBinder associated with the messenger
that encapsulates the request handler.

20
00:01:14,780 --> 00:01:17,620
The service framework then dispatches the
on service connected

21
00:01:17,620 --> 00:01:20,520
hook method on the service connection
object in the activity.

22
00:01:21,660 --> 00:01:26,510
Which encapsulates the iBinder returned
from onbind in a messenger

23
00:01:26,510 --> 00:01:28,949
and assigns it to a data member in the
activity.

24
00:01:30,370 --> 00:01:33,720
When a user presses the get unique ID
button, the

25
00:01:33,720 --> 00:01:38,640
corresponding get unique ID method, is
dispatched, which creates a request

26
00:01:38,640 --> 00:01:42,960
message, containing a reply messenger, and
calls the request messenger's send

27
00:01:42,960 --> 00:01:46,420
method, to pass the message to the unique
ID generator service.

28
00:01:47,640 --> 00:01:51,510
The message passed to send is forwarded by
the Android binder and

29
00:01:51,510 --> 00:01:56,150
hammer frameworks to the handle message
hook method of the request handler.

30
00:01:56,150 --> 00:01:59,950
Which creates a runable that encapsulates
the request message

31
00:01:59,950 --> 00:02:02,590
and enques the runable into a thread pool
executor.

32
00:02:02,590 --> 00:02:05,870
One of the threads in the pool.

33
00:02:05,870 --> 00:02:10,270
DQs that are runnable generates a system
wide unique ID and

34
00:02:10,270 --> 00:02:13,960
returns the ID back to the reply handler
running in the activity.

35
00:02:15,890 --> 00:02:19,400
Androids binder and hammer frameworks once
again collaborate to

36
00:02:19,400 --> 00:02:23,310
dispatch the handler message hook method
on the reply handler.

37
00:02:23,310 --> 00:02:25,606
Which displays the unique ID to the
screen.

38
00:02:25,606 --> 00:02:33,447
[BLANK_AUDIO]

39
00:02:33,447 --> 00:02:35,582
Next, we'll examine the protocol for

40
00:02:35,582 --> 00:02:38,110
unbinding and shutting down a bound
service.

41
00:02:39,180 --> 00:02:42,760
When an activity is completely obscured by
another activity,

42
00:02:42,760 --> 00:02:46,570
the Android activity framework dispatches
the activity's onStop hook method.

43
00:02:48,320 --> 00:02:50,920
When the unique ID generator activities
onStop method

44
00:02:50,920 --> 00:02:54,680
is dispatched, it caused the unbind
service method.

45
00:02:54,680 --> 00:02:58,900
If this activity was the last client
connected to the service, the Android

46
00:02:58,900 --> 00:03:01,820
service framework dispatches the services
onUnbind

47
00:03:01,820 --> 00:03:04,950
hook method, which returns false by
default.

48
00:03:04,950 --> 00:03:05,670
As shown here.

49
00:03:07,210 --> 00:03:12,130
After a services onUnbind returns false,
the Android service framework dispatches

50
00:03:12,130 --> 00:03:16,770
it's on destroy hook method which cleans
up any allocated resources.

51
00:03:16,770 --> 00:03:17,900
For example.

52
00:03:17,900 --> 00:03:20,010
The auditory hook method and the unique ID

53
00:03:20,010 --> 00:03:23,080
generator service shuts down the executor
thread pull.

54
00:03:24,600 --> 00:03:29,283
Although we've examined the interactions
between components in the

55
00:03:29,283 --> 00:03:33,410
context of the unique id generator
application this protocol

56
00:03:33,410 --> 00:03:38,013
for launching connecting communicating,
and shutting down a bound

57
00:03:38,013 --> 00:03:42,558
service is representative for essentially
all of bound services.

58
00:03:42,558 --> 00:03:47,533
[MUSIC]

59
00:03:47,533 --> 00:03:50,259
Now, that we've examined the protocol for
interacting

60
00:03:50,259 --> 00:03:52,986
between activity and service components in
the unique id

61
00:03:52,986 --> 00:03:55,826
generator application, we'll begin to
delve deeper into

62
00:03:55,826 --> 00:03:58,970
the detailed design and the implementation
of it's' classes.

63
00:04:00,030 --> 00:04:04,360
The unique id generator service contains a
request messenger that encapsulates.

64
00:04:04,360 --> 00:04:07,360
A request handler and passes this
messenger back to

65
00:04:07,360 --> 00:04:10,280
the unique ID generator activity when it
calls bind service.

66
00:04:11,520 --> 00:04:13,960
The activity stores the request messenger
and

67
00:04:13,960 --> 00:04:16,890
creates a reply messenger that
encapsulates a reply

68
00:04:16,890 --> 00:04:19,170
handler and sends it to the service

69
00:04:19,170 --> 00:04:22,150
by the request handler's handle message
hook method.

70
00:04:22,150 --> 00:04:26,270
Which then generates and sends a
system-wide unique ID back

71
00:04:26,270 --> 00:04:29,650
to the handle message hook method of the
activity's reply handler.

72
00:04:29,650 --> 00:04:35,185
Now that the symmetry in the design has a
unique id generator application

73
00:04:35,185 --> 00:04:40,362
which defines request reply messengers
that encapsulates request

74
00:04:40,362 --> 00:04:45,189
and reply handlers in the service and
activity respectively.

75
00:04:45,189 --> 00:04:49,695
[MUSIC]

76
00:04:49,695 --> 00:04:53,460
We'll start by analyzing the unique ID
generator activity.

77
00:04:53,460 --> 00:04:56,930
Which extends activity, and interacts with
the user to call

78
00:04:56,930 --> 00:04:59,580
a bound service that generates a system
wide unique ID.

79
00:05:00,650 --> 00:05:03,510
This activity defines several data
members.

80
00:05:03,510 --> 00:05:06,310
Including a text view that defines a
location,

81
00:05:06,310 --> 00:05:08,860
where the unique ID is displayed to the
user.

82
00:05:08,860 --> 00:05:10,380
And a reference to the messenger

83
00:05:10,380 --> 00:05:12,629
implemented in the unique ID generator
service.

84
00:05:13,890 --> 00:05:16,510
A service connection data member is also
defined.

85
00:05:16,510 --> 00:05:19,480
And used to receive a messenger reference
after the activity calls

86
00:05:19,480 --> 00:05:21,470
bind service with an intent that

87
00:05:21,470 --> 00:05:23,520
designates the unique ID generator
service.

88
00:05:24,600 --> 00:05:27,140
After the service is connected, Android
service

89
00:05:27,140 --> 00:05:30,370
framework dispatches the on service
connected hook method.

90
00:05:30,370 --> 00:05:33,000
Which creates a new messenger that
encapsulates the

91
00:05:33,000 --> 00:05:36,050
ibinder returned by the services onbind
factory method.

92
00:05:37,100 --> 00:05:39,030
If the service crashes Android

93
00:05:39,030 --> 00:05:41,740
service framework dispatches the onservice
disconnected

94
00:05:41,740 --> 00:05:45,780
hook method to inform the activity not to
send any more requests.

95
00:05:45,780 --> 00:05:47,280
Until the service is running again.

96
00:05:48,540 --> 00:05:52,092
When the activity becomes visible Androids
activity framework

97
00:05:52,092 --> 00:05:56,020
calls the onStart hook method, which calls
bind service.

98
00:05:56,020 --> 00:05:59,256
Passing the appropriate intent returned by
the make

99
00:05:59,256 --> 00:06:02,785
intent factory method and the service
connection object

100
00:06:02,785 --> 00:06:04,917
use it to dispatch call backs to the

101
00:06:04,917 --> 00:06:08,615
activity when a connection is established
with the service.

102
00:06:08,615 --> 00:06:13,506
[MUSIC]

103
00:06:13,506 --> 00:06:16,174
When the user presses the generate unique
ID button,

104
00:06:16,174 --> 00:06:20,160
Android's activity framework dispatches
the the generate unique ID method.

105
00:06:21,310 --> 00:06:25,200
This method creates a request message and
a new messenger that encapsulates the

106
00:06:25,200 --> 00:06:29,999
reply handler .Which is then stored in the
request message's reply to field.

107
00:06:31,200 --> 00:06:33,300
The request message is then passed to the

108
00:06:33,300 --> 00:06:35,790
unique ID generator service as a parameter
to

109
00:06:35,790 --> 00:06:38,080
the send method, via the reference to the

110
00:06:38,080 --> 00:06:41,671
request messenger return from the services
onBind factory method.

111
00:06:42,910 --> 00:06:45,100
The reply to this request message is
processed

112
00:06:45,100 --> 00:06:48,830
by the activities reply handler, which
extends handler.

113
00:06:48,830 --> 00:06:51,830
And receives reply containing the unique
ID

114
00:06:51,830 --> 00:06:53,700
sent by the Unique ID Generator Service.

115
00:06:55,080 --> 00:06:58,950
When the service sends this reply, the
binder framework and hammer

116
00:06:58,950 --> 00:07:03,480
framework collaborate to dispatch the
handle message hook method which invokes

117
00:07:03,480 --> 00:07:06,910
the unique ID helper method defined in the
Unique ID Generator

118
00:07:06,910 --> 00:07:11,189
Service to extract the unique ID
encapsulated in the reply message.

119
00:07:12,440 --> 00:07:14,570
This helper method shields the activity
from the

120
00:07:14,570 --> 00:07:16,710
details of how the reply message is
implemented.

121
00:07:17,960 --> 00:07:19,870
The unique id is then displayed on the
screen.

122
00:07:21,270 --> 00:07:23,870
When the unique id generator activity is
completely

123
00:07:23,870 --> 00:07:27,730
obscured by another activity the android
activity framework.

124
00:07:27,730 --> 00:07:30,820
Dispatches the activity's onStop hook
method which

125
00:07:30,820 --> 00:07:35,000
calls unbindService to disconnect from the
UniqueIDGeneratorService.

126
00:07:36,070 --> 00:07:37,870
If or when the activity becomes visible

127
00:07:37,870 --> 00:07:41,460
again, its onStart hook method will
automatically be

128
00:07:41,460 --> 00:07:44,140
dispatched by the Android activity
framework and

129
00:07:44,140 --> 00:07:46,666
the connection to the service will be
re-established.

130
00:07:46,666 --> 00:07:50,619
Via bindService.

131
00:07:50,619 --> 00:07:55,582
[MUSIC]

132
00:07:55,582 --> 00:07:59,021
The UniqueIDGeneratorService extends
service and generates

133
00:07:59,021 --> 00:08:01,750
unique ID's within a pool of threads.

134
00:08:01,750 --> 00:08:05,030
Which enable multiple client requests to
run concurrently

135
00:08:05,030 --> 00:08:07,550
an can improve performance on a multicore
device.

136
00:08:08,770 --> 00:08:10,720
Unique ID generator service defines
several

137
00:08:10,720 --> 00:08:13,570
data members used throughout its
implementation.

138
00:08:13,570 --> 00:08:15,860
Including the executor service
implementation.

139
00:08:15,860 --> 00:08:19,210
That provides a thread pool used to
service client requests,

140
00:08:19,210 --> 00:08:22,880
the maximum number of threads in that
pool, a shared preferences

141
00:08:22,880 --> 00:08:24,330
object that stores unique IDs

142
00:08:24,330 --> 00:08:26,390
persistently, and a messenger that
receives

143
00:08:26,390 --> 00:08:29,700
request messages request messages sent
from the Unique ID Generator Activity.

144
00:08:31,010 --> 00:08:32,660
The onBind factory method.

145
00:08:32,660 --> 00:08:35,770
Returns the Ibinder associated with this
request messenger when

146
00:08:35,770 --> 00:08:38,630
the activity binds to the unique ID
generator service.

147
00:08:39,790 --> 00:08:41,790
When this service is launched the Android

148
00:08:41,790 --> 00:08:45,180
service framework dispatches it's onCreate
hook method.

149
00:08:45,180 --> 00:08:48,540
Which initializes the data members
outlined above.

150
00:08:48,540 --> 00:08:52,400
For example, it first creates a request
messenger that encapsulates

151
00:08:52,400 --> 00:08:57,280
a request handler used to process request
messages received from clients.

152
00:08:57,280 --> 00:08:59,560
It then obtains a reference to the default
file

153
00:08:59,560 --> 00:09:02,140
used by the shared preferences framework
for this service.

154
00:09:02,140 --> 00:09:03,850
As shown here.

155
00:09:03,850 --> 00:09:07,180
Finally, it initializes a fixed thread
pool executor that's

156
00:09:07,180 --> 00:09:09,990
configured to use in MAX THREADS, as shown
here.

157
00:09:11,410 --> 00:09:13,240
The unique ID generator service also

158
00:09:13,240 --> 00:09:15,680
defines several helper methods that shield
the

159
00:09:15,680 --> 00:09:20,440
unique ID generator activity from the
details of how the service is implemented.

160
00:09:20,440 --> 00:09:21,550
For example.

161
00:09:21,550 --> 00:09:23,850
Make intent is a factory method that
creates

162
00:09:23,850 --> 00:09:27,430
and intent associated with a Unique ID
generator service.

163
00:09:27,430 --> 00:09:32,622
Likewise, the unique ID method extracts
the unique ID string from the

164
00:09:32,622 --> 00:09:38,167
bundle of data contained in the reply
message and returns it to the caller.

165
00:09:38,167 --> 00:09:43,155
[MUSIC]

166
00:09:43,155 --> 00:09:46,532
Request messages sent from a unique ID
generator activity to the

167
00:09:46,532 --> 00:09:50,347
unique ID generator service are processed
by the request handling which

168
00:09:50,347 --> 00:09:54,662
extends handler and overrides the handle
message hook method that's dispatched

169
00:09:54,662 --> 00:09:58,630
by the hammer framework when a request
message arrives from the activity.

170
00:10:00,070 --> 00:10:02,990
This hook method stores a reference to the
reply messenger.

171
00:10:02,990 --> 00:10:06,180
In a local variable, and then creates, and
then queues

172
00:10:06,180 --> 00:10:09,540
an anonymous runnable that's executed in a
thread in the

173
00:10:09,540 --> 00:10:13,150
thread pool, where it generates a unique
ID, and sends

174
00:10:13,150 --> 00:10:16,650
the ID back to the activity via the Reply
Messenger Reference.

175
00:10:17,970 --> 00:10:19,870
The Generate Unique ID Method returns

176
00:10:19,870 --> 00:10:23,390
a message containing a unique system-wide
ID.

177
00:10:23,390 --> 00:10:27,430
This id is computed by calling the random
uu id method.

178
00:10:27,430 --> 00:10:30,220
Which returns an immutable representation
of 128

179
00:10:30,220 --> 00:10:33,500
bit universally unique id as shown here.

180
00:10:34,640 --> 00:10:37,840
Although the value returned by random uu
id has a very

181
00:10:37,840 --> 00:10:43,660
low probability of duplicates as discussed
here, our implementation takes no chances.

182
00:10:43,660 --> 00:10:48,370
So it runs in a loop and compares the
results returned by random UUID with a

183
00:10:48,370 --> 00:10:51,360
value stored in the shared preferences
object which

184
00:10:51,360 --> 00:10:54,650
is implemented internally by a Java Hash
Map.

185
00:10:54,650 --> 00:10:57,140
As shown in this past name when a

186
00:10:57,140 --> 00:11:00,030
unique value is found it's added to the
persistent

187
00:11:00,030 --> 00:11:03,060
collection of unique id's and then
returned as

188
00:11:03,060 --> 00:11:06,440
a string in the bundled data of reply
message.

189
00:11:06,440 --> 00:11:10,377
Sent back to the activity.

190
00:11:10,377 --> 00:11:15,312
[MUSIC]

191
00:11:15,312 --> 00:11:17,781
In summary, applications can use services
to

192
00:11:17,781 --> 00:11:21,810
implement long duration operations in the
background.

193
00:11:21,810 --> 00:11:24,690
A service is particularly useful for
packaging a cohesive set of

194
00:11:24,690 --> 00:11:27,100
functionality into a form that's
independent

195
00:11:27,100 --> 00:11:29,130
of the component that initiates it.

196
00:11:29,130 --> 00:11:31,729
Which enables the service to be shared by
multiple applications.

197
00:11:32,940 --> 00:11:35,590
We have examined several services that
package functionality

198
00:11:35,590 --> 00:11:40,400
for downloading images and generating
system wide unique I.D.'s.

199
00:11:40,400 --> 00:11:42,740
Started services are easy to program for
simple one

200
00:11:42,740 --> 00:11:46,590
way interactions from an activity to a
service, however,.

201
00:11:46,590 --> 00:11:48,720
They require more complex and ad hoc

202
00:11:48,720 --> 00:11:52,810
programming for extended two-way
conversations with their clients.

203
00:11:52,810 --> 00:11:56,400
In contrast, bound services may be a
better choice

204
00:11:56,400 --> 00:12:00,640
for more complex two-way interactions
between activities and services.

205
00:12:00,640 --> 00:12:03,830
For example, they support two-way
conversations.

206
00:12:03,830 --> 00:12:07,320
Use either generic or typed interfaces.

207
00:12:07,320 --> 00:12:11,320
Likewise, common initialization and
communication mechanisms are handled by

208
00:12:11,320 --> 00:12:15,530
the Android service framework and its
connection callback protocol.

209
00:12:15,530 --> 00:12:17,860
Moreover, their lifecycle is managed

210
00:12:17,860 --> 00:12:20,410
automatically by the Android service
framework.

211
00:12:20,410 --> 00:12:23,180
Since they're shut down when no clients
are bound to them.

212
00:12:24,470 --> 00:12:28,130
However, programmers must understand the
details of the

213
00:12:28,130 --> 00:12:32,010
multi step client service connection and
interaction protocol.

214
00:12:32,010 --> 00:12:33,800
Which involves event driven call backs.

215
00:12:35,100 --> 00:12:39,327
Knowledge of the broker pattern helps to
clarify key roles

216
00:12:39,327 --> 00:12:44,683
and relationships In bound services, as
described in upcoming videos.

217
00:12:44,683 --> 00:12:51,969
[MUSIC]

