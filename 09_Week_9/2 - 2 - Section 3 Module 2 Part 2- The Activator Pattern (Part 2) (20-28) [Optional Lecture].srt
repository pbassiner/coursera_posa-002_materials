1
00:00:00,294 --> 00:00:08,212
[MUSIC]

2
00:00:08,212 --> 00:00:11,129
So we're going to start the next topic
which will be a

3
00:00:11,129 --> 00:00:15,650
continuation of the activator pattern that
we started talking about last time.

4
00:00:15,650 --> 00:00:19,010
Now we're going to talk more about the
implementation aspects of the activator.

5
00:00:19,010 --> 00:00:22,150
And then we're going to spend some time
talking about some other patterns that

6
00:00:22,150 --> 00:00:24,680
we've been discussing as we've been
covering

7
00:00:24,680 --> 00:00:29,060
the various bound services, Proxy and
Broker.

8
00:00:29,060 --> 00:00:31,520
So first let's talk about the second half
of activators.

9
00:00:31,520 --> 00:00:35,060
So what we're going to do here is talk
about how the activator pattern can

10
00:00:35,060 --> 00:00:37,290
be applied in the context of Android

11
00:00:37,290 --> 00:00:40,360
or how Android apply is the activator
pattern.

12
00:00:40,360 --> 00:00:45,150
As you may have remem, remembered from our
last discussion, the Activator pattern

13
00:00:46,360 --> 00:00:52,310
participants and the structure maps very,
very nicely onto Android capabilities.

14
00:00:52,310 --> 00:00:54,360
And, as we start talking about the
implementation

15
00:00:54,360 --> 00:00:57,180
steps in the Activator pattern, once
again, it's

16
00:00:57,180 --> 00:00:59,380
remarkable how many of these things map,
kind

17
00:00:59,380 --> 00:01:02,040
of, one to one onto what Android does.

18
00:01:02,040 --> 00:01:04,710
It's also kind of fun if you take a look
at the pattern description, you'll see

19
00:01:04,710 --> 00:01:06,330
that there's a number of different design

20
00:01:06,330 --> 00:01:09,780
alternatives that are described in the
implementation section.

21
00:01:09,780 --> 00:01:13,190
And as we go through the implementation
part here,

22
00:01:13,190 --> 00:01:17,520
I'll illustrate both the generality of the
implementation approaches, as

23
00:01:17,520 --> 00:01:20,920
well as describe how Android addresses
those particular implementation

24
00:01:20,920 --> 00:01:24,810
choices in the things it does that pertain
to activators.

25
00:01:24,810 --> 00:01:28,132
So the first thing to note that you do
when you implement the pattern

26
00:01:28,132 --> 00:01:31,531
is you figure out what the services are
and how do you identify them.

27
00:01:31,531 --> 00:01:34,162
And you also figure out what the service
identifiers

28
00:01:34,162 --> 00:01:37,166
are which are the ways you actually
identify the services.

29
00:01:37,166 --> 00:01:38,686
So of course the idea is

30
00:01:38,686 --> 00:01:43,166
to encapsulate units of self-contained
application behavior,

31
00:01:43,166 --> 00:01:45,566
in the context of something called a

32
00:01:45,566 --> 00:01:49,656
service, that's the generic concept that's
important.

33
00:01:49,656 --> 00:01:52,788
In Android this is really easy because
services are things that

34
00:01:52,788 --> 00:01:56,570
inherit from the service base class or
from the intent service class.

35
00:01:56,570 --> 00:01:58,730
So services are real easy to figure out
in, in Android.

36
00:01:58,730 --> 00:02:01,801
There's a one to one mapping between the
concepts, and the

37
00:02:01,801 --> 00:02:06,460
pattern and some realization of those
concepts in the context of Android.

38
00:02:06,460 --> 00:02:10,060
And if you take a look at this link, or
this path name, you can

39
00:02:10,060 --> 00:02:13,990
find the code for services in Android,
which is kind of fun to look at.

40
00:02:13,990 --> 00:02:15,330
The only real method that you have to

41
00:02:15,330 --> 00:02:18,900
implement is the onBind method, which is
done

42
00:02:18,900 --> 00:02:20,690
for you by the intent service, but
otherwise

43
00:02:20,690 --> 00:02:23,160
you have to fill it in to return null.

44
00:02:23,160 --> 00:02:24,400
And that's a way for it to

45
00:02:24,400 --> 00:02:26,230
tell the difference between different
kinds of services.

46
00:02:27,780 --> 00:02:29,960
There's also the question of service
identifiers.

47
00:02:29,960 --> 00:02:34,740
Now, in conventional networked
applications that use the activator

48
00:02:34,740 --> 00:02:37,460
pattern and we'll talk about a bunch of
those later.

49
00:02:37,460 --> 00:02:44,670
Typically, you identify services via some
kind of identifier scheme like universal

50
00:02:44,670 --> 00:02:50,480
resource identifier or universal resource
locator or an inoperable object reference.

51
00:02:50,480 --> 00:02:55,440
Or a TCPIP host name or host address and a
port

52
00:02:55,440 --> 00:02:56,920
number, those are classic ways

53
00:02:56,920 --> 00:03:00,260
of identifying services in those
environments.

54
00:03:00,260 --> 00:03:05,560
In the context of Android of course we
identify services via intents.

55
00:03:05,560 --> 00:03:08,420
And there's a couple of different elements
in an intent

56
00:03:08,420 --> 00:03:11,880
that are used by the Intents framework in
order to be

57
00:03:11,880 --> 00:03:14,580
able to figure out which services are
being referenced, when we

58
00:03:14,580 --> 00:03:17,270
go ahead and do a start service or a bind
service.

59
00:03:17,270 --> 00:03:21,250
And some of those elements include things
like what's the name, which is optional.

60
00:03:21,250 --> 00:03:22,310
You don't have to give it a name.

61
00:03:22,310 --> 00:03:25,890
You can leave it up to the Android Intents
framework to

62
00:03:25,890 --> 00:03:29,980
figure out which service matches based on
other things beside the name.

63
00:03:29,980 --> 00:03:34,950
If you use the name then it's basically an
explicit intent, it's explicitly naming.

64
00:03:34,950 --> 00:03:37,920
Says this thing goes with that particular
entity.

65
00:03:37,920 --> 00:03:40,570
There's also other things like the action.

66
00:03:40,570 --> 00:03:42,560
What's the action that's being used?

67
00:03:42,560 --> 00:03:44,870
So is it some kind of action that relates

68
00:03:44,870 --> 00:03:49,970
to, you know, viewing something, or
editing something, for example?

69
00:03:49,970 --> 00:03:54,600
Or you know, is it a URL action, you
going to download something?

70
00:03:54,600 --> 00:03:57,170
There's also the data that goes along with
the action.

71
00:03:57,170 --> 00:04:00,920
This would be things like a URL, or some
other, URI, or

72
00:04:00,920 --> 00:04:06,090
path name that identifies either a local,
or a remote piece of content.

73
00:04:06,090 --> 00:04:07,840
So that's another thing that can go into
an intent,

74
00:04:07,840 --> 00:04:12,260
to help identify which service is
responsible for processing the intent.

75
00:04:12,260 --> 00:04:15,520
Yet another thing that can go into an
intent, is something called the category.

76
00:04:15,520 --> 00:04:17,860
For example, there is a category for
launchers which are

77
00:04:17,860 --> 00:04:22,190
things that get up on the basic
application launch screen.

78
00:04:22,190 --> 00:04:25,720
There is other kinds of categories of
applications as well.

79
00:04:25,720 --> 00:04:28,246
So, these are the kinds of things that are
actually

80
00:04:28,246 --> 00:04:32,350
used by the underlying Android system in
the Activator framework.

81
00:04:32,350 --> 00:04:36,050
The activity manager frame service, which
is the Activator part of Android.

82
00:04:36,050 --> 00:04:37,710
In order to figure out, who gets launched,
what

83
00:04:37,710 --> 00:04:42,950
service to run when something gets, gets
sent out.

84
00:04:42,950 --> 00:04:45,750
You also then have to decide which
services

85
00:04:45,750 --> 00:04:49,000
do you want to activate and deactivate on
demand.

86
00:04:49,000 --> 00:04:51,740
And not every service that you might have
in your

87
00:04:51,740 --> 00:04:55,800
system is worthy of being activated and
deactivated on demand.

88
00:04:55,800 --> 00:04:58,320
So you have to kind of figure out a couple
things, you have to figure out

89
00:04:58,320 --> 00:05:00,870
things like what's the overhead for being

90
00:05:00,870 --> 00:05:03,030
able to activate something on demand or
not?

91
00:05:04,250 --> 00:05:06,890
What's the downside to keeping something
running for a long time?

92
00:05:06,890 --> 00:05:09,930
There are also, I think I should mention
this too.

93
00:05:09,930 --> 00:05:15,318
There are also security implications.

94
00:05:15,318 --> 00:05:17,990
[SOUND] So, some services are really
important,

95
00:05:17,990 --> 00:05:20,604
and you want to make sure they're always
there.

96
00:05:20,604 --> 00:05:23,329
You don't want people being able to
dynamically change them.

97
00:05:23,329 --> 00:05:27,124
For example, I don't think it's the case,
that you can, dynamically activate

98
00:05:27,124 --> 00:05:30,820
the radio portion of Android, the part
that does the actual phone management.

99
00:05:30,820 --> 00:05:32,980
That's the sort of turned on by default
and

100
00:05:32,980 --> 00:05:35,840
you don't activate and deactivate that you
could image

101
00:05:35,840 --> 00:05:37,835
that would cause all kinds of problems
with probably

102
00:05:37,835 --> 00:05:40,150
missed calls because things would take too
long to launch.

103
00:05:40,150 --> 00:05:41,940
So you have to figure out what it is that

104
00:05:41,940 --> 00:05:46,560
you want to be able to run dynamically,
and control dynamically.

105
00:05:46,560 --> 00:05:51,260
Some of the services we're seen on Android
that do this, things like email media

106
00:05:51,260 --> 00:05:55,480
playback services, services for sending
and receiving

107
00:05:55,480 --> 00:05:59,520
various kinds of messages, short messages,
multimedia messages.

108
00:05:59,520 --> 00:06:03,890
Alert services that get puh, going to pop
up when calendar

109
00:06:03,890 --> 00:06:06,800
timers expire and elapse and you have to
alert someone

110
00:06:06,800 --> 00:06:08,650
that something is about to happen so they
can go

111
00:06:08,650 --> 00:06:10,990
make a call or join a meeting or something
like that.

112
00:06:10,990 --> 00:06:13,120
So there, those are some of the services
that the Android

113
00:06:13,120 --> 00:06:16,890
developers have deemed relevant to start
and stop in a dynamic way.

114
00:06:18,620 --> 00:06:20,530
If you take a look at packages.

115
00:06:20,530 --> 00:06:25,380
The packages apps directory you will find
lots more examples of bound and started

116
00:06:25,380 --> 00:06:28,720
services there, and there is a bunch of
Android as well in the frameworks part.

117
00:06:30,020 --> 00:06:31,460
The next thing you need to do is figure
out

118
00:06:31,460 --> 00:06:36,000
what the service activation, and
deactivation strategies out to be.

119
00:06:36,000 --> 00:06:39,030
And one of the keys considerations there
is what is

120
00:06:39,030 --> 00:06:43,680
the context in which a service gets
executed, gets routed?

121
00:06:43,680 --> 00:06:45,420
And there's a bunch of different choices.

122
00:06:45,420 --> 00:06:49,520
If you are programing in lower level
operating system environments.

123
00:06:49,520 --> 00:06:53,383
Things like the Linux, inetd or Unix
internet d, inetd that

124
00:06:53,383 --> 00:06:57,268
we talked about briefly last time in the
super server model.

125
00:06:57,268 --> 00:07:00,070
In that particular case, you're probably
going to have

126
00:07:00,070 --> 00:07:03,690
a process be the unit of, of activation.

127
00:07:03,690 --> 00:07:05,330
That's the service execution context.

128
00:07:05,330 --> 00:07:08,300
You're going to launch a process when
something happens.

129
00:07:08,300 --> 00:07:10,370
In other environments like if you're
running in some kind of

130
00:07:10,370 --> 00:07:14,080
embedded system that doesn't have
processes, you might spawn a thread.

131
00:07:14,080 --> 00:07:15,770
If you're running in the context of

132
00:07:15,770 --> 00:07:18,090
something like Android, if you think about
what's

133
00:07:18,090 --> 00:07:20,630
being launched here, which is basically a
service,

134
00:07:20,630 --> 00:07:22,510
that's really not a process or a thread.

135
00:07:22,510 --> 00:07:26,620
It's really more of a middleware-centric
container of sorts,

136
00:07:26,620 --> 00:07:30,590
so it's an abstraction that it hosts some
application logic.

137
00:07:30,590 --> 00:07:34,040
And actually it can run in a process or
not, or it could

138
00:07:34,040 --> 00:07:35,590
run in a thread, or not, but

139
00:07:35,590 --> 00:07:38,120
it's basically a somewhat higher level
abstraction.

140
00:07:38,120 --> 00:07:39,780
So you have to decide what the right level
of

141
00:07:39,780 --> 00:07:42,720
granularity is, obviously Android does it
as a middleware container.

142
00:07:43,960 --> 00:07:45,670
You also have to figure out how the
service

143
00:07:45,670 --> 00:07:49,820
is going to register itself with the
activation framework.

144
00:07:49,820 --> 00:07:55,340
Is it going to do it dynamically, by some
kind of API call like register service?

145
00:07:55,340 --> 00:07:57,030
Is it going to do it more statically,

146
00:07:57,030 --> 00:08:00,710
by defining various things in a manifest
file?

147
00:08:00,710 --> 00:08:05,980
So that when things get started, the, the
system knows which, which place to launch,

148
00:08:05,980 --> 00:08:08,290
and how to dynamically load the various
resources

149
00:08:08,290 --> 00:08:10,270
in it and so on, those are decisions.

150
00:08:10,270 --> 00:08:14,190
Android typically goes with a static text
file approach with the manifest file.

151
00:08:15,240 --> 00:08:18,010
You also have to decide whether the
activation framework

152
00:08:18,010 --> 00:08:20,900
is going to be responsible for
initializing the service or not.

153
00:08:20,900 --> 00:08:23,320
And there's a couple of different cases
here.

154
00:08:23,320 --> 00:08:27,135
If a service doesn't require any
initialization, it just starts.

155
00:08:27,135 --> 00:08:29,600
Then obviously the framework doesn't have
a whole lot of work to do.

156
00:08:29,600 --> 00:08:32,640
If the service requires a certain state.

157
00:08:32,640 --> 00:08:37,080
Then it's up to the developer of the
activation framework, as

158
00:08:37,080 --> 00:08:41,450
to whether the activation framework is
responsible for initializing the state.

159
00:08:41,450 --> 00:08:44,120
Or whether the service that gets started

160
00:08:44,120 --> 00:08:47,370
is responsible for initializing its own
state.

161
00:08:47,370 --> 00:08:50,480
In Android, anything that's important,
gets done by the service.

162
00:08:50,480 --> 00:08:55,010
It's not really done on a service basis by
the underlying middleware.

163
00:08:56,540 --> 00:08:58,700
There's, also, another set of
considerations

164
00:08:58,700 --> 00:09:00,790
about how do we deactivate services.

165
00:09:00,790 --> 00:09:03,660
So, activating services is just half the
battle.

166
00:09:03,660 --> 00:09:06,230
In the Activator model, once you activate
something, you

167
00:09:06,230 --> 00:09:08,080
have to figure out how to shut it down.

168
00:09:08,080 --> 00:09:10,150
Of course you could keep it running for an
indefinite period

169
00:09:10,150 --> 00:09:13,390
of time, but to some extent, that would
defeat the purpose of

170
00:09:13,390 --> 00:09:17,750
an activator, because you really want to
reserve, or preserve resources,

171
00:09:17,750 --> 00:09:21,370
or conserve resources by shutting things
down when they're not being used.

172
00:09:21,370 --> 00:09:24,120
And there's a couple of different
techniques you can use here.

173
00:09:24,120 --> 00:09:26,620
You can have the service trigger the
deactivation.

174
00:09:26,620 --> 00:09:30,470
The service can say I'm done, I'll shut
myself down.

175
00:09:30,470 --> 00:09:33,390
That's kind of the way intent services
work.

176
00:09:33,390 --> 00:09:36,660
You could have the client trigger things,
some

177
00:09:36,660 --> 00:09:39,800
client can say service stop yourself,
that's another model.

178
00:09:39,800 --> 00:09:45,010
And then you could also have things where
the activator decides to shut stuff down.

179
00:09:45,010 --> 00:09:47,890
And that could be based on a variety of
different things.

180
00:09:47,890 --> 00:09:51,770
Android supports all of these different
models in various degrees, right?

181
00:09:51,770 --> 00:09:56,000
So with started services when the service
starts to run, it will

182
00:09:56,000 --> 00:10:01,320
run indefinitely and it has to stop itself
by saying stop self or.

183
00:10:01,320 --> 00:10:04,180
So that's that's the service trigger
deactivation model.

184
00:10:04,180 --> 00:10:07,030
Or another component could say, service, I
want you

185
00:10:07,030 --> 00:10:09,740
to stop yourself, so that's a client
triggered approach.

186
00:10:09,740 --> 00:10:13,020
And of course the Android runtime system
might start

187
00:10:13,020 --> 00:10:15,130
to notice that memory is getting low and
it may

188
00:10:15,130 --> 00:10:17,070
say, hey, you know, you gotta, you gotta
shut

189
00:10:17,070 --> 00:10:20,300
yourself down, so that's kind of the
activator trigger model.

190
00:10:20,300 --> 00:10:23,310
With bound services, typically the way
things work is that multiple

191
00:10:23,310 --> 00:10:26,530
clients can connect to the service and as
long as some

192
00:10:26,530 --> 00:10:29,200
of them or one of them is available and
has a

193
00:10:29,200 --> 00:10:33,680
binding open to that service, the service
will remain in memory.

194
00:10:33,680 --> 00:10:35,780
We'll see some interesting, sort of hybrid
approaches

195
00:10:35,780 --> 00:10:36,890
in a minute when I show you some

196
00:10:36,890 --> 00:10:40,300
of the implementation code that appears in
Android,

197
00:10:40,300 --> 00:10:41,590
how they deal with some of these issues.

198
00:10:41,590 --> 00:10:42,850
It's kind of cool.

199
00:10:42,850 --> 00:10:45,380
So you can take a look at the website,
there's a

200
00:10:45,380 --> 00:10:48,680
link here that gives you more information
about service life cycle.

201
00:10:48,680 --> 00:10:51,660
But, be aware that Android gives you all
the tools to do the different

202
00:10:51,660 --> 00:10:55,540
kinds of deactivation strategies, and it's
up to you to figure out what to do.

203
00:10:55,540 --> 00:10:58,710
The key thing you typically don't want to
do is not let the service

204
00:10:58,710 --> 00:11:00,550
run indefinitely if nobody's using it
because

205
00:11:00,550 --> 00:11:03,730
that, that would be overly consumptive of
resources.

206
00:11:05,530 --> 00:11:06,470
Some other things you need to do.

207
00:11:06,470 --> 00:11:11,200
Figure out how you're going to
interoperate between the activator

208
00:11:11,200 --> 00:11:14,590
and the service execution context and the
service itself.

209
00:11:14,590 --> 00:11:16,300
So, how do these things interact with each
other?

210
00:11:16,300 --> 00:11:20,580
The key thing here is the interaction
between the service execution context.

211
00:11:20,580 --> 00:11:24,030
Which is typically either a process or a
piece of middleware container.

212
00:11:24,030 --> 00:11:25,990
And the service, which is the thing that's
doing

213
00:11:25,990 --> 00:11:29,910
the business logic that is defined by the
end programmers.

214
00:11:29,910 --> 00:11:32,820
So there's a couple of different
alternatives here.

215
00:11:32,820 --> 00:11:35,820
One thing that you typically have to do is
come up with some way

216
00:11:35,820 --> 00:11:40,920
for there to be call backs, either from
the execution context to the service.

217
00:11:40,920 --> 00:11:44,900
Or from the service back to the execution
context to do various kinds of things.

218
00:11:44,900 --> 00:11:47,710
Android supports both of these means of
course.

219
00:11:47,710 --> 00:11:51,390
The most obvious set of ways these
interact is with the life cycle

220
00:11:51,390 --> 00:11:53,550
call back hooks, that are dispatched

221
00:11:53,550 --> 00:11:56,390
automatically by the Android run time
framework.

222
00:11:56,390 --> 00:11:59,760
When a service starts, to call on create.

223
00:11:59,760 --> 00:12:01,330
When intent shows up.

224
00:12:01,330 --> 00:12:05,079
Via on start command, when you do the
various bind

225
00:12:05,079 --> 00:12:09,330
service calls which trigger the onbind
method and so on.

226
00:12:09,330 --> 00:12:12,110
So this is a bunch of callback hooks that
you can define and

227
00:12:12,110 --> 00:12:15,040
those are interactions between the Android
container

228
00:12:15,040 --> 00:12:18,410
infrastructure and your service and your
hooks.

229
00:12:18,410 --> 00:12:21,610
And of course, your service can also make
call backs into

230
00:12:21,610 --> 00:12:25,320
the Android container infrastructure to
ask it for various things as well.

231
00:12:25,320 --> 00:12:28,560
But that interaction is something that's
very stylized and important to understand.

232
00:12:30,220 --> 00:12:33,110
Then you also have to figure out how to
implement the activator.

233
00:12:33,110 --> 00:12:34,990
Actually do the activation.

234
00:12:34,990 --> 00:12:39,360
And in Android this is done by something
called the activity manager service.

235
00:12:39,360 --> 00:12:40,440
Which you can take a look at, it's

236
00:12:40,440 --> 00:12:44,000
very, very complicated, piece of code,
very large.

237
00:12:44,000 --> 00:12:46,220
And it handles activation for lots

238
00:12:46,220 --> 00:12:50,010
of things, activities, services, broadcast
receivers.

239
00:12:50,010 --> 00:12:50,990
And so on, and so forth here.

240
00:12:50,990 --> 00:12:52,530
It plays multiple roles.

241
00:12:52,530 --> 00:12:53,930
Even though it's got the name, Activity

242
00:12:53,930 --> 00:12:57,250
Manager Service, it manages other things,
besides activities.

243
00:12:57,250 --> 00:12:58,860
There's a couple of issues to consider
here.

244
00:12:59,950 --> 00:13:04,120
When you design the activator, do you want
to have a singleton activator or

245
00:13:04,120 --> 00:13:06,660
a share activator that's use by all

246
00:13:06,660 --> 00:13:10,690
the services running in infrastructure and
environment?

247
00:13:10,690 --> 00:13:14,610
Do you want to have one that's exclusive
on a per service basis?

248
00:13:14,610 --> 00:13:18,191
Do you want to have some kind of
distributer activator where you may have

249
00:13:18,191 --> 00:13:21,920
some centralize node that's keeping track
who gets to run and where to run?

250
00:13:21,920 --> 00:13:26,110
And so on and again there's no one right,
one, one size

251
00:13:26,110 --> 00:13:29,980
fits all or one right solution to all of
these different design considerations.

252
00:13:29,980 --> 00:13:31,910
The trick is to figure out what the
alternatives

253
00:13:31,910 --> 00:13:34,690
are and make the choices that make sense
for you.

254
00:13:34,690 --> 00:13:38,120
In Android they have essentially a
singleton or shared activator.

255
00:13:38,120 --> 00:13:40,670
The activity manager service is the guy
that

256
00:13:40,670 --> 00:13:43,870
is the role, the component in Android, the
service.

257
00:13:43,870 --> 00:13:46,530
The super service, that activates other
things.

258
00:13:48,130 --> 00:13:49,870
Another consideration here is what is the

259
00:13:49,870 --> 00:13:53,820
degree of transparency with respect to
activation?

260
00:13:53,820 --> 00:13:59,130
Is this something where the application
client has to make a special

261
00:13:59,130 --> 00:14:03,760
call to get a service started, and then it
does other requests?

262
00:14:03,760 --> 00:14:06,378
That's what's called explicit activation.

263
00:14:06,378 --> 00:14:08,390
Or, is it something where you just make a
method

264
00:14:08,390 --> 00:14:11,600
call and the underlying activation

265
00:14:11,600 --> 00:14:14,960
framework activates the service
implicitly?

266
00:14:14,960 --> 00:14:19,970
And without you having to think about it
directly and do something special.

267
00:14:19,970 --> 00:14:21,640
So the way it works in Android which is

268
00:14:21,640 --> 00:14:23,790
different from other pieces of middleware
by the way.

269
00:14:23,790 --> 00:14:25,570
Is you have to do explicit activation.

270
00:14:25,570 --> 00:14:31,390
You have to say start service or bind
service, and that triggers the service to

271
00:14:31,390 --> 00:14:35,330
be started and then once that happens,
then you can send messages back and forth.

272
00:14:35,330 --> 00:14:38,370
Now, you can also, to some extent, kind of
do

273
00:14:38,370 --> 00:14:41,445
a little hybrid thing where you can pass
in an intent.

274
00:14:41,445 --> 00:14:46,220
Or extras with the intent that goes along
with the original service, so there are a

275
00:14:46,220 --> 00:14:51,960
few kind of things that, that straddle the
line between implicit and explicit.

276
00:14:51,960 --> 00:14:55,250
But in technologies like Corva, we'll see

277
00:14:55,250 --> 00:14:58,360
later there's much more support for
implicit activation.

278
00:14:58,360 --> 00:15:00,810
You just make a method call and boom
something

279
00:15:00,810 --> 00:15:03,640
magic happens under the hood to get the
job done.

280
00:15:03,640 --> 00:15:08,280
So what I'd like to do now is take a tour
through a

281
00:15:08,280 --> 00:15:14,140
piece of an interesting service in Android
that demonstrates the use of activator.

282
00:15:14,140 --> 00:15:16,450
And I'm just going to look at a part of it
now.

283
00:15:16,450 --> 00:15:18,540
Later, when we talk about the broker
pattern,

284
00:15:18,540 --> 00:15:20,140
we're going to come back and look at the

285
00:15:20,140 --> 00:15:21,990
full blown glory of this stuff, because
it's

286
00:15:21,990 --> 00:15:24,570
really cool and it's got lots of
interesting interactions.

287
00:15:24,570 --> 00:15:28,130
This implementation, by the way, actually
has a lot in common

288
00:15:28,130 --> 00:15:32,590
with the download file stuff you're doing
that's the asynchronous version.

289
00:15:32,590 --> 00:15:34,235
Because it relies on passing in

290
00:15:34,235 --> 00:15:38,170
asynchronous callback objects using one
way

291
00:15:38,170 --> 00:15:42,700
methods that will not block the caller
while things are taking place.

292
00:15:42,700 --> 00:15:46,480
What this thing is, it's a network
settings activity.

293
00:15:46,480 --> 00:15:49,400
And you can use it, if your phone supports
it, in

294
00:15:49,400 --> 00:15:55,090
order to be able to find out what carrier
networks are available.

295
00:15:55,090 --> 00:15:57,710
You know, so like you don't often see this
too much

296
00:15:57,710 --> 00:16:00,860
when you're in the U.S. usually you're
with a single provider.

297
00:16:00,860 --> 00:16:02,580
You know, your phone just starts up and
it's

298
00:16:02,580 --> 00:16:06,570
running with Sprint or it's running with
AT&T or Verizon.

299
00:16:06,570 --> 00:16:11,300
When you go overseas, however often times
you're roaming, and there

300
00:16:11,300 --> 00:16:15,420
will be a range of different network
providers to choose from.

301
00:16:15,420 --> 00:16:20,160
And so this particular network setting's
app, or activity allows

302
00:16:20,160 --> 00:16:22,670
you to be able to see the networks that
are available.

303
00:16:22,670 --> 00:16:25,230
And then you can, conceivably choose one
that you want to use.

304
00:16:26,410 --> 00:16:27,850
So here's basically the way this works.

305
00:16:27,850 --> 00:16:29,690
And, and by the way all the source code is
available.

306
00:16:29,690 --> 00:16:31,320
You can take a look at that if you're
interested.

307
00:16:31,320 --> 00:16:34,120
So they have this NetworkSettings
activity.

308
00:16:34,120 --> 00:16:37,630
And it has an on create method and so when
you launch

309
00:16:37,630 --> 00:16:41,650
this thing, it turns around and it makes a
call to start service.

310
00:16:41,650 --> 00:16:46,640
And it invokes start service to go ahead
and launch the network query service.

311
00:16:46,640 --> 00:16:48,690
And it, but it doesn't talk to that
directly,

312
00:16:48,690 --> 00:16:51,470
of course, it talks to that activity
manager service.

313
00:16:51,470 --> 00:16:53,960
And the activity manager service takes the
request and all

314
00:16:53,960 --> 00:16:57,715
the other things and then it goes ahead
and then launches.

315
00:16:57,715 --> 00:17:03,390
The process to run the network query
service if it's not already running.

316
00:17:03,390 --> 00:17:05,500
So that's really the activator part right
there.

317
00:17:05,500 --> 00:17:07,610
So it's activating it on demand.

318
00:17:07,610 --> 00:17:09,890
And then what happens is there's an
opportunity

319
00:17:09,890 --> 00:17:13,370
the service gets to initialize itself via
its on

320
00:17:13,370 --> 00:17:16,420
create hooke method, it's lifecycle method
and it

321
00:17:16,420 --> 00:17:18,480
goes ahead and goes what it needs to do.

322
00:17:18,480 --> 00:17:21,480
And then what's interesting, and we're not
going to look at this in any detail right

323
00:17:21,480 --> 00:17:24,830
now, but we'll come back and look at this
later when we talk about the broker.

324
00:17:24,830 --> 00:17:27,840
The next thing that the activity does
after it

325
00:17:27,840 --> 00:17:31,380
calls startService, is it turns around and
it calls bindService.

326
00:17:31,380 --> 00:17:33,770
So, this is kind of an unusual model.

327
00:17:33,770 --> 00:17:36,370
It calls startService followed by
bindService.

328
00:17:36,370 --> 00:17:37,440
Which looks a little weird, right?

329
00:17:37,440 --> 00:17:40,790
So far we've only looked at services that
called start service, which

330
00:17:40,790 --> 00:17:42,930
are started services, or services that

331
00:17:42,930 --> 00:17:45,430
called bind service, which are bound
services.

332
00:17:45,430 --> 00:17:47,700
But this is an example of something that
does both.

333
00:17:47,700 --> 00:17:49,640
And if you read the comments in the code,
it basically

334
00:17:49,640 --> 00:17:52,930
says it does this so that when we call
start service.

335
00:17:52,930 --> 00:17:55,280
The service will remain running
indefinitely.

336
00:17:55,280 --> 00:17:57,220
So you'll want the service up and running
all the time.

337
00:17:57,220 --> 00:18:02,200
And then we call bindService so we get
back a binder object and we

338
00:18:02,200 --> 00:18:05,680
can interact with the service by using

339
00:18:05,680 --> 00:18:10,820
asynchronous binder communication via one
way AIDL calls.

340
00:18:10,820 --> 00:18:13,100
And we'll look at that in a little bit
more detail later.

341
00:18:13,100 --> 00:18:15,080
But I thought that was kind of an
interesting example of

342
00:18:15,080 --> 00:18:19,360
using startService to explicitly activate
something that will remain around and then

343
00:18:19,360 --> 00:18:22,380
use bindService immediately after that, in
order to get back a

344
00:18:22,380 --> 00:18:26,220
proxy that the client can use to invoke
methods on the service.

345
00:18:26,220 --> 00:18:28,350
So it's sort of a hybrid approach.

346
00:18:28,350 --> 00:18:29,690
But, the key point there is that it has
that it

347
00:18:29,690 --> 00:18:32,636
has the examples of the activator that
launches the serves on demand.

348
00:18:32,636 --> 00:18:37,140
Any questions about that?

349
00:18:37,140 --> 00:18:38,750
So again, if you're curious take a look at
the source

350
00:18:38,750 --> 00:18:41,444
query, it has a bunch of really cool
things going on there.

351
00:18:41,444 --> 00:18:46,600
It registers uh,handler with the
underlying radio interface layer, which is

352
00:18:46,600 --> 00:18:49,850
the part that actually keeps track of the
service, the, the

353
00:18:49,850 --> 00:18:53,420
carriers and the network availability and
when things change the call

354
00:18:53,420 --> 00:18:56,460
backs that get made in the service, it's,
it's really cool.

355
00:18:56,460 --> 00:18:59,015
So look at that later.

356
00:18:59,015 --> 00:19:01,860
Okay, so to go ahead and summarize this
particular

357
00:19:01,860 --> 00:19:07,840
discussion, Android started and bound
services use the activator pattern.

358
00:19:07,840 --> 00:19:09,870
And as you can see here, they, they use
the

359
00:19:09,870 --> 00:19:12,830
stuff that, that pretty much straight out
of the book.

360
00:19:12,830 --> 00:19:14,230
Looks just like what you'd see there.

361
00:19:15,530 --> 00:19:20,350
These services can be run in different
execution contexts.

362
00:19:20,350 --> 00:19:23,220
Most typically if you don't do anything to
the contrary, they end up

363
00:19:23,220 --> 00:19:28,220
running into the same process as the
caller, which is typically an activity.

364
00:19:28,220 --> 00:19:31,930
But without too much effort, you can tweak
the manifest file

365
00:19:31,930 --> 00:19:34,856
to say, I want this thing to run on a
separate process.

366
00:19:34,856 --> 00:19:36,480
So it can then be launched in a separate

367
00:19:36,480 --> 00:19:39,550
execution context than the context that
was originally calling it.

368
00:19:40,940 --> 00:19:43,130
And, if you want to be able to do threads,
and have

369
00:19:43,130 --> 00:19:46,460
the service run in a thread, then you
could program that by

370
00:19:46,460 --> 00:19:50,260
inheriting from IntentService or doing
something else not unlike what you guys

371
00:19:50,260 --> 00:19:52,150
have done for your programming assignments

372
00:19:52,150 --> 00:19:57,075
to implement multithreading on the service
side.

373
00:19:57,075 --> 00:19:58,870
Okay, so that's basically activator.

374
00:19:58,870 --> 00:20:03,060
You know, to recap what we talked about
last time, activator's a pattern.

375
00:20:03,060 --> 00:20:05,780
That makes it possible to launch things on
demand, and

376
00:20:05,780 --> 00:20:08,370
we talked about sort of the pros and cons
of that.

377
00:20:08,370 --> 00:20:13,020
Then we just saw some examples in Android
where it gets used in order to work

378
00:20:13,020 --> 00:20:15,945
with launching bound or started services
to do

379
00:20:15,945 --> 00:20:20,304
various behavior processing on behalf of
the client applications.

380
00:20:20,304 --> 00:20:27,849
[MUSIC]

