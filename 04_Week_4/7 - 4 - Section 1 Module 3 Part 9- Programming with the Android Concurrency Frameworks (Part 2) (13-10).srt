1
00:00:00,000 --> 00:00:08,148
[MUSIC].

2
00:00:08,148 --> 00:00:10,548
Welcome to the next part of the module on
Android

3
00:00:10,548 --> 00:00:12,948
Concurrency Frameworks, which continues
our

4
00:00:12,948 --> 00:00:15,590
analysis of the ThreadedDownloads
Application.

5
00:00:16,920 --> 00:00:19,770
In this part, we'll show how to implement
three different

6
00:00:19,770 --> 00:00:23,420
concurrency models using the Android
Hammer and ASYNC Tasks frameworks.

7
00:00:25,030 --> 00:00:28,894
We'll start by analyzing the simplest of
the three concurrency models, which is

8
00:00:28,894 --> 00:00:32,660
triggered when the user selects the Run
Runnable button on the user interface.

9
00:00:34,460 --> 00:00:37,255
This selection initiates a call to the Run
Runnable

10
00:00:37,255 --> 00:00:40,780
Method in the ThreadedDownloads class
shown at this path name.

11
00:00:42,590 --> 00:00:44,790
This method uses the post Runnable
mechanism of

12
00:00:44,790 --> 00:00:47,460
the Hammer framework described in this
earlier video.

13
00:00:49,260 --> 00:00:52,856
The ThreadedDownloads application uses
this framework to retrieve

14
00:00:52,856 --> 00:00:55,708
and display an image by starting a
Background thread,

15
00:00:55,708 --> 00:00:58,188
downloading the image in that thread, and
then

16
00:00:58,188 --> 00:01:02,190
posting a Runnable command to the user
interface Thread.

17
00:01:02,190 --> 00:01:04,430
Instructing it to display the downloaded
image.

18
00:01:05,990 --> 00:01:09,675
The RunRunnable Method called when a user
clicks the Run Runnable

19
00:01:09,675 --> 00:01:13,561
button on the user interface, begins by
obtaining the requested URL

20
00:01:13,561 --> 00:01:17,313
from the user's input, and then informing
the user that download

21
00:01:17,313 --> 00:01:20,430
has begun via a process dialog, as shown
at this link.

22
00:01:21,790 --> 00:01:25,270
Finally, this method creates and starts a
new thread to download the

23
00:01:25,270 --> 00:01:27,310
requested image in the background, via

24
00:01:27,310 --> 00:01:30,540
an anonymous instance of the
RunnableWithHandelers class.

25
00:01:31,980 --> 00:01:34,896
This private class implements Runnable,
and its constructors

26
00:01:34,896 --> 00:01:36,850
stores the requested URL in a data member.

27
00:01:38,630 --> 00:01:41,598
Its run hook method executes in a
background Thread, and calls

28
00:01:41,598 --> 00:01:44,719
the Download Image Method to retrieve the
image from the server.

29
00:01:46,360 --> 00:01:50,630
If all goes well, the downloaded images is
displayed in the user interface Thread.

30
00:01:50,630 --> 00:01:54,342
By posting an anonymous Runnable command
all the activities run on UI

31
00:01:54,342 --> 00:01:58,730
Thread Method, which uses an internal
handler as shown in this earlier video.

32
00:02:00,680 --> 00:02:03,080
The run hook method of this command,
dismisses

33
00:02:03,080 --> 00:02:06,129
the progress dialogue and calls the
displayImage Method.

34
00:02:07,610 --> 00:02:10,890
This method is shared by all three
concurrency models.

35
00:02:10,890 --> 00:02:15,553
It shows the image on the screen, if the
download and conversion process succeeded.

36
00:02:15,553 --> 00:02:21,983
[MUSIC].

37
00:02:21,983 --> 00:02:25,643
We'll now analyze the second of the three
concurrency models, which is

38
00:02:25,643 --> 00:02:29,750
triggered when the user selects the Run
Messages button on the user interface.

39
00:02:31,080 --> 00:02:33,531
This selection initiates a call to the Run
Messages

40
00:02:33,531 --> 00:02:36,770
Method in the ThreadedDownloads class,
shown at this path name.

41
00:02:38,200 --> 00:02:40,180
This method uses the send message
mechanism of

42
00:02:40,180 --> 00:02:43,050
the hammer framework, described in this
earlier video.

43
00:02:44,780 --> 00:02:48,980
The Threaded downloads application uses
this framework to retrieve and display an

44
00:02:48,980 --> 00:02:53,870
image by starting a background Thread,
downloading the image in that Thread.

45
00:02:53,870 --> 00:02:57,230
And then sending several messages to a
Handler associated with the user

46
00:02:57,230 --> 00:02:59,414
interface Thread, instructing it to
display

47
00:02:59,414 --> 00:03:01,290
the downloaded image in that Thread.

48
00:03:03,220 --> 00:03:04,970
This solution is more complicated, than

49
00:03:04,970 --> 00:03:08,050
the Run Runnable implementation examined
previously.

50
00:03:08,050 --> 00:03:10,590
Since it passes messages from a Background
Thread

51
00:03:10,590 --> 00:03:14,150
to the User Interface Thread, via a
MessageHandler class.

52
00:03:14,150 --> 00:03:18,230
Which extends Handler and defines three
types of messages, that the background

53
00:03:18,230 --> 00:03:19,550
Thread can pass to the user

54
00:03:19,550 --> 00:03:22,780
interface Thread, specifying which
processing to perform.

55
00:03:24,330 --> 00:03:27,320
MessageHandler also contains a weak
reference, which enables it

56
00:03:27,320 --> 00:03:30,080
to be garbage collected properly, as
described at this link.

57
00:03:31,430 --> 00:03:33,684
Its constructor initializes this weak
reference, to

58
00:03:33,684 --> 00:03:35,659
store a reference to the enclosing
activity.

59
00:03:37,040 --> 00:03:40,151
The handleMessage hook method processes
the specified messages passed

60
00:03:40,151 --> 00:03:43,140
to the message handler associated with the
user interface Thread.

61
00:03:44,730 --> 00:03:48,954
These messages instruct the Handler to
start showing the progress dialog,

62
00:03:48,954 --> 00:03:52,990
dismiss it, or display the designated
image via an image view object.

63
00:03:54,410 --> 00:03:57,855
An instance of MessageHandler is defined
as a data member in the

64
00:03:57,855 --> 00:04:00,780
ThreadedDownloads class, which passes a
reference

65
00:04:00,780 --> 00:04:03,580
to itself to the MessageHandler's
constructor.

66
00:04:05,340 --> 00:04:09,305
The runMessages Method, called when a user
clicks the Run Messages button on

67
00:04:09,305 --> 00:04:13,640
the user interface, begins by obtaining
the requested URL from the users input.

68
00:04:15,050 --> 00:04:18,885
It then creates and starts a new thread to
download the requested image

69
00:04:18,885 --> 00:04:20,900
in the background, via an anonymous

70
00:04:20,900 --> 00:04:23,530
instance of the Runnable with Messages
class.

71
00:04:24,950 --> 00:04:28,024
This private class implements Runnable,
and its constructor

72
00:04:28,024 --> 00:04:30,110
stores the requests URL in a data member.

73
00:04:31,390 --> 00:04:33,499
Its Run hook Method executes in a
background

74
00:04:33,499 --> 00:04:35,722
Thread, and uses the Hammer framework to
send

75
00:04:35,722 --> 00:04:38,629
messages to the MessageHandler object
which processes them

76
00:04:38,629 --> 00:04:40,799
in the context of the user interface
thread.

77
00:04:41,910 --> 00:04:43,527
Run first or is a copy of the reference to

78
00:04:43,527 --> 00:04:46,880
the MessageHandler, using the byte code
optimization described at this link.

79
00:04:48,080 --> 00:04:50,574
It then creates and sends a message
instructing the

80
00:04:50,574 --> 00:04:53,910
MessageHandler to start showing the
ProgressDialog to the user.

81
00:04:55,130 --> 00:04:59,550
Next it calls the downloadImage Method, to
retrieve the image from the remote server.

82
00:05:00,920 --> 00:05:03,416
If all goes well, a message is created and
sent

83
00:05:03,416 --> 00:05:07,710
to the user interface Thread, instructing
it to dismiss the ProgressDialog.

84
00:05:08,830 --> 00:05:11,697
Finally, a message is created and sent
instructing the

85
00:05:11,697 --> 00:05:15,212
MessageHandler to display the image in the
user interface Thread.

86
00:05:15,212 --> 00:05:22,316
[MUSIC].

87
00:05:22,316 --> 00:05:26,408
We'll now analyze the third and final
concurrency model, which is triggered

88
00:05:26,408 --> 00:05:29,890
when the user selects the Run Async button
on the user interface.

89
00:05:31,690 --> 00:05:34,810
This selection initiates a call to the
runAsyncTask Method,

90
00:05:34,810 --> 00:05:37,850
in the ThreadedDownloads class, shown at
this path name.

91
00:05:39,600 --> 00:05:42,600
This method uses the Async task framework,
which executes

92
00:05:42,600 --> 00:05:45,720
long duration operations in one or more
background threads,

93
00:05:45,720 --> 00:05:48,180
and then gives the user interface Thread a
chance

94
00:05:48,180 --> 00:05:51,480
to process the results as described in
these earlier videos.

95
00:05:52,910 --> 00:05:56,760
The ThreadedDownloads application uses
this framework to retrieve and display an

96
00:05:56,760 --> 00:06:00,770
image by calling the execute template
method on an AsyncTask object.

97
00:06:00,770 --> 00:06:02,572
Which download the image in a Background

98
00:06:02,572 --> 00:06:05,520
Thread that's managed internally by the
AsyncTask framework.

99
00:06:06,860 --> 00:06:10,764
When the image has been downloaded, the
framework invokes a hook method

100
00:06:10,764 --> 00:06:15,144
that displays the downloaded image in the
context of the user interface thread.

101
00:06:15,144 --> 00:06:18,058
Compared with the Hammer based solutions,
especially

102
00:06:18,058 --> 00:06:20,630
the second one that sends and handles
messages.

103
00:06:21,780 --> 00:06:23,960
The Async task solution is easy to
program.

104
00:06:23,960 --> 00:06:26,161
Since there's no need to manipulate

105
00:06:26,161 --> 00:06:29,910
Threads, Messages, Runnables, or Handlers
explicitly.

106
00:06:31,040 --> 00:06:35,395
Instead, the framework uses the Template
Method pattern to allow application

107
00:06:35,395 --> 00:06:40,000
developers to customize hook messages
inherited from the Async Task base class.

108
00:06:41,480 --> 00:06:43,336
The Run Async Task Method begins by

109
00:06:43,336 --> 00:06:46,240
obtaining the requested URL, from the
users input.

110
00:06:47,520 --> 00:06:51,670
It then creates and executes an anonymous
instance of the download task class.

111
00:06:53,030 --> 00:06:57,370
Download task is a private class, that
extends AsyncTask.

112
00:06:57,370 --> 00:07:00,184
Parameterizing it with a string for the
URL type,

113
00:07:00,184 --> 00:07:02,596
and a bitmap that's used as the return
type

114
00:07:02,596 --> 00:07:05,075
for the do in Background Hook Method, and
as

115
00:07:05,075 --> 00:07:07,870
a parameter to the on post execute hook
method.

116
00:07:09,770 --> 00:07:12,906
When the execute template method is called
on the download

117
00:07:12,906 --> 00:07:17,390
task object, the AsyncTask framework
invokes its on pre-execute hook method.

118
00:07:17,390 --> 00:07:20,302
Which starts showing the ProgressDialog in
the context of the

119
00:07:20,302 --> 00:07:24,110
user interface Thread, before the task
starts executing in the background.

120
00:07:25,130 --> 00:07:27,992
When on pre-execute returns, the framework
invokes the do in

121
00:07:27,992 --> 00:07:30,880
background hook method in the context of a
Background Thread.

122
00:07:32,000 --> 00:07:36,556
Do in background forwards the URL past
originally execute to the downloadImage

123
00:07:36,556 --> 00:07:41,120
method, which retrieves the requested
image and returns it to the framework.

124
00:07:42,250 --> 00:07:46,597
Finally, if all goes well, the framework
invokes the on post execute hook method

125
00:07:46,597 --> 00:07:48,487
in the context of the user interface

126
00:07:48,487 --> 00:07:51,480
Thread, passing the downloaded images to
parameter.

127
00:07:53,090 --> 00:07:55,675
Outpost execute dismisses the
ProgressDialogue, and

128
00:07:55,675 --> 00:07:57,210
displays the image to the user.

129
00:07:58,500 --> 00:08:01,203
All the switching of contexts between the
user interface and

130
00:08:01,203 --> 00:08:03,270
Background Threads, are handled seamlessly

131
00:08:03,270 --> 00:08:05,532
and transparently by the AsychTask
framework.

132
00:08:05,532 --> 00:08:07,763
[BLANK_AUDIO]

133
00:08:07,763 --> 00:08:12,387
[MUSIC].

134
00:08:12,387 --> 00:08:16,483
Now that we've analysed all three
concurrency models, implemented by the

135
00:08:16,483 --> 00:08:19,427
threaded downloads application, we'll
compare and

136
00:08:19,427 --> 00:08:22,476
contrast these solutions along several
dimensions.

137
00:08:22,476 --> 00:08:24,306
Including usability for simple and

138
00:08:24,306 --> 00:08:27,979
complex applications, scalability,
flexibility and efficiency.

139
00:08:28,980 --> 00:08:32,001
AsyncTask provides a set of tightly
integrated classes, that

140
00:08:32,001 --> 00:08:35,879
simplify the development of both simple
and complex concurrent applications.

141
00:08:35,879 --> 00:08:39,926
Whose long duration operations run in one
or more background threads and publish the

142
00:08:39,926 --> 00:08:42,092
results to the user interface thread
without

143
00:08:42,092 --> 00:08:45,750
manipulating threads, handlers, messengers
or runables explicitly.

144
00:08:46,780 --> 00:08:50,710
It also enables relatively transparent
scalability by it's thread pull executor.

145
00:08:51,770 --> 00:08:55,130
However, although the AsyncTask framework
is scalable and easy to use

146
00:08:55,130 --> 00:08:59,114
for both simple and complex concurrent
applications, it's not very flexible.

147
00:08:59,114 --> 00:09:02,420
Since its only intended for interactions
between the User Interface

148
00:09:02,420 --> 00:09:04,187
Thread and background Threads, but

149
00:09:04,187 --> 00:09:06,810
not interactions between background
Threads alone.

150
00:09:07,990 --> 00:09:11,750
Likewise, its internal framework
implementation is very sophisticated.

151
00:09:11,750 --> 00:09:13,670
So it incurs a higher overhead, due to

152
00:09:13,670 --> 00:09:16,730
it its many levels of indirection and the
synchronization,

153
00:09:16,730 --> 00:09:19,850
content switching, and data movement costs
associated with

154
00:09:19,850 --> 00:09:23,260
communicating between the threads, as
described at this link.

155
00:09:24,450 --> 00:09:26,970
In contrast, posting runnables is
efficient and

156
00:09:26,970 --> 00:09:28,770
easy to use, when knowledge of what

157
00:09:28,770 --> 00:09:33,960
commands to run can be centralized at the
point where the post method is invoked.

158
00:09:33,960 --> 00:09:37,120
However, this approach isn't very
flexible.

159
00:09:37,120 --> 00:09:41,360
Since it's harder to parametrize or modify
commands once they've been posted.

160
00:09:42,850 --> 00:09:45,472
Posting Runnable commands is also not very
scalable,

161
00:09:45,472 --> 00:09:48,520
since programmers need to manually manage
the thread pools.

162
00:09:49,820 --> 00:09:52,895
Conversely, sending messages is more
flexible

163
00:09:52,895 --> 00:09:56,670
than posting commands, or executing
AsyncTasks.

164
00:09:56,670 --> 00:10:00,750
Since client senders are decoupled from
Handler receivers.

165
00:10:00,750 --> 00:10:03,144
For example, messages can contain data
that

166
00:10:03,144 --> 00:10:05,601
the handlers used to process the messages
they

167
00:10:05,601 --> 00:10:07,554
receive based on their type codes and

168
00:10:07,554 --> 00:10:10,449
fields, as well as the Handler's runtime
context.

169
00:10:11,630 --> 00:10:14,366
Likewise, senders and receivers can engage
in flexible

170
00:10:14,366 --> 00:10:18,071
and efficient peer-to-peer conversations,
by passing messages back and

171
00:10:18,071 --> 00:10:20,294
forth to each other between the user
interface

172
00:10:20,294 --> 00:10:23,599
and background threads, as well as between
background threads.

173
00:10:24,720 --> 00:10:28,685
However, sending messages is more
complicated to use than posting Runnable

174
00:10:28,685 --> 00:10:33,680
commands, since developers must extend a
Handle message hook methods of Handlers.

175
00:10:33,680 --> 00:10:37,030
And write explicit object to process the
messages they receive.

176
00:10:38,210 --> 00:10:41,246
Likewise, thread pools must be managed
manually,

177
00:10:41,246 --> 00:10:43,730
which makes this approach hard to scale.

178
00:10:45,070 --> 00:10:49,231
Ultimately, the right choice concurrency
model for your application depends on your

179
00:10:49,231 --> 00:10:51,454
requirements, and your understanding of
the

180
00:10:51,454 --> 00:10:54,733
Android Concurrency frameworks and their
associated patterns.

181
00:10:54,733 --> 00:11:01,650
[MUSIC].

182
00:11:01,650 --> 00:11:05,730
In summary, the Threaded Downloads
application demonstrated how to implement

183
00:11:05,730 --> 00:11:11,050
three concurrency models, using the
Android hammer, and AsyncTask frameworks.

184
00:11:11,050 --> 00:11:13,700
The solution showed some things in common.

185
00:11:13,700 --> 00:11:15,815
For example, all three used the background
Thread to

186
00:11:15,815 --> 00:11:18,560
connect with the remote server and
download a file.

187
00:11:18,560 --> 00:11:20,216
Which are long duration operations, that

188
00:11:20,216 --> 00:11:23,050
shouldn't run in the user interface
Thread.

189
00:11:23,050 --> 00:11:25,064
Likewise, all three solutions used the
user

190
00:11:25,064 --> 00:11:28,370
interface Thread to perform short duration
operations.

191
00:11:28,370 --> 00:11:30,563
Such as showing and dismissing
ProgressDialogs,

192
00:11:30,563 --> 00:11:32,340
and displaying the image on the screen.

193
00:11:33,480 --> 00:11:37,210
However, the solutions also have some
important differences.

194
00:11:37,210 --> 00:11:39,510
For example, the background Threads, and
user interface

195
00:11:39,510 --> 00:11:42,700
Thread in each model, communicate in
different ways.

196
00:11:42,700 --> 00:11:45,550
The first two solutions are based on the
Hammer framework,

197
00:11:45,550 --> 00:11:49,312
where application code in a background
Thread explicitly communicates to the

198
00:11:49,312 --> 00:11:52,504
user interface Thread, by posting a
Runnable command or sending a

199
00:11:52,504 --> 00:11:56,150
message object to a Handler associated
with the user interface Thread.

200
00:11:57,460 --> 00:12:00,534
These handlers then process what they
receive, in the context

201
00:12:00,534 --> 00:12:03,730
of the user interface Thread, as discussed
in earlier videos.

202
00:12:04,940 --> 00:12:08,360
The third solution used the AsyncTask
framework, or application code

203
00:12:08,360 --> 00:12:12,122
in a user interface Thread in Background
thread, implicitly communicates by

204
00:12:12,122 --> 00:12:15,086
having the framework use synchronized cues
to pass message in

205
00:12:15,086 --> 00:12:18,930
future test objects between the Threads,
also discussed in earlier videos.

206
00:12:20,120 --> 00:12:23,980
Each concurrency model has the pros and
cons covered in this video.

207
00:12:23,980 --> 00:12:25,370
So it's important to understand your

208
00:12:25,370 --> 00:12:27,900
application requirements to make the right
choice.

209
00:12:29,150 --> 00:12:31,850
Likewise it's important to understand the
gang of four and

210
00:12:31,850 --> 00:12:36,200
POSA patterns, that under lie these
concurrency models and frameworks.

211
00:12:36,200 --> 00:12:38,740
It's particularly important to recognize
the pattern

212
00:12:38,740 --> 00:12:42,010
based structure interaction of the hammer
framework,

213
00:12:42,010 --> 00:12:44,240
since knowledge of it's loosely connected
classes

214
00:12:44,240 --> 00:12:47,559
alone, may not clearly articulate their
proper usage.

215
00:12:49,410 --> 00:12:51,778
The key patterns underlie the Android

216
00:12:51,778 --> 00:12:55,256
hammer and AsyncTask frameworks are
discussed further

217
00:12:55,256 --> 00:12:57,180
in the next module, which also

218
00:12:57,180 --> 00:13:00,970
examines these framework implementations
in more detail.

219
00:13:00,970 --> 00:13:09,319
[MUSIC]

