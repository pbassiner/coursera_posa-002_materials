1
00:00:00,206 --> 00:00:09,416
[MUSIC].

2
00:00:09,416 --> 00:00:13,680
Welcome to the next part of the module on
Android concurrency frameworks.

3
00:00:13,680 --> 00:00:16,399
Which begins the coverage of the AsyncTask
framework.

4
00:00:17,620 --> 00:00:20,609
This part examines the structure and
functionality of the

5
00:00:20,609 --> 00:00:23,964
AsyncTask Framework, and shows how Android
uses this framework

6
00:00:23,964 --> 00:00:26,526
to access the call logs database
concurrently in a

7
00:00:26,526 --> 00:00:30,150
background thread, to avoid blocking the
user interface thread.

8
00:00:31,290 --> 00:00:34,364
The looper, handler, thread, message and
runnable classes in the

9
00:00:34,364 --> 00:00:38,850
HaMer framework discussed in previous
videos, are relatively loosely connected.

10
00:00:38,850 --> 00:00:42,420
Which is flexible and works well for
simple use cases.

11
00:00:42,420 --> 00:00:44,730
Such as posting runnable commands from a
background

12
00:00:44,730 --> 00:00:46,730
thread to run in the user interface
thread.

13
00:00:48,010 --> 00:00:51,829
However, these loose connections also
require users of the HaMer framework to

14
00:00:51,829 --> 00:00:53,710
understand the patterns that guide the

15
00:00:53,710 --> 00:00:57,150
structure of, and interactions between,
it's classes.

16
00:00:57,150 --> 00:01:00,770
Especially if they want to implement more
sophisticated concurrency models.

17
00:01:00,770 --> 00:01:05,120
Such as pools of threads that take
advantage of multi courtship sets.

18
00:01:05,120 --> 00:01:10,390
Likewise, application developers must
write and rewrite message types

19
00:01:10,390 --> 00:01:12,810
and message handlers, which is tedious and
error prone.

20
00:01:14,180 --> 00:01:17,352
Therefore, to provide a more cohesive,
usable and scalable

21
00:01:17,352 --> 00:01:19,853
concurrency model to application
developers,

22
00:01:19,853 --> 00:01:22,235
Android defines the AsyncTask Framework.

23
00:01:22,235 --> 00:01:24,818
Which provides an integrated set of
classes that

24
00:01:24,818 --> 00:01:27,968
execute long duration operations in one or
more background

25
00:01:27,968 --> 00:01:31,055
threads, and publish their results to the
user interface

26
00:01:31,055 --> 00:01:36,540
thread without explicitly manipulating
threads, handlers, messages or runnables.

27
00:01:36,540 --> 00:01:39,760
Though the AsyncTask framework uses them
internally, along with

28
00:01:39,760 --> 00:01:43,439
several other reusable Java concurrency
classes, such as FutureTask.

29
00:01:45,100 --> 00:01:48,780
The classes in the AsyncTask Framework are
strongly connected.

30
00:01:48,780 --> 00:01:50,800
Which simplifies it's usability by
reducing

31
00:01:50,800 --> 00:01:53,180
the surface area of it's interface.

32
00:01:53,180 --> 00:01:56,495
In particular, this framework exposes it's
capabilities

33
00:01:56,495 --> 00:02:00,480
to application developers, by the
AsyncTask facade class.

34
00:02:00,480 --> 00:02:04,381
Which provides a simplified interface to a
complicated

35
00:02:04,381 --> 00:02:08,071
body of framework code, as described at
this link.

36
00:02:08,071 --> 00:02:13,467
[MUSIC].

37
00:02:13,467 --> 00:02:17,597
There are two main categories of methods
in the AsyncTask class, that

38
00:02:17,597 --> 00:02:22,218
provides the facade for the AsyncTask
framework, as described at this link.

39
00:02:22,218 --> 00:02:27,100
The first type are public methods that are
invoked by applications.

40
00:02:27,100 --> 00:02:31,190
For example, the Execute Method runs a
task with a specified parameters.

41
00:02:31,190 --> 00:02:35,100
Conversely, the Cancel Method attempts to
stop the execution of a task.

42
00:02:36,380 --> 00:02:39,390
The second type of methods are protected
methods,

43
00:02:39,390 --> 00:02:42,050
such as, OnPreExecute, doinBackground,

44
00:02:42,050 --> 00:02:46,230
onProgressUpdate, onPostExecute, and
onCancel.

45
00:02:46,230 --> 00:02:47,997
Which are hook methods invoked by the

46
00:02:47,997 --> 00:02:50,619
AsyncTask framework at different points in
time, and

47
00:02:50,619 --> 00:02:52,671
in different contexts, such as in the user

48
00:02:52,671 --> 00:02:55,270
interface thread or one or more background
threads.

49
00:02:56,560 --> 00:02:59,260
Framework users must extend AsyncTask
baseclass and

50
00:02:59,260 --> 00:03:01,360
override one or more of its hook methods,

51
00:03:01,360 --> 00:03:02,980
as shown by this example from the

52
00:03:02,980 --> 00:03:06,520
threaded downloads application we'll
discuss in upcoming videos.

53
00:03:07,860 --> 00:03:09,920
Execute can only be called once on an
instance

54
00:03:09,920 --> 00:03:12,659
of AsyncTask by code running in the user
interface thread.

55
00:03:14,040 --> 00:03:16,100
Execute is implemented as a template
method

56
00:03:16,100 --> 00:03:18,740
described at this link, which collaborates
with other

57
00:03:18,740 --> 00:03:20,970
parts of the AsyncTask framework to run
its

58
00:03:20,970 --> 00:03:23,260
hook methods at the appropriate time and
context.

59
00:03:24,770 --> 00:03:29,020
After Execute is called, the AsyncTask
framework invokes the onPreExecute hook

60
00:03:29,020 --> 00:03:33,610
method in the user interface thread, which
can perform initialization activities.

61
00:03:33,610 --> 00:03:36,030
Such as displaying a progress dialogue to
the user.

62
00:03:37,540 --> 00:03:39,740
The framework next calls the,
doinBackground

63
00:03:39,740 --> 00:03:41,445
hook method in a background thread,

64
00:03:41,445 --> 00:03:43,260
where long duration operations can run

65
00:03:43,260 --> 00:03:45,439
without blocking the user interface
thread.

66
00:03:46,870 --> 00:03:50,292
As long as doinBackground is running, it
can call publish progress to

67
00:03:50,292 --> 00:03:52,148
publish updates on the user interface

68
00:03:52,148 --> 00:03:54,410
thread by the onProgressUpdate hook
method.

69
00:03:55,790 --> 00:03:59,200
When doinBackground completes, it returns
a result, which the

70
00:03:59,200 --> 00:04:02,891
framework delivers as a parameter to the
onPostExecute hook method.

71
00:04:02,891 --> 00:04:06,323
Which can display the results of long
duration

72
00:04:06,323 --> 00:04:10,770
computations in the context of the user
interface thread.

73
00:04:10,770 --> 00:04:15,951
[MUSIC].

74
00:04:15,951 --> 00:04:19,919
Now that we've shown the hook methods
invoked by the AsyncTask framework

75
00:04:19,919 --> 00:04:22,479
during normal execution, we'll examine
what

76
00:04:22,479 --> 00:04:24,669
it does when an AsyncTask is cancelled.

77
00:04:26,120 --> 00:04:28,110
A call to cancel attempts to stop the

78
00:04:28,110 --> 00:04:31,700
execution of an AsyncTask instance, which
will fail

79
00:04:31,700 --> 00:04:34,350
if the task is already completed, already
been

80
00:04:34,350 --> 00:04:37,220
cancelled, or could not be cancelled for
some reason.

81
00:04:38,770 --> 00:04:40,950
After an application calls cancel.

82
00:04:40,950 --> 00:04:43,470
The framework will invoke the on cancel
hook method

83
00:04:43,470 --> 00:04:46,670
in the user interface thread after doing
background returns.

84
00:04:47,740 --> 00:04:50,786
I also ensures that on post execute is
never invoked.

85
00:04:50,786 --> 00:04:53,822
AsyncTask cancellation is a cooperative
process, so

86
00:04:53,822 --> 00:04:57,386
the doinBackground method should
periodically check the value

87
00:04:57,386 --> 00:04:59,828
return by the isCancelled method and
finish

88
00:04:59,828 --> 00:05:03,340
as early as possible, if it's been
cancelled.

89
00:05:03,340 --> 00:05:07,150
Similar to the methods for stopping
threads, discussed in an earlier video.

90
00:05:08,860 --> 00:05:13,333
The asynctask class provides three generic
parameters used by its hook methods, to

91
00:05:13,333 --> 00:05:17,150
identify the types sent to the task that
runs in the background thread.

92
00:05:18,160 --> 00:05:19,958
The type of progress units published

93
00:05:19,958 --> 00:05:22,278
during background computations, and the
type

94
00:05:22,278 --> 00:05:26,750
of the result returned when doinBackground
finishes executing in a background thread.

95
00:05:28,340 --> 00:05:31,182
An application instantiates these
parameters, extends

96
00:05:31,182 --> 00:05:33,096
AsyncTask, and overrides any or all of

97
00:05:33,096 --> 00:05:35,126
its hook methods as needed, to customize

98
00:05:35,126 --> 00:05:37,650
their behavior, to meet its concurrency
needs.

99
00:05:37,650 --> 00:05:43,432
As shown by this snippet of code derived
from the example at this link.

100
00:05:43,432 --> 00:05:48,337
[MUSIC].

101
00:05:48,337 --> 00:05:52,443
Now that we've shown the key methods in
the AsyncTask facade class.

102
00:05:52,443 --> 00:05:55,065
We'll show an example of how Android
extends

103
00:05:55,065 --> 00:05:57,750
and uses it in the Call Log Async class.

104
00:05:57,750 --> 00:06:01,130
That's part of the Android phone
application, shown at this path name.

105
00:06:02,660 --> 00:06:05,742
Several call log Async methods use
AsyncTask to access

106
00:06:05,742 --> 00:06:09,239
the call logs database concurrently in a
background thread.

107
00:06:09,239 --> 00:06:12,055
Which is necessary, since database
operations can

108
00:06:12,055 --> 00:06:13,911
take a long time to run, depending

109
00:06:13,911 --> 00:06:18,170
on the system's load, so they can't be
called in the user interface thread.

110
00:06:19,890 --> 00:06:22,680
The CallLogAsync class is typically used
within

111
00:06:22,680 --> 00:06:26,670
an activity, which creates a new
CallLogAsync object.

112
00:06:26,670 --> 00:06:29,110
And populates a list of call arguments.

113
00:06:29,110 --> 00:06:33,170
Such as the caller information, phone
number, and call time and duration.

114
00:06:34,630 --> 00:06:37,578
These arguments are then passed to the
call log Async

115
00:06:37,578 --> 00:06:42,180
Objects add call method, which creates and
executes addCall task.

116
00:06:42,180 --> 00:06:45,680
Which is an anonymous instance of an
AsyncTask subclass that

117
00:06:45,680 --> 00:06:49,420
concurrently saves this call information
in the call log database.

118
00:06:50,620 --> 00:06:53,886
AddCall tasks doinBackground hook method
invokes the

119
00:06:53,886 --> 00:06:57,690
static addCallmethod of a callLog calls
class.

120
00:06:57,690 --> 00:07:01,666
Since doinBackground runs in a background
thread, it can safely block when the call

121
00:07:01,666 --> 00:07:03,402
data is inserted into the call log's

122
00:07:03,402 --> 00:07:05,740
content provider, as shown at this path
name.

123
00:07:07,050 --> 00:07:08,988
After the call log data has been inserted

124
00:07:08,988 --> 00:07:12,237
into the content provider, the
doinBackground method returns the

125
00:07:12,237 --> 00:07:14,973
array of uniform resource identifiers that
were added to

126
00:07:14,973 --> 00:07:17,840
the underlying SQLite database, shown at
this path name.

127
00:07:19,160 --> 00:07:22,840
This array is passed as a parameter to the
onPostExecute hook method.

128
00:07:22,840 --> 00:07:25,696
Which runs in the user interface thread
and performs a sanity

129
00:07:25,696 --> 00:07:28,910
check, to ensure the call data was indeed
written to the database.

130
00:07:30,180 --> 00:07:35,040
Call log async also uses an AsyncTask to
get the last outgoing call concurrently.

131
00:07:35,040 --> 00:07:40,480
By creating and executing an anonymous
instance of getLastOutgoingCall task.

132
00:07:40,480 --> 00:07:43,530
The doinBackground method of this
AsyncTask subclass runs

133
00:07:43,530 --> 00:07:46,397
in a background thread and invokes a
blocking operation

134
00:07:46,397 --> 00:07:49,264
to the underlying content provider and
SQLite database

135
00:07:49,264 --> 00:07:52,560
to get the last outgoing call from the
database.

136
00:07:52,560 --> 00:07:56,808
It's onPostExecute method passes the last
outgoing call number to the last outgoing

137
00:07:56,808 --> 00:08:01,190
call hook method, which was registered as
a callback object by the activity earlier.

138
00:08:02,460 --> 00:08:04,620
This example shows how Androids AsyncTask

139
00:08:04,620 --> 00:08:07,620
framework makes it straightforward to
execute operations

140
00:08:07,620 --> 00:08:10,020
currently in background threads, and
process

141
00:08:10,020 --> 00:08:12,310
the results in the user interface thread.

142
00:08:12,310 --> 00:08:17,722
[MUSIC].

143
00:08:17,722 --> 00:08:20,794
In summary, AsyncTask provides a powerful
framework,

144
00:08:20,794 --> 00:08:23,354
containing an integrated set of classes,
that

145
00:08:23,354 --> 00:08:25,850
applications can use to execute long
duration

146
00:08:25,850 --> 00:08:28,560
operations in one or more background
threads.

147
00:08:28,560 --> 00:08:31,860
And publish their incremental and final
results to the user

148
00:08:31,860 --> 00:08:34,896
interface thread, without explicitly
manipulating

149
00:08:34,896 --> 00:08:37,770
threads, handlers, messages, or runnables.

150
00:08:39,140 --> 00:08:44,150
AsyncTask embodies key characteristics of
frameworks, covered in this earlier video.

151
00:08:44,150 --> 00:08:47,118
For example, it supports inversion of
control, by having the

152
00:08:47,118 --> 00:08:51,110
framework involve its hook methods at
certain points and contexts.

153
00:08:51,110 --> 00:08:54,210
It also supports domain-specific structure
and functionality.

154
00:08:54,210 --> 00:08:57,140
Such as synchronized message cues and
thread pulls.

155
00:08:57,140 --> 00:08:59,764
Finally, it provides semi-complete
portions

156
00:08:59,764 --> 00:09:01,876
of applications, where the AsyncTask

157
00:09:01,876 --> 00:09:04,760
base class must be subclassed before it
can be used.

158
00:09:05,980 --> 00:09:08,380
Subclasses will override at least one
method,

159
00:09:08,380 --> 00:09:11,520
doinBackground, which runs in a background
thread.

160
00:09:11,520 --> 00:09:14,490
Performs long duration processing, and
returns results.

161
00:09:15,530 --> 00:09:19,920
Subclasses also often override a second
method, onPostExecute.

162
00:09:19,920 --> 00:09:21,990
Which can publish the result to the user
interface thread.

163
00:09:23,140 --> 00:09:25,700
AsyncTask is used extensively in Android.

164
00:09:25,700 --> 00:09:29,640
Especially in its applications, as shown
at these path names.

165
00:09:29,640 --> 00:09:32,034
The onProgressUpdate method is not as
widely used

166
00:09:32,034 --> 00:09:35,050
in Android as the other AsyncTask cook
methods.

167
00:09:35,050 --> 00:09:39,810
Although there are some example usages, as
shown at these pathnames.

168
00:09:39,810 --> 00:09:49,810
[MUSIC]

